{
  "item": [
    {
      "id": "183083ed-d83d-46b2-a85a-9fd9011169ce",
      "name": "accounts",
      "item": [
        {
          "id": "4ce4cadb-6730-452d-9393-0b42d7f6c62b",
          "name": "Create new Account",
          "request": {
            "name": "Create new Account",
            "description": {
              "content": "You will receive an email with OTP",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "accounts"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "description": "Commit Hash of Client Sowftware",
                "key": "commit-hash",
                "value": "{{commit-hash}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "fb93f6ab-2c81-4060-9bfd-2b8664c96c75",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "Commit Hash of Client Sowftware",
                    "key": "commit-hash",
                    "value": "{{commit-hash}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Commit Hash",
                  "key": "commit-hash",
                  "value": "{{commit-hash}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "6d0f9de9-a422-4ed8-a576-7a075293cc41",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "Commit Hash of Client Sowftware",
                    "key": "commit-hash",
                    "value": "{{commit-hash}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /accounts for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "67f159b2-2027-407e-9eda-e9ac3450b787",
          "name": "Login to existing Account",
          "request": {
            "name": "Login to existing Account",
            "description": {
              "content": "You will receive an email with OTP",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "accounts"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "695702e1-44f7-499c-8267-f2a029a5f28d",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "0300a8ee-f956-4d37-aefe-596107ac1de3",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /accounts for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "7c3bb7ef-45a2-4612-b0f4-418aff225c94",
      "name": "Login using OTP: creates a session",
      "request": {
        "name": "Login using OTP: creates a session",
        "description": {
          "content": "Returned is a token, which is combined the session-uuid and the account-uuid",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "login"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"client\": \"{{client}}\",\n    \"email\": \"{{email}}\",\n    \"otp\": \"{{otp}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "49c9a6bc-5983-4e18-a71a-0bc54661c314",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"client\": \"{{client}}\",\n    \"email\": \"{{email}}\",\n    \"otp\": \"{{otp}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Created",
          "code": 201,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"token\": \"91baa8c3-288c-3d30-fe42-310ed23ab954:942cf58a-045d-6a0f-1f0d-9a5c2c18aafc\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "67031ea0-a8fd-4009-b483-9678d74295c4",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"client\": \"{{client}}\",\n    \"email\": \"{{email}}\",\n    \"otp\": \"{{otp}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /login for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `token` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`token`)){\n          if(pm.expect(_.get(responseData[0], `token`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `token`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `token` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`token`)){\n          if(pm.expect(_.get(pm.response.json(), `token`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `token`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('token has same pattern as `^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`',function(){ \n          pm.expect(_.get(responseData, \"token\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\n        })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "9d2010a5-50eb-4720-bae7-679ac3271a8e",
      "name": "Logout: delete the session",
      "request": {
        "name": "Logout: delete the session",
        "description": {},
        "url": {
          "path": [
            "logout"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "key",
              "value": "Token"
            },
            {
              "key": "value",
              "value": "{{apiKey}}"
            },
            {
              "key": "in",
              "value": "header"
            }
          ]
        }
      },
      "response": [
        {
          "id": "42fd11bc-a018-4827-8b9a-40b5d1da09fd",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "logout"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "1726c6be-a90b-4e09-99ac-c608e5fa37cf",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "logout"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /logout for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "905b86b2-854a-4ea9-a588-6d76d19127a3",
      "name": "me",
      "item": [
        {
          "id": "4feddb66-f871-464d-985e-37cda0bcfcea",
          "name": "my account details",
          "request": {
            "name": "my account details",
            "description": {},
            "url": {
              "path": [
                "me"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "0319f483-f2a4-4cd4-8409-06ea07f7f6cf",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"2000-02-06T14:51:45.524Z\",\n  \"did\": \"anim ex in elit\",\n  \"email\": \"<email>\",\n  \"id\": \"e618b452-0102-d606-a223-d158a2988d69\",\n  \"image\": \"https://cdn.credentialregiater.com/2571c54e-2cde-4434-83f2-c329f74adc27.png\",\n  \"name\": \"L'}.. -L..}-L.'p'{}{'L.-.p'{-{  .-} L- .}-p} Lp-{} .-{}pL } - .--.{ .}}{-L-pp- ' -}L{'-p {{L{-}L.}.L\",\n  \"settings\": {\n    \"cillum_46\": 23881370.872534633\n  },\n  \"updatedAt\": \"1951-05-10T02:47:11.514Z\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "95a08486-1740-4e58-a1f7-13a4cd1010ac",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "dd8c1350-513a-4c5b-bfc6-8fd5af1f9832",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /me for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `did` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`did`)){\n          if(pm.expect(_.get(responseData[0], `did`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `did`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `did` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`did`)){\n          if(pm.expect(_.get(pm.response.json(), `did`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `did`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(responseData[0], `name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(pm.response.json(), `name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `image` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`image`)){\n          if(pm.expect(_.get(responseData[0], `image`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `image`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `image` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`image`)){\n          if(pm.expect(_.get(pm.response.json(), `image`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `image`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('image has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"image\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `settings` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`settings`)){\n          if(pm.expect(_.get(responseData[0], `settings`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `settings`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `settings` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`settings`)){\n          if(pm.expect(_.get(pm.response.json(), `settings`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `settings`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "fda8dc78-f048-46a1-82ce-10f580a00398",
          "name": "Change my settings or account name",
          "request": {
            "name": "Change my settings or account name",
            "description": {},
            "url": {
              "path": [
                "me"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"Lorem8\": false\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "8d69b905-28b3-4c13-a1db-c591784c9e01",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"occaecat8\": false\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"2000-02-06T14:51:45.524Z\",\n  \"did\": \"anim ex in elit\",\n  \"email\": \"<email>\",\n  \"id\": \"e618b452-0102-d606-a223-d158a2988d69\",\n  \"image\": \"https://cdn.credentialregiater.com/2571c54e-2cde-4434-83f2-c329f74adc27.png\",\n  \"name\": \"L'}.. -L..}-L.'p'{}{'L.-.p'{-{  .-} L- .}-p} Lp-{} .-{}pL } - .--.{ .}}{-L-pp- ' -}L{'-p {{L{-}L.}.L\",\n  \"settings\": {\n    \"cillum_46\": 23881370.872534633\n  },\n  \"updatedAt\": \"1951-05-10T02:47:11.514Z\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "54e8992d-7e41-4397-8256-05072170c9b2",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"occaecat8\": false\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "43bf63a5-9659-4d0e-ad98-de818d4cb5a1",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"occaecat8\": false\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /me for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `did` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`did`)){\n          if(pm.expect(_.get(responseData[0], `did`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `did`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `did` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`did`)){\n          if(pm.expect(_.get(pm.response.json(), `did`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `did`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(responseData[0], `name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(pm.response.json(), `name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `image` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`image`)){\n          if(pm.expect(_.get(responseData[0], `image`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `image`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `image` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`image`)){\n          if(pm.expect(_.get(pm.response.json(), `image`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `image`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('image has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"image\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `settings` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`settings`)){\n          if(pm.expect(_.get(responseData[0], `settings`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `settings`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `settings` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`settings`)){\n          if(pm.expect(_.get(pm.response.json(), `settings`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `settings`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "990106b4-6ec3-403b-9543-7a47f0a1c385",
      "name": "credentials",
      "item": [
        {
          "id": "80621e16-1c1e-4349-af1f-073ac8210e37",
          "name": "All credentials in my Wallet",
          "request": {
            "name": "All credentials in my Wallet",
            "description": {},
            "url": {
              "path": [
                "credentials"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "size",
                  "value": "{{size}}",
                  "description": "Limit the number of results"
                },
                {
                  "disabled": false,
                  "key": "offset",
                  "value": "{{offset}}",
                  "description": "Offset results"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "414383ec-eabf-4828-89dd-05a71af0e4fd",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "credentials"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Response record count",
                  "key": "page-size",
                  "value": "{{page-size}}"
                },
                {
                  "disabled": false,
                  "description": "Response record offset",
                  "key": "page-offset",
                  "value": "{{page-offset}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"credentials\": [\n    {\n      \"createdAt\": \"1968-05-17T11:16:41.577Z\",\n      \"credential\": \"culpa Excepteur sint sunt et\",\n      \"format\": \"jwt_vc_json-ld\",\n      \"id\": \"e4adbedd-26bf-5edf-6803-5dbb6ca8c91b\",\n      \"status\": \"suspended\",\n      \"statusUpdatedAt\": \"1954-04-16T02:42:14.334Z\"\n    },\n    {\n      \"createdAt\": \"2007-04-19T19:43:44.581Z\",\n      \"credential\": \"enim Ut id do irure\",\n      \"format\": \"jwt_vc_json\",\n      \"id\": \"urn:uuid:b99fd889-eb52-9cb7-f11f-1ddace3cf2d3\",\n      \"status\": \"revoked\",\n      \"statusUpdatedAt\": \"1982-11-02T19:05:09.053Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "92e78e86-58db-4a36-95de-0a3a7c895f5b",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "credentials"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "a77f331c-1df0-40a7-8187-60a58f6d16db",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "credentials"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /credentials?size=<integer>&offset=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `credentials` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`credentials`)){\n              if(pm.expect(_.get(responseData[0], `credentials`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `credentials`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `credentials` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`credentials`)){\n              if(pm.expect(_.get(pm.response.json(), `credentials`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `credentials`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the credentials field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`credentials`);\n          let credentialsArray = _.get(pm.response.json(), `credentials`, \"\");\n          for (let credentials_it = 0; credentials_it < credentialsArray.length; credentials_it++) {\n            let iterator = credentials_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('credentials[${credentials_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'format' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].format`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].format`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].format' has 'format' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].format`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].format`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('credentials[${credentials_it}].format to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials[${credentials_it}].format\", \"\")).to.include.oneOf([\"jwt_vc_json\",\"jwt_vc_json-ld\",\"ldp_vc\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'credential' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].credential`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].credential`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].credential' has 'credential' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].credential`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].credential`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].status`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].status`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('credentials[${credentials_it}].status to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials[${credentials_it}].status\", \"\")).to.include.oneOf([\"active\",\"suspended\",\"revoked\",\"expired\",\"pending\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'statusUpdatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].statusUpdatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].statusUpdatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].statusUpdatedAt' has 'statusUpdatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].statusUpdatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].statusUpdatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('credentials[${credentials_it}].statusUpdatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].statusUpdatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('credentials[${credentials_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "53d6870c-06a2-4977-a021-512fd4fe6b4a",
          "name": "{id}",
          "item": [
            {
              "id": "724b2f53-2feb-4e56-877f-c7987a1eec19",
              "name": "One credential from my Wallet",
              "request": {
                "name": "One credential from my Wallet",
                "description": {},
                "url": {
                  "path": [
                    "credentials",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "5af8e002-b329-46ef-8513-0f781c7fd637",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"createdAt\": \"1997-11-25T13:04:08.803Z\",\n  \"credential\": \"sunt Ut eu officia quis\",\n  \"format\": \"jwt_vc_json\",\n  \"id\": \"urn:uuid:d6f32b1e-0b26-cf4b-0657-c325b9e8a740\",\n  \"status\": \"suspended\",\n  \"statusUpdatedAt\": \"1972-01-17T19:38:52.888Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "d886ee3c-1b09-4cde-871f-8892dee17923",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "e3ed119c-e91e-445c-9e86-7cb63c995f8c",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /credentials/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `credentials` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`credentials`)){\n              if(pm.expect(_.get(responseData[0], `credentials`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `credentials`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `credentials` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`credentials`)){\n              if(pm.expect(_.get(pm.response.json(), `credentials`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `credentials`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the credentials field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`credentials`);\n          let credentialsArray = _.get(pm.response.json(), `credentials`, \"\");\n          for (let credentials_it = 0; credentials_it < credentialsArray.length; credentials_it++) {\n            let iterator = credentials_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('credentials[${credentials_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'format' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].format`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].format`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].format' has 'format' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].format`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].format`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('credentials[${credentials_it}].format to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials[${credentials_it}].format\", \"\")).to.include.oneOf([\"jwt_vc_json\",\"jwt_vc_json-ld\",\"ldp_vc\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'credential' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].credential`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].credential`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].credential' has 'credential' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].credential`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].credential`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].status`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].status`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('credentials[${credentials_it}].status to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials[${credentials_it}].status\", \"\")).to.include.oneOf([\"active\",\"suspended\",\"revoked\",\"expired\",\"pending\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'statusUpdatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].statusUpdatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].statusUpdatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].statusUpdatedAt' has 'statusUpdatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].statusUpdatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].statusUpdatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('credentials[${credentials_it}].statusUpdatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].statusUpdatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('credentials[${credentials_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "6675e483-b552-4671-8a5d-2281f736cb7e",
              "name": "Delete one credential from my Wallet",
              "request": {
                "name": "Delete one credential from my Wallet",
                "description": {},
                "url": {
                  "path": [
                    "credentials",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "c61f2bc4-b2df-4d2b-8e63-bd565592957d",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "a27ea478-9985-4564-8230-b42ba5206279",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "d6e65dbf-97a0-474c-b279-1e9024c8d429",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /credentials/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "b7f7ebb1-6851-46fb-ad61-0cc842feeb24",
      "name": "Retrieve accounts with granted access permissions",
      "request": {
        "name": "Retrieve accounts with granted access permissions",
        "description": {},
        "url": {
          "path": [
            "grants"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "key",
              "value": "Token"
            },
            {
              "key": "value",
              "value": "{{apiKey}}"
            },
            {
              "key": "in",
              "value": "header"
            }
          ]
        }
      },
      "response": [
        {
          "id": "8024e889-20db-4ead-ba92-18fc60d57e74",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "grants"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"grants\": [\n    {\n      \"account\": {\n        \"email\": \"<email>\",\n        \"id\": \"2ec10b12-7925-8162-5ae1-6284de4f44a2\",\n        \"image\": \"data:image/jpeg;base64,<clipped>\",\n        \"name\": \"L{\"\n      },\n      \"createdAt\": \"1947-10-22T10:05:29.949Z\",\n      \"id\": \"97dd1bd0-bbce-8276-760c-efb3d21eed57\",\n      \"token\": \"69f2fba5-28a6-1edd-afeb-5c701c232f9b:4259bd7c-d819-67ef-b2a1-e39a3f1ee112\",\n      \"updatedAt\": \"2021-07-31T04:58:05.978Z\"\n    },\n    {\n      \"account\": {\n        \"email\": \"<email>\",\n        \"id\": \"b1f132c6-822d-ab42-a60d-5b6b3dcdbbb3\",\n        \"image\": \"data:image/jpeg;base64,<clipped>\",\n        \"name\": \" L'.L.pL.  . -p-{{p}L .LL.---\"\n      },\n      \"createdAt\": \"2020-11-14T08:22:48.314Z\",\n      \"id\": \"ad055302-4951-befe-668a-c6ede135063e\",\n      \"token\": \"ca20f5a9-fb62-799a-d8a6-ce5ecbdbda3f:4188e463-5d23-737d-9a56-fdc112fae43f\",\n      \"updatedAt\": \"1962-06-29T13:34:42.782Z\"\n    }\n  ],\n  \"total\": 1\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "635af177-6ea7-43d8-bccf-fbfe3e30e8ab",
          "name": "Authentication Required",
          "originalRequest": {
            "url": {
              "path": [
                "grants"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /grants for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `grants` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`grants`)){\n              if(pm.expect(_.get(responseData[0], `grants`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `grants`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `grants` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`grants`)){\n              if(pm.expect(_.get(pm.response.json(), `grants`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `grants`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the grants field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`grants`);\n          let grantsArray = _.get(pm.response.json(), `grants`, \"\");\n          for (let grants_it = 0; grants_it < grantsArray.length; grants_it++) {\n            let iterator = grants_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('grants[${grants_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"grants[${grants_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'token' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].token`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].token`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].token' has 'token' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].token`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].token`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('grants[${grants_it}].token has same pattern as `^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`',function(){ \n          pm.expect(_.get(responseData, \"grants[${grants_it}].token\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('grants[${grants_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"grants[${grants_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('grants[${grants_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"grants[${grants_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'account' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].account`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].account`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].account' has 'account' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].account`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].account`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].account.id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].account.id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].account.id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].account.id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].account.id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('grants[${grants_it}].account.id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"grants[${grants_it}].account.id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'name' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].account.name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].account.name`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].account.name' has 'name' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].account.name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].account.name`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('grants[${grants_it}].account.name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"grants[${grants_it}].account.name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'image' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].account.image`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].account.image`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].account.image' has 'image' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].account.image`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].account.image`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].account.email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].account.email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].account.email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].account.email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].account.email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('grants[${grants_it}].account.email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"grants[${grants_it}].account.email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('grants[${grants_it}].account.email format to be email',function(){ \n                pm.expect(_.get(responseData, \"grants[${grants_it}].account.email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "61fb707f-327f-4b93-8699-958a46e715b0",
      "name": "authorizations",
      "item": [
        {
          "id": "12a8e0cb-394a-41a5-b6ab-3686ba2a0b8c",
          "name": "List accounts who have access to my account",
          "request": {
            "name": "List accounts who have access to my account",
            "description": {},
            "url": {
              "path": [
                "authorizations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "a13fb3dd-7771-4781-8c4a-67d23a5a5a96",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"authorizations\": [\n    {\n      \"createdAt\": \"1965-07-25T13:00:13.373Z\",\n      \"email\": \"<email>\",\n      \"id\": \"urn:uuid:dd352a4f-44ec-887f-fb27-2d2d12b26a41\",\n      \"name\": \"pL}p'-p''.'} {-L\",\n      \"updatedAt\": \"1982-01-09T18:08:30.286Z\"\n    },\n    {\n      \"createdAt\": \"1997-09-21T22:38:05.947Z\",\n      \"email\": \"<email>\",\n      \"id\": \"8c1ca1f2-3160-9eaa-8c43-a2044e92b21f\",\n      \"name\": \"{ L-L- pL.p{{  L-{ p}}{} p}L  }} { L-. L''.Lp'p {{{'{pL-}\",\n      \"updatedAt\": \"1962-07-24T13:30:48.271Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "f873b961-246d-4c2f-96da-bfb1516307d7",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "b6e8c823-e4c0-4cea-a262-e255d7892771",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /authorizations for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `authorizations` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`authorizations`)){\n              if(pm.expect(_.get(responseData[0], `authorizations`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `authorizations`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `authorizations` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`authorizations`)){\n              if(pm.expect(_.get(pm.response.json(), `authorizations`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `authorizations`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the authorizations field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`authorizations`);\n          let authorizationsArray = _.get(pm.response.json(), `authorizations`, \"\");\n          for (let authorizations_it = 0; authorizations_it < authorizationsArray.length; authorizations_it++) {\n            let iterator = authorizations_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'authorizationsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `authorizations[${authorizations_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`authorizations[${authorizations_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'authorizations[${authorizations_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `authorizations[${authorizations_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`authorizations[${authorizations_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('authorizations[${authorizations_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"authorizations[${authorizations_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'authorizationsArray' has 'name' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `authorizations[${authorizations_it}].name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`authorizations[${authorizations_it}].name`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'authorizations[${authorizations_it}].name' has 'name' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `authorizations[${authorizations_it}].name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`authorizations[${authorizations_it}].name`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('authorizations[${authorizations_it}].name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"authorizations[${authorizations_it}].name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'authorizationsArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `authorizations[${authorizations_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`authorizations[${authorizations_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'authorizations[${authorizations_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `authorizations[${authorizations_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`authorizations[${authorizations_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('authorizations[${authorizations_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"authorizations[${authorizations_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('authorizations[${authorizations_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"authorizations[${authorizations_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'authorizationsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `authorizations[${authorizations_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`authorizations[${authorizations_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'authorizations[${authorizations_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `authorizations[${authorizations_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`authorizations[${authorizations_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('authorizations[${authorizations_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"authorizations[${authorizations_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'authorizationsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `authorizations[${authorizations_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`authorizations[${authorizations_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'authorizations[${authorizations_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `authorizations[${authorizations_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`authorizations[${authorizations_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('authorizations[${authorizations_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"authorizations[${authorizations_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "73b761e6-17ee-4bba-888c-09199c670e2b",
          "name": "Authorize another existing Account to access my Account",
          "request": {
            "name": "Authorize another existing Account to access my Account",
            "description": {},
            "url": {
              "path": [
                "authorizations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "b2af1cd7-a2d8-4960-9810-5f2dcc134980",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Location of the created resource",
                  "key": "location",
                  "value": "{{location}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"1996-08-08T21:22:14.135Z\",\n  \"email\": \"<email>\",\n  \"id\": \"1fe4b812-2ee7-4843-e88e-98a7ad59a02b\",\n  \"name\": \"'p-.p-}.L'.} {p. {{pp''p{-\",\n  \"updatedAt\": \"2011-01-14T00:29:20.391Z\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "f6dc3e46-71a6-434a-92de-dafe60ab46c2",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "ea5f4e65-e383-4a6b-afc4-8e5683fe9a77",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /authorizations for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(responseData[0], `name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(pm.response.json(), `name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "25b3191f-1708-4af4-99f1-16072d6a90ba",
          "name": "Remove Authorized Account",
          "request": {
            "name": "Remove Authorized Account",
            "description": {},
            "url": {
              "path": [
                "authorizations",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) UUID"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "952fb294-fb79-485a-9e3e-7f42372f0187",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "744e1ab3-2a41-4b82-933d-da5ea64a13c9",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "8da495fd-fca8-43b1-92c0-be9ccf98fa62",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /authorizations/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "9cd9435c-91e1-41cc-9ef4-002ac2370eaf",
      "name": "apikeys",
      "item": [
        {
          "id": "79b914f8-1240-4213-9d27-df423ab76946",
          "name": "List API Keys you have created (session.type = 4)",
          "request": {
            "name": "List API Keys you have created (session.type = 4)",
            "description": {
              "content": "API keys to access your account via the API. API Keys are a session record with session.type equal to 4.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "apikeys"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "964b252f-e70e-4e59-889a-6a79da4f7968",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"apikeys\": [\n    {\n      \"createdAt\": \"1988-08-16T22:21:06.833Z\",\n      \"id\": \"1fe66724-36c8-70e0-0491-0427c5154af4\"\n    },\n    {\n      \"createdAt\": \"1953-03-03T18:23:11.699Z\",\n      \"id\": \"urn:uuid:0ab51de3-e2d0-bcd1-40bb-fcfe04ef3f37\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "a4de1e6a-58e9-4268-9bba-d122f88ef74b",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "c28a531d-1c90-49c7-a438-2fba2cd2e6de",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /apikeys for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `apikeys` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`apikeys`)){\n              if(pm.expect(_.get(responseData[0], `apikeys`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `apikeys`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `apikeys` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`apikeys`)){\n              if(pm.expect(_.get(pm.response.json(), `apikeys`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `apikeys`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the apikeys field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`apikeys`);\n          let apikeysArray = _.get(pm.response.json(), `apikeys`, \"\");\n          for (let apikeys_it = 0; apikeys_it < apikeysArray.length; apikeys_it++) {\n            let iterator = apikeys_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'apikeysArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `apikeys[${apikeys_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`apikeys[${apikeys_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'apikeys[${apikeys_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `apikeys[${apikeys_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`apikeys[${apikeys_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('apikeys[${apikeys_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"apikeys[${apikeys_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'apikeysArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `apikeys[${apikeys_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`apikeys[${apikeys_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'apikeys[${apikeys_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `apikeys[${apikeys_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`apikeys[${apikeys_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('apikeys[${apikeys_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"apikeys[${apikeys_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "203c8ad3-0595-431c-b99a-1ea4e63ef164",
          "name": "Create API Key (Create Session with type = 4)",
          "request": {
            "name": "Create API Key (Create Session with type = 4)",
            "description": {},
            "url": {
              "path": [
                "apikeys"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "8e1dfd15-6dc2-47c8-bbba-c15d0ddaab88",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Location of the created resource",
                  "key": "location",
                  "value": "{{location}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"1983-09-06T18:25:36.967Z\",\n  \"id\": \"605d68ae-462c-6467-d80d-e5f13b670ecf\",\n  \"token\": \"d7282deb-37a2-3874-e97e-e86d65e9764b:a3e23466-9f0d-31a0-a30c-2019328e2e42\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "9efa7179-55f0-46d1-aa1f-9af645432458",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "379f6e0d-546b-4221-92ae-29cacdeffa18",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /apikeys for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `token` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`token`)){\n          if(pm.expect(_.get(responseData[0], `token`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `token`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `token` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`token`)){\n          if(pm.expect(_.get(pm.response.json(), `token`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `token`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('token has same pattern as `^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`',function(){ \n          pm.expect(_.get(responseData, \"token\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "27ee1e49-576d-4d18-bc5e-ecf568bdee1a",
          "name": "/apikeys/:id",
          "request": {
            "name": "/apikeys/:id",
            "description": {},
            "url": {
              "path": [
                "apikeys",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) UUID"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "c43e33ea-f4ff-4a55-9675-4258f72878fd",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "82e08501-e032-427b-96c4-7e68858ac21a",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "0285b2d0-116f-45a7-b3e2-f579f93b0391",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /apikeys/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "e68574a8-b867-44e6-b81f-34bf7fe81472",
      "name": "recipients",
      "item": [
        {
          "id": "67336786-5c3d-4eef-94ae-09629d3ee3df",
          "name": "branches",
          "item": [
            {
              "id": "a84462fd-b4b5-489c-8b5f-fc2f1593546f",
              "name": "/recipients/branches",
              "request": {
                "name": "/recipients/branches",
                "description": {},
                "url": {
                  "path": [
                    "recipients",
                    "branches"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "key": "coc-number",
                      "value": "{{coc-number}}",
                      "description": "Filter the results on the Chamber of Commerce number (Kamer van Koophandel nummer). This could return multiple results, as there could be multiple Branches."
                    },
                    {
                      "disabled": false,
                      "key": "coc-branch-number",
                      "value": "{{coc-branch-number}}",
                      "description": "Filter the results on the Chamber of Commerce Branch number (Kamer van Koophandel vestigingsnummer). This should only return a single result."
                    },
                    {
                      "disabled": false,
                      "key": "trade-name",
                      "value": "{{trade-name}}",
                      "description": "Filter the results on the Tradename of the organization."
                    },
                    {
                      "disabled": false,
                      "key": "size",
                      "value": "{{size}}",
                      "description": "Limit the number of results"
                    },
                    {
                      "disabled": false,
                      "key": "offset",
                      "value": "{{offset}}",
                      "description": "Offset results"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "fcab70a4-4865-4a8d-87e8-19f6eb38add0",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "coc-number",
                          "value": "{{coc-number}}"
                        },
                        {
                          "key": "coc-branch-number",
                          "value": "{{coc-branch-number}}"
                        },
                        {
                          "key": "trade-name",
                          "value": "{{trade-name}}"
                        },
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record count",
                      "key": "page-size",
                      "value": "{{page-size}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record offset",
                      "key": "page-offset",
                      "value": "{{page-offset}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"branches\": [\n    {\n      \"cocBranchNumber\": \"094446383852\",\n      \"cocNumber\": \"83978925\",\n      \"createdAt\": \"1957-02-16T03:34:24.395Z\",\n      \"deregistrationDate\": \"2010-03-26\",\n      \"eoriNumber\": \"NL950371238\",\n      \"id\": \"urn:uuid:4a25f646-24b8-0121-c6d8-877799d6feb2\",\n      \"tradeName\": \"est\",\n      \"tradeNames\": [\n        \"amet dolor pariatur\",\n        \"esse est nulla ut magna\"\n      ],\n      \"updatedAt\": \"1961-11-09T01:36:07.045Z\",\n      \"email\": \"\\\"D_jL!W*\\\"@zr8-.0f6dz4qAf7y.j0jglgMpikI.2i.sgYjhKgqx7.HeHwXmVtNWj.IWrWkQ5Ja.lLMHe.EeFGA.t3.nsbF\",\n      \"phone\": \"deserunt amet magna\"\n    },\n    {\n      \"cocBranchNumber\": \"319748930999\",\n      \"cocNumber\": \"59656063\",\n      \"createdAt\": \"1983-05-09T12:53:04.325Z\",\n      \"deregistrationDate\": \"1967-11-08\",\n      \"eoriNumber\": \"NL424002214\",\n      \"id\": \"acce2f7e-6428-67cb-9806-1a1d7dce0f42\",\n      \"tradeName\": \"commodo sit dolore\",\n      \"tradeNames\": [\n        \"deserunt\",\n        \"eiusmod commodo ipsum qui\"\n      ],\n      \"updatedAt\": \"1991-12-07T02:32:31.626Z\",\n      \"email\": \"\\\"(lI\\\"-x\\\"@ARX.TM6KJdGKz.EIMSxMM\",\n      \"phone\": \"enim non\"\n    }\n  ],\n  \"total\": 1\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "b5701161-f35e-4954-83c6-31764ef8a940",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "coc-number",
                          "value": "{{coc-number}}"
                        },
                        {
                          "key": "coc-branch-number",
                          "value": "{{coc-branch-number}}"
                        },
                        {
                          "key": "trade-name",
                          "value": "{{trade-name}}"
                        },
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "3f345da4-20da-4cd8-a505-916a7a67987a",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "coc-number",
                          "value": "{{coc-number}}"
                        },
                        {
                          "key": "coc-branch-number",
                          "value": "{{coc-branch-number}}"
                        },
                        {
                          "key": "trade-name",
                          "value": "{{trade-name}}"
                        },
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches?coc-number=<string>&coc-branch-number=<string>&trade-name=<string>&size=<integer>&offset=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(responseData[0], `branches`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(pm.response.json(), `branches`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the branches field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`branches`);\n          let branchesArray = _.get(pm.response.json(), `branches`, \"\");\n          for (let branches_it = 0; branches_it < branchesArray.length; branches_it++) {\n            let iterator = branches_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('branches[${branches_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"branches[${branches_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('branches[${branches_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].phone`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].phone`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocNumber' has 'cocNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocBranchNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocBranchNumber' has 'cocBranchNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocBranchNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'tradeName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].tradeName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].tradeName' has 'tradeName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].tradeName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'eoriNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].eoriNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].eoriNumber' has 'eoriNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].eoriNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'deregistrationDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].deregistrationDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].deregistrationDate' has 'deregistrationDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].deregistrationDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "29cb456a-8e2d-4d5e-aafc-cc7c86fa9e44",
              "name": "Add new Branch. The branch details are checked with the KvK API. If details are incorrect, an error is returned.<br>Required: cocNr  (single br) || (cocNr && city) || cocBranchNr",
              "request": {
                "name": "Add new Branch. The branch details are checked with the KvK API. If details are incorrect, an error is returned.<br>Required: cocNr  (single br) || (cocNr && city) || cocBranchNr",
                "description": {
                  "content": "Add new Branch. The branch details are checked with the KvK API. If details are incorrect, an error is returned.<br>Required: cocNr  (single br) || (cocNr && city) || cocBranchNr",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "recipients",
                    "branches"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "e6769745-5f81-4116-8923-75d35ea611ae",
                  "name": "successful operation, existing branch returned",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Location of the created resource",
                      "key": "location",
                      "value": "{{location}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"2022-01-04T14:13:19.256Z\",\n  \"deregistrationDate\": \"1966-06-20\",\n  \"eoriNumber\": \"NL811255944\",\n  \"id\": \"urn:uuid:e0f74bec-ab12-006a-f391-b97a63b4d415\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"Ut Ex\",\n    \"quis magna eu\"\n  ],\n  \"updatedAt\": \"1995-11-11T13:43:50.289Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "54065263-0f31-40c0-819a-47635d39eb61",
                  "name": "successful operation, branch created",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Location of the created resource",
                      "key": "location",
                      "value": "{{location}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"2022-01-04T14:13:19.256Z\",\n  \"deregistrationDate\": \"1966-06-20\",\n  \"eoriNumber\": \"NL811255944\",\n  \"id\": \"urn:uuid:e0f74bec-ab12-006a-f391-b97a63b4d415\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"Ut Ex\",\n    \"quis magna eu\"\n  ],\n  \"updatedAt\": \"1995-11-11T13:43:50.289Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "5885141a-7a53-4472-9086-f33993883023",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "1421074e-2fab-48ad-a8fa-5d38364d269f",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation, existing branch returned\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(responseData[0], `phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(pm.response.json(), `phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(responseData[0], `tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `tradeName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(pm.response.json(), `tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `tradeName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(responseData[0], `tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(pm.response.json(), `tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(responseData[0], `eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `eoriNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `eoriNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(responseData[0], `deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `deregistrationDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(pm.response.json(), `deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `deregistrationDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation, branch created\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(responseData[0], `phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(pm.response.json(), `phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(responseData[0], `tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `tradeName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(pm.response.json(), `tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `tradeName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(responseData[0], `tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(pm.response.json(), `tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(responseData[0], `eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `eoriNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `eoriNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(responseData[0], `deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `deregistrationDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(pm.response.json(), `deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `deregistrationDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "61e94459-91ce-4259-8ead-175258401a0a",
              "name": "{id}",
              "item": [
                {
                  "id": "ea83fa45-b123-49aa-a441-55bcf958ff8d",
                  "name": "/recipients/branches/:id",
                  "request": {
                    "name": "/recipients/branches/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "branches",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "00b31f27-b635-44ca-80bf-217eb492f1fa",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"2022-01-04T14:13:19.256Z\",\n  \"deregistrationDate\": \"1966-06-20\",\n  \"eoriNumber\": \"NL811255944\",\n  \"id\": \"urn:uuid:e0f74bec-ab12-006a-f391-b97a63b4d415\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"Ut Ex\",\n    \"quis magna eu\"\n  ],\n  \"updatedAt\": \"1995-11-11T13:43:50.289Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "3fcf9c58-99eb-4165-a3ac-b50e5a571661",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "e06dc3bd-1795-4d30-a13a-19e1cffe3cb6",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(responseData[0], `branches`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(pm.response.json(), `branches`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the branches field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`branches`);\n          let branchesArray = _.get(pm.response.json(), `branches`, \"\");\n          for (let branches_it = 0; branches_it < branchesArray.length; branches_it++) {\n            let iterator = branches_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('branches[${branches_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"branches[${branches_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('branches[${branches_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].phone`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].phone`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocNumber' has 'cocNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocBranchNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocBranchNumber' has 'cocBranchNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocBranchNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'tradeName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].tradeName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].tradeName' has 'tradeName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].tradeName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'eoriNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].eoriNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].eoriNumber' has 'eoriNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].eoriNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'deregistrationDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].deregistrationDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].deregistrationDate' has 'deregistrationDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].deregistrationDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "2e54402b-1351-4803-bd2d-c6d5593ac9c8",
                  "name": "/recipients/branches/:id",
                  "request": {
                    "name": "/recipients/branches/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "branches",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "01f0acc2-3c8c-4cfb-8d0f-b958e2a89225",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "0b2520ca-5f5c-4e1a-a69b-058048ca16a0",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "2328b645-a3f0-4f06-bd4f-c915a01c657e",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "8a280fd2-4fdb-45b8-93a9-605e1be63784",
                  "name": "/recipients/branches/:id",
                  "request": {
                    "name": "/recipients/branches/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "branches",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [
                    {
                      "id": "c2056717-3e72-45ba-91fe-715bc581a9b3",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"2022-01-04T14:13:19.256Z\",\n  \"deregistrationDate\": \"1966-06-20\",\n  \"eoriNumber\": \"NL811255944\",\n  \"id\": \"urn:uuid:e0f74bec-ab12-006a-f391-b97a63b4d415\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"Ut Ex\",\n    \"quis magna eu\"\n  ],\n  \"updatedAt\": \"1995-11-11T13:43:50.289Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "e254eb0e-f07a-4213-b3d5-440b45886fdd",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "5d477d93-3330-4723-a080-ddbf79ad1216",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches/:id for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(responseData[0], `phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(pm.response.json(), `phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(responseData[0], `tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `tradeName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(pm.response.json(), `tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `tradeName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(responseData[0], `tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(pm.response.json(), `tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(responseData[0], `eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `eoriNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `eoriNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(responseData[0], `deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `deregistrationDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(pm.response.json(), `deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `deregistrationDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "4dfa70bc-b9f9-41ef-8065-69194b4ce078",
                  "name": "registrations",
                  "item": [
                    {
                      "id": "d3cc5955-6d7d-4bb3-ae85-fe75c746aef1",
                      "name": "/recipients/branches/:id/registrations",
                      "request": {
                        "name": "/recipients/branches/:id/registrations",
                        "description": {},
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "disabled": false,
                              "key": "credential-url",
                              "value": "{{credential-url}}",
                              "description": "Filter results on specific Credential (URL)."
                            },
                            {
                              "disabled": false,
                              "key": "size",
                              "value": "{{size}}",
                              "description": "Limit the number of results"
                            },
                            {
                              "disabled": false,
                              "key": "offset",
                              "value": "{{offset}}",
                              "description": "Offset results"
                            }
                          ],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        }
                      },
                      "response": [
                        {
                          "id": "350531d6-3807-4e89-8ad0-3972d365812a",
                          "name": "successful operation",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record count",
                              "key": "page-size",
                              "value": "{{page-size}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record offset",
                              "key": "page-offset",
                              "value": "{{page-offset}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"registrations\": [\n    {\n      \"createdAt\": \"1968-10-19T19:50:56.648Z\",\n      \"credentialUrl\": \"mtxSSpCQqUK:V@\",\n      \"endDate\": \"1976-12-16\",\n      \"id\": \"urn:uuid:1f964257-9808-6709-d122-866fcdd2dfe4\",\n      \"issuedAt\": \"1968-09-20T07:47:00.505Z\",\n      \"reference\": \"nostrud culpa\",\n      \"startDate\": \"2021-04-06\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1960-08-29\",\n      \"updatedAt\": \"2004-01-28T13:54:37.273Z\"\n    },\n    {\n      \"createdAt\": \"1982-07-29T02:59:24.097Z\",\n      \"credentialUrl\": \"7Q:/6@Tg~\",\n      \"endDate\": \"2017-05-03\",\n      \"id\": \"01d29dab-eba0-c8ac-401c-04576e0b990d\",\n      \"issuedAt\": \"1951-12-04T14:48:22.822Z\",\n      \"reference\": \"ut\",\n      \"startDate\": \"2008-09-29\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"2002-05-14\",\n      \"updatedAt\": \"1956-05-05T10:12:28.020Z\"\n    }\n  ],\n  \"total\": 1\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "3921c312-c525-4e84-9293-488fbcd3b176",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "aa098461-8717-4e9a-8e78-9361b53a8354",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches/:id/registrations?credential-url=<string>&size=<integer>&offset=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(responseData[0], `branches`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(pm.response.json(), `branches`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the branches field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`branches`);\n          let branchesArray = _.get(pm.response.json(), `branches`, \"\");\n          for (let branches_it = 0; branches_it < branchesArray.length; branches_it++) {\n            let iterator = branches_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('branches[${branches_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"branches[${branches_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('branches[${branches_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].phone`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].phone`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocNumber' has 'cocNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocBranchNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocBranchNumber' has 'cocBranchNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocBranchNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'tradeName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].tradeName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].tradeName' has 'tradeName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].tradeName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'eoriNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].eoriNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].eoriNumber' has 'eoriNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].eoriNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'deregistrationDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].deregistrationDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].deregistrationDate' has 'deregistrationDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].deregistrationDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    {
                      "id": "c7aac522-ce73-4c17-80f5-6d37a63b612d",
                      "name": "Create new Registration for the Recipient",
                      "request": {
                        "name": "Create new Registration for the Recipient",
                        "description": {
                          "content": "Create new Registration for the Recipient",
                          "type": "text/plain"
                        },
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        },
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "response": [
                        {
                          "id": "283e12f2-6e88-45df-9f5d-f4021fe4615a",
                          "name": "Successful",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Created",
                          "code": 201,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Location of the created resource",
                              "key": "location",
                              "value": "{{location}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"createdAt\": \"1989-11-12T07:33:10.850Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"urn:uuid:40958ec8-6532-934e-7a14-463e85de18a9\",\n  \"issuedAt\": \"1978-03-07T00:13:31.050Z\",\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"1978-11-11\",\n  \"updatedAt\": \"2001-10-27T23:35:35.441Z\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "333fd926-ac52-4527-8d80-e3876f9308c7",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "943bb155-73d4-4a6f-9ff7-f34d1a3808c4",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches/:id/registrations for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"Successful\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(responseData[0], `reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(pm.response.json(), `reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `startDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`startDate`)){\n          if(pm.expect(_.get(responseData[0], `startDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `startDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `startDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`startDate`)){\n          if(pm.expect(_.get(pm.response.json(), `startDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `startDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('startDate format to be date',function(){\n                pm.expect(_.get(responseData, \"startDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `endDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`endDate`)){\n          if(pm.expect(_.get(responseData[0], `endDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `endDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `endDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`endDate`)){\n          if(pm.expect(_.get(pm.response.json(), `endDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `endDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('endDate format to be date',function(){\n                pm.expect(_.get(responseData, \"endDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`status`)){\n          if(pm.expect(_.get(responseData[0], `status`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `status`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n          if(pm.expect(_.get(pm.response.json(), `status`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `credentialUrl` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`credentialUrl`)){\n          if(pm.expect(_.get(responseData[0], `credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `credentialUrl`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `credentialUrl` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`credentialUrl`)){\n          if(pm.expect(_.get(pm.response.json(), `credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `credentialUrl`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('credentialUrl has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"credentialUrl\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `suspendedUntil` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`suspendedUntil`)){\n          if(pm.expect(_.get(responseData[0], `suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `suspendedUntil`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `suspendedUntil` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`suspendedUntil`)){\n          if(pm.expect(_.get(pm.response.json(), `suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `suspendedUntil`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('suspendedUntil format to be date',function(){\n                pm.expect(_.get(responseData, \"suspendedUntil\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `issuedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`issuedAt`)){\n          if(pm.expect(_.get(responseData[0], `issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `issuedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `issuedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`issuedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `issuedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('issuedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"issuedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        },
        {
          "id": "08053faa-97f7-454a-851f-24c2fdc93a83",
          "name": "persons",
          "item": [
            {
              "id": "69086737-455e-4747-a1ca-ee5586e225b8",
              "name": "/recipients/persons",
              "request": {
                "name": "/recipients/persons",
                "description": {},
                "url": {
                  "path": [
                    "recipients",
                    "persons"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "key": "size",
                      "value": "{{size}}",
                      "description": "Limit the number of results"
                    },
                    {
                      "disabled": false,
                      "key": "offset",
                      "value": "{{offset}}",
                      "description": "Offset results"
                    },
                    {
                      "disabled": false,
                      "key": "name",
                      "value": "{{name}}",
                      "description": "Filter results based on Person's name"
                    },
                    {
                      "disabled": false,
                      "key": "birth-date",
                      "value": "{{birth-date}}",
                      "description": "Filter results based on birth date"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "8bef1be1-b8f8-4c43-b7e2-29f7a42a9cba",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        },
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "birth-date",
                          "value": "{{birth-date}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record count",
                      "key": "page-size",
                      "value": "{{page-size}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record offset",
                      "key": "page-offset",
                      "value": "{{page-offset}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"persons\": [\n    {\n      \"birthDate\": \"1959-10-08\",\n      \"birthPlace\": \".p }pp-p', .L }p' L'L. .',.L'.,,},'.-p{-p } ' ,p-{,}}L,..Lp-},L { -,\",\n      \"countryCode\": \"DB\",\n      \"createdAt\": \"1982-07-27T22:05:56.647Z\",\n      \"email\": \"<email>\",\n      \"firstName\": \" - {}L}. }'L}{L.{' -{ L{{p-}.\",\n      \"houseNumber\": \"1\",\n      \"houseNumberPostfix\": \" U,XwFrUF-''-Yvc\",\n      \"id\": \"urn:uuid:a04664ca-f801-5d19-d0e1-0c28e348e665\",\n      \"initials\": \"YD\",\n      \"lastName\": \"p'{-''}{L 'pp}  { .\",\n      \"middleName\": \"..\",\n      \"phone\": \"<string>\",\n      \"postalCode\": \"27041\",\n      \"reference\": \"commodo dolor qui\",\n      \"updatedAt\": \"1972-04-04T03:17:03.885Z\"\n    },\n    {\n      \"birthDate\": \"1992-06-17\",\n      \"birthPlace\": \"-pLLp .' L . }\",\n      \"countryCode\": \"DK\",\n      \"createdAt\": \"2002-09-03T02:54:49.708Z\",\n      \"email\": \"<email>\",\n      \"firstName\": \"}ppp{L\",\n      \"houseNumber\": \"6\",\n      \"houseNumberPostfix\": \"f OD_D-.bz\",\n      \"id\": \"urn:uuid:fc5c76ff-0b27-93d2-132e-3b37386f1a60\",\n      \"initials\": \"VPQVM\",\n      \"lastName\": \"}.L p\",\n      \"middleName\": \".}\",\n      \"phone\": \"<string>\",\n      \"postalCode\": \"3404FK\",\n      \"reference\": \"Excepte\",\n      \"updatedAt\": \"1988-04-01T07:33:42.836Z\"\n    }\n  ],\n  \"total\": 1\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "8374d185-bda8-450e-b1c6-033d3ad32b6e",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        },
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "birth-date",
                          "value": "{{birth-date}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "72d7054f-1603-476e-8c22-22ca000fd66b",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        },
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "birth-date",
                          "value": "{{birth-date}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons?size=<integer>&offset=<integer>&name=<string>&birth-date=<date> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(responseData[0], `persons`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(pm.response.json(), `persons`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the persons field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`persons`);\n          let personsArray = _.get(pm.response.json(), `persons`, \"\");\n          for (let persons_it = 0; persons_it < personsArray.length; persons_it++) {\n            let iterator = persons_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('persons[${persons_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"persons[${persons_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'initials' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].initials`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].initials`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].initials' has 'initials' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].initials`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].initials`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'firstName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].firstName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].firstName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].firstName' has 'firstName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].firstName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].firstName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'middleName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].middleName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].middleName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].middleName' has 'middleName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].middleName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].middleName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'lastName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].lastName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].lastName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].lastName' has 'lastName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].lastName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].lastName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthDate' has 'birthDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthPlace' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthPlace`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthPlace' has 'birthPlace' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthPlace`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].phone`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].phone`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('persons[${persons_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'postalCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].postalCode`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].postalCode' has 'postalCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].postalCode`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumber' has 'houseNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumberPostfix' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumberPostfix' has 'houseNumberPostfix' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'countryCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].countryCode`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].countryCode' has 'countryCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].countryCode`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'reference' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].reference`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].reference' has 'reference' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].reference`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('persons[${persons_it}].reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"persons[${persons_it}].reference\", \"\").length).to.be.at.most(100);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "9748804d-bc73-4262-93cf-a5eab71033c1",
              "name": "/recipients/persons",
              "request": {
                "name": "/recipients/persons",
                "description": {},
                "url": {
                  "path": [
                    "recipients",
                    "persons"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "6d7fd04f-5fea-441d-a0a7-2475ad7cb5d2",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Location of the created resource",
                      "key": "location",
                      "value": "{{location}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"birthDate\": \"<date>\",\n  \"birthPlace\": \"<string>\",\n  \"countryCode\": \"<string>\",\n  \"createdAt\": \"2018-11-11T13:06:16.760Z\",\n  \"email\": \"<email>\",\n  \"firstName\": \"<string>\",\n  \"houseNumber\": \"<string>\",\n  \"houseNumberPostfix\": \"<string>\",\n  \"id\": \"414335fb-c48b-c643-e4c6-8626fd00e9b6\",\n  \"initials\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"middleName\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"postalCode\": \"<string>\",\n  \"reference\": \"<string>\",\n  \"updatedAt\": \"1962-07-25T12:10:43.068Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "c2bf2681-9693-45b6-bb24-e511e9184a52",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "a197e878-b552-4e9c-be4a-4fb70b04a6ae",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`initials`)){\n          if(pm.expect(_.get(responseData[0], `initials`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `initials`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`initials`)){\n          if(pm.expect(_.get(pm.response.json(), `initials`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `initials`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`firstName`)){\n          if(pm.expect(_.get(responseData[0], `firstName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `firstName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`firstName`)){\n          if(pm.expect(_.get(pm.response.json(), `firstName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `firstName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`middleName`)){\n          if(pm.expect(_.get(responseData[0], `middleName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `middleName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`middleName`)){\n          if(pm.expect(_.get(pm.response.json(), `middleName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `middleName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`lastName`)){\n          if(pm.expect(_.get(responseData[0], `lastName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `lastName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`lastName`)){\n          if(pm.expect(_.get(pm.response.json(), `lastName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `lastName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`birthDate`)){\n          if(pm.expect(_.get(responseData[0], `birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `birthDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`birthDate`)){\n          if(pm.expect(_.get(pm.response.json(), `birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `birthDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`birthPlace`)){\n          if(pm.expect(_.get(responseData[0], `birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `birthPlace`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`birthPlace`)){\n          if(pm.expect(_.get(pm.response.json(), `birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `birthPlace`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(responseData[0], `phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(pm.response.json(), `phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`postalCode`)){\n          if(pm.expect(_.get(responseData[0], `postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `postalCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`postalCode`)){\n          if(pm.expect(_.get(pm.response.json(), `postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `postalCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`houseNumber`)){\n          if(pm.expect(_.get(responseData[0], `houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `houseNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `houseNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`houseNumberPostfix`)){\n          if(pm.expect(_.get(responseData[0], `houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumberPostfix`)){\n          if(pm.expect(_.get(pm.response.json(), `houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`countryCode`)){\n          if(pm.expect(_.get(responseData[0], `countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `countryCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`countryCode`)){\n          if(pm.expect(_.get(pm.response.json(), `countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `countryCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(responseData[0], `reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(pm.response.json(), `reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "1de6e004-c0ba-4e49-a819-591a42dfdbbb",
              "name": "{id}",
              "item": [
                {
                  "id": "ac61b08f-78d4-4423-bd91-34c7d56612a4",
                  "name": "/recipients/persons/:id",
                  "request": {
                    "name": "/recipients/persons/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "persons",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "cbc2a79a-8fa8-4323-beb5-3621840eab4c",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"birthDate\": \"<date>\",\n  \"birthPlace\": \"<string>\",\n  \"countryCode\": \"<string>\",\n  \"createdAt\": \"2018-11-11T13:06:16.760Z\",\n  \"email\": \"<email>\",\n  \"firstName\": \"<string>\",\n  \"houseNumber\": \"<string>\",\n  \"houseNumberPostfix\": \"<string>\",\n  \"id\": \"414335fb-c48b-c643-e4c6-8626fd00e9b6\",\n  \"initials\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"middleName\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"postalCode\": \"<string>\",\n  \"reference\": \"<string>\",\n  \"updatedAt\": \"1962-07-25T12:10:43.068Z\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "871579f0-e970-480f-b848-87538cc02613",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "90906151-79e4-4d21-872c-6b86c327801c",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(responseData[0], `persons`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(pm.response.json(), `persons`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the persons field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`persons`);\n          let personsArray = _.get(pm.response.json(), `persons`, \"\");\n          for (let persons_it = 0; persons_it < personsArray.length; persons_it++) {\n            let iterator = persons_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('persons[${persons_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"persons[${persons_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'initials' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].initials`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].initials`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].initials' has 'initials' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].initials`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].initials`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'firstName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].firstName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].firstName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].firstName' has 'firstName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].firstName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].firstName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'middleName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].middleName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].middleName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].middleName' has 'middleName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].middleName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].middleName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'lastName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].lastName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].lastName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].lastName' has 'lastName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].lastName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].lastName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthDate' has 'birthDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthPlace' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthPlace`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthPlace' has 'birthPlace' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthPlace`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].phone`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].phone`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('persons[${persons_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'postalCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].postalCode`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].postalCode' has 'postalCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].postalCode`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumber' has 'houseNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumberPostfix' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumberPostfix' has 'houseNumberPostfix' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'countryCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].countryCode`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].countryCode' has 'countryCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].countryCode`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'reference' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].reference`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].reference' has 'reference' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].reference`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('persons[${persons_it}].reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"persons[${persons_it}].reference\", \"\").length).to.be.at.most(100);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "841378f3-ae43-4568-a899-8ce210f06566",
                  "name": "/recipients/persons/:id",
                  "request": {
                    "name": "/recipients/persons/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "persons",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "4cb5a9c2-e805-425b-8d0c-c67910e9072a",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "b9f4472a-88ef-42f0-a5dc-8c18811b40ac",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "3fef1937-1c42-4bf5-9de2-09bd9d3542a9",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "d7bbff5a-89a4-4627-8249-0c61aee0ae1d",
                  "name": "Update a Person. Note: when the VC is issued, these fields cannot be updated anymore:<br/>- initials<br/>- lastName<br/>- birthDate",
                  "request": {
                    "name": "Update a Person. Note: when the VC is issued, these fields cannot be updated anymore:<br/>- initials<br/>- lastName<br/>- birthDate",
                    "description": {
                      "content": "Update a Person. Note: when the VC is issued, these fields cannot be updated anymore:<br/>- initials<br/>- lastName<br/>- birthDate",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "recipients",
                        "persons",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [
                    {
                      "id": "449128e2-15c3-4c81-93c5-d7925eac2dd2",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"birthDate\": \"<date>\",\n  \"birthPlace\": \"<string>\",\n  \"countryCode\": \"<string>\",\n  \"createdAt\": \"2018-11-11T13:06:16.760Z\",\n  \"email\": \"<email>\",\n  \"firstName\": \"<string>\",\n  \"houseNumber\": \"<string>\",\n  \"houseNumberPostfix\": \"<string>\",\n  \"id\": \"414335fb-c48b-c643-e4c6-8626fd00e9b6\",\n  \"initials\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"middleName\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"postalCode\": \"<string>\",\n  \"reference\": \"<string>\",\n  \"updatedAt\": \"1962-07-25T12:10:43.068Z\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "abbe167b-b023-494e-b6e4-3a6abaec918b",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "e04cd995-58a1-4308-9345-6e8d96361a39",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons/:id for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`initials`)){\n          if(pm.expect(_.get(responseData[0], `initials`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `initials`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`initials`)){\n          if(pm.expect(_.get(pm.response.json(), `initials`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `initials`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`firstName`)){\n          if(pm.expect(_.get(responseData[0], `firstName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `firstName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`firstName`)){\n          if(pm.expect(_.get(pm.response.json(), `firstName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `firstName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`middleName`)){\n          if(pm.expect(_.get(responseData[0], `middleName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `middleName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`middleName`)){\n          if(pm.expect(_.get(pm.response.json(), `middleName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `middleName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`lastName`)){\n          if(pm.expect(_.get(responseData[0], `lastName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `lastName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`lastName`)){\n          if(pm.expect(_.get(pm.response.json(), `lastName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `lastName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`birthDate`)){\n          if(pm.expect(_.get(responseData[0], `birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `birthDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`birthDate`)){\n          if(pm.expect(_.get(pm.response.json(), `birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `birthDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`birthPlace`)){\n          if(pm.expect(_.get(responseData[0], `birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `birthPlace`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`birthPlace`)){\n          if(pm.expect(_.get(pm.response.json(), `birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `birthPlace`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(responseData[0], `phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(pm.response.json(), `phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`postalCode`)){\n          if(pm.expect(_.get(responseData[0], `postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `postalCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`postalCode`)){\n          if(pm.expect(_.get(pm.response.json(), `postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `postalCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`houseNumber`)){\n          if(pm.expect(_.get(responseData[0], `houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `houseNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `houseNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`houseNumberPostfix`)){\n          if(pm.expect(_.get(responseData[0], `houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumberPostfix`)){\n          if(pm.expect(_.get(pm.response.json(), `houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`countryCode`)){\n          if(pm.expect(_.get(responseData[0], `countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `countryCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`countryCode`)){\n          if(pm.expect(_.get(pm.response.json(), `countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `countryCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(responseData[0], `reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(pm.response.json(), `reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "c2e7e207-b21a-4035-83a5-14aa3f824f34",
                  "name": "registrations",
                  "item": [
                    {
                      "id": "2fe681dd-5797-4955-8a11-9ff4736ff71e",
                      "name": "/recipients/persons/:id/registrations",
                      "request": {
                        "name": "/recipients/persons/:id/registrations",
                        "description": {},
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "disabled": false,
                              "key": "credential-url",
                              "value": "{{credential-url}}",
                              "description": "Filter results on specific Credential (URL)."
                            },
                            {
                              "disabled": false,
                              "key": "size",
                              "value": "{{size}}",
                              "description": "Limit the number of results"
                            },
                            {
                              "disabled": false,
                              "key": "offset",
                              "value": "{{offset}}",
                              "description": "Offset results"
                            }
                          ],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        }
                      },
                      "response": [
                        {
                          "id": "1c8a46b0-5c09-4a05-aeac-5be537320d0f",
                          "name": "successful operation",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record count",
                              "key": "page-size",
                              "value": "{{page-size}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record offset",
                              "key": "page-offset",
                              "value": "{{page-offset}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"registrations\": [\n    {\n      \"createdAt\": \"1996-07-17T07:22:50.854Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"53efed0e-6cdb-34ea-f112-a4bbf57be28e\",\n      \"issuedAt\": \"1990-06-17T12:51:58.455Z\",\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1972-03-08\",\n      \"updatedAt\": \"1999-01-04T12:26:25.172Z\"\n    },\n    {\n      \"createdAt\": \"1993-09-20T11:01:19.613Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"urn:uuid:e605eedd-684a-ee81-0425-0fb0858fbe79\",\n      \"issuedAt\": \"1970-01-07T17:33:02.617Z\",\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"2023-04-20\",\n      \"updatedAt\": \"1996-05-22T20:38:20.904Z\"\n    }\n  ],\n  \"total\": 1\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "fa86a5f8-fb1f-48a5-9625-1e533636e021",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "818b3b9e-530f-4a9f-9c75-0f73e623a31c",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons/:id/registrations?credential-url=<string>&size=<integer>&offset=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(responseData[0], `persons`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(pm.response.json(), `persons`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the persons field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`persons`);\n          let personsArray = _.get(pm.response.json(), `persons`, \"\");\n          for (let persons_it = 0; persons_it < personsArray.length; persons_it++) {\n            let iterator = persons_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('persons[${persons_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"persons[${persons_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'initials' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].initials`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].initials`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].initials' has 'initials' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].initials`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].initials`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'firstName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].firstName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].firstName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].firstName' has 'firstName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].firstName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].firstName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'middleName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].middleName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].middleName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].middleName' has 'middleName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].middleName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].middleName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'lastName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].lastName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].lastName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].lastName' has 'lastName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].lastName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].lastName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthDate' has 'birthDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthPlace' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthPlace`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthPlace' has 'birthPlace' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthPlace`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].phone`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].phone`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('persons[${persons_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'postalCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].postalCode`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].postalCode' has 'postalCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].postalCode`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumber' has 'houseNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumberPostfix' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumberPostfix' has 'houseNumberPostfix' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'countryCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].countryCode`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].countryCode' has 'countryCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].countryCode`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'reference' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].reference`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].reference' has 'reference' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].reference`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('persons[${persons_it}].reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"persons[${persons_it}].reference\", \"\").length).to.be.at.most(100);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    {
                      "id": "ad68886d-91a5-41d0-b2bd-55337e037b89",
                      "name": "Create new Registration",
                      "request": {
                        "name": "Create new Registration",
                        "description": {
                          "content": "Create new Registration",
                          "type": "text/plain"
                        },
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        },
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "response": [
                        {
                          "id": "f290bc47-def8-4d22-bf65-196c8ed186cb",
                          "name": "Successful",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Created",
                          "code": 201,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Location of the created resource",
                              "key": "location",
                              "value": "{{location}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"createdAt\": \"1989-11-12T07:33:10.850Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"urn:uuid:40958ec8-6532-934e-7a14-463e85de18a9\",\n  \"issuedAt\": \"1978-03-07T00:13:31.050Z\",\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"1978-11-11\",\n  \"updatedAt\": \"2001-10-27T23:35:35.441Z\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "aee07e88-ed00-4750-a8e3-7cd8a921ca9b",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "f4423bd2-88c4-4735-801c-202a1e6aa350",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons/:id/registrations for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"Successful\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`initials`)){\n          if(pm.expect(_.get(responseData[0], `initials`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `initials`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`initials`)){\n          if(pm.expect(_.get(pm.response.json(), `initials`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `initials`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`firstName`)){\n          if(pm.expect(_.get(responseData[0], `firstName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `firstName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`firstName`)){\n          if(pm.expect(_.get(pm.response.json(), `firstName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `firstName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`middleName`)){\n          if(pm.expect(_.get(responseData[0], `middleName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `middleName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`middleName`)){\n          if(pm.expect(_.get(pm.response.json(), `middleName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `middleName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`lastName`)){\n          if(pm.expect(_.get(responseData[0], `lastName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `lastName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`lastName`)){\n          if(pm.expect(_.get(pm.response.json(), `lastName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `lastName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`birthDate`)){\n          if(pm.expect(_.get(responseData[0], `birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `birthDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`birthDate`)){\n          if(pm.expect(_.get(pm.response.json(), `birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `birthDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`birthPlace`)){\n          if(pm.expect(_.get(responseData[0], `birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `birthPlace`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`birthPlace`)){\n          if(pm.expect(_.get(pm.response.json(), `birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `birthPlace`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(responseData[0], `phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(pm.response.json(), `phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`postalCode`)){\n          if(pm.expect(_.get(responseData[0], `postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `postalCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`postalCode`)){\n          if(pm.expect(_.get(pm.response.json(), `postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `postalCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`houseNumber`)){\n          if(pm.expect(_.get(responseData[0], `houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `houseNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `houseNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`houseNumberPostfix`)){\n          if(pm.expect(_.get(responseData[0], `houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumberPostfix`)){\n          if(pm.expect(_.get(pm.response.json(), `houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`countryCode`)){\n          if(pm.expect(_.get(responseData[0], `countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `countryCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`countryCode`)){\n          if(pm.expect(_.get(pm.response.json(), `countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `countryCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(responseData[0], `reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(pm.response.json(), `reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "572fa2a5-3811-4605-b411-737c58b9a55f",
      "name": "registrations",
      "item": [
        {
          "id": "b033c548-46d5-45ec-8c30-dc1c7b8c457f",
          "name": "/registrations",
          "request": {
            "name": "/registrations",
            "description": {},
            "url": {
              "path": [
                "registrations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "size",
                  "value": "{{size}}",
                  "description": "Limit the number of results"
                },
                {
                  "disabled": false,
                  "key": "offset",
                  "value": "{{offset}}",
                  "description": "Offset results"
                },
                {
                  "disabled": false,
                  "key": "recipient-id",
                  "value": "{{recipient-id}}",
                  "description": "Filter results by Recipient ID (UUID)"
                },
                {
                  "disabled": false,
                  "key": "credential-url",
                  "value": "{{credential-url}}",
                  "description": "Filter results on specific Credential (URL)."
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "fd8963e0-27d2-415f-8c24-1fbbb8af061b",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "registrations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    },
                    {
                      "key": "recipient-id",
                      "value": "{{recipient-id}}"
                    },
                    {
                      "key": "credential-url",
                      "value": "{{credential-url}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Response record count",
                  "key": "page-size",
                  "value": "{{page-size}}"
                },
                {
                  "disabled": false,
                  "description": "Response record offset",
                  "key": "page-offset",
                  "value": "{{page-offset}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"registrations\": [\n    {\n      \"createdAt\": \"1968-11-15T16:44:00.558Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"d7dfba2f-7b30-eacf-d02b-a3156b10e32d\",\n      \"issuedAt\": \"1967-09-12T17:27:22.271Z\",\n      \"recipient\": {\n        \"id\": \"1c828c7c-902f-0f26-b7db-1b33cc58b97e\",\n        \"name\": \"'}'L--{.-}pL}'-p }}L\",\n        \"type\": \"branch\"\n      },\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1944-08-04\",\n      \"updatedAt\": \"1978-01-28T01:46:42.654Z\"\n    },\n    {\n      \"createdAt\": \"2000-03-30T17:57:35.845Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"urn:uuid:8b5650f2-66c5-6f34-6b53-38939822553a\",\n      \"issuedAt\": \"1958-08-18T08:27:24.641Z\",\n      \"recipient\": {\n        \"id\": \"urn:uuid:5cafddd1-2fb5-1a6d-b22b-63665e858457\",\n        \"name\": \"L {p{Lp} L}{.{pp'\",\n        \"type\": \"person\"\n      },\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1997-02-11\",\n      \"updatedAt\": \"1999-08-01T08:18:13.669Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "f3eef4d2-eef9-43b6-8edc-fdb75f11a75a",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "registrations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    },
                    {
                      "key": "recipient-id",
                      "value": "{{recipient-id}}"
                    },
                    {
                      "key": "credential-url",
                      "value": "{{credential-url}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "40af91ac-450d-4c44-aff1-bdb9bca76d17",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "registrations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    },
                    {
                      "key": "recipient-id",
                      "value": "{{recipient-id}}"
                    },
                    {
                      "key": "credential-url",
                      "value": "{{credential-url}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /registrations?size=<integer>&offset=<integer>&recipient-id=<uuid>&credential-url=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `registrations` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`registrations`)){\n              if(pm.expect(_.get(responseData[0], `registrations`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `registrations`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `registrations` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`registrations`)){\n              if(pm.expect(_.get(pm.response.json(), `registrations`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `registrations`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the registrations field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`registrations`);\n          let registrationsArray = _.get(pm.response.json(), `registrations`, \"\");\n          for (let registrations_it = 0; registrations_it < registrationsArray.length; registrations_it++) {\n            let iterator = registrations_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('registrations[${registrations_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'reference' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].reference`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].reference' has 'reference' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].reference`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('registrations[${registrations_it}].reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].reference\", \"\").length).to.be.at.most(100);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'startDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].startDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].startDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].startDate' has 'startDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].startDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].startDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].startDate format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].startDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'endDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].endDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].endDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].endDate' has 'endDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].endDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].endDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].endDate format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].endDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].status`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].status`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'credentialUrl' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].credentialUrl`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].credentialUrl' has 'credentialUrl' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].credentialUrl`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('registrations[${registrations_it}].credentialUrl has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].credentialUrl\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'suspendedUntil' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].suspendedUntil`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].suspendedUntil' has 'suspendedUntil' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].suspendedUntil`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].suspendedUntil format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].suspendedUntil\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'issuedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].issuedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].issuedAt' has 'issuedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].issuedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].issuedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].issuedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'recipient' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient' has 'recipient' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient.id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient.id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient.id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient.id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient.id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('registrations[${registrations_it}].recipient.id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].recipient.id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'name' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient.name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient.name`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient.name' has 'name' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient.name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient.name`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('registrations[${registrations_it}].recipient.name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].recipient.name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'type' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient.type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient.type`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient.type' has 'type' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient.type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient.type`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('registrations[${registrations_it}].recipient.type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].recipient.type\", \"\")).to.include.oneOf([\"branch\",\"person\",\"employee\"]);\n        })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "6bf512c6-8905-4b8a-a791-de10eb651d20",
          "name": "{id}",
          "item": [
            {
              "id": "0c2a9746-592b-4801-9f99-80c12b4c67aa",
              "name": "/registrations/:id",
              "request": {
                "name": "/registrations/:id",
                "description": {},
                "url": {
                  "path": [
                    "registrations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "ad57a622-c68a-45f5-940d-55e06f6c33a6",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"createdAt\": \"1970-12-17T08:17:11.120Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"urn:uuid:6d36f09a-15fd-9dd1-a5e6-230adfa525a6\",\n  \"issuedAt\": \"1998-05-24T18:10:00.424Z\",\n  \"recipient\": {\n    \"id\": \"9ca2255d-7eba-a246-8b56-575985679d1e\",\n    \"name\": \"L}L}}{L pLp}}}-.{-- .'p'.-p' .p{{L { '}'LpL{\",\n    \"type\": \"person\"\n  },\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"2016-01-01\",\n  \"updatedAt\": \"1975-05-21T17:34:34.315Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "3ac29db7-71f7-49fe-ac28-aa5e53210a03",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "020d928b-b489-40ab-8de5-e98131cfbe87",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /registrations/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `registrations` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`registrations`)){\n              if(pm.expect(_.get(responseData[0], `registrations`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `registrations`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `registrations` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`registrations`)){\n              if(pm.expect(_.get(pm.response.json(), `registrations`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `registrations`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the registrations field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`registrations`);\n          let registrationsArray = _.get(pm.response.json(), `registrations`, \"\");\n          for (let registrations_it = 0; registrations_it < registrationsArray.length; registrations_it++) {\n            let iterator = registrations_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('registrations[${registrations_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'reference' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].reference`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].reference' has 'reference' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].reference`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('registrations[${registrations_it}].reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].reference\", \"\").length).to.be.at.most(100);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'startDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].startDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].startDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].startDate' has 'startDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].startDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].startDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].startDate format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].startDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'endDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].endDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].endDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].endDate' has 'endDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].endDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].endDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].endDate format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].endDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].status`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].status`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'credentialUrl' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].credentialUrl`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].credentialUrl' has 'credentialUrl' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].credentialUrl`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('registrations[${registrations_it}].credentialUrl has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].credentialUrl\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'suspendedUntil' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].suspendedUntil`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].suspendedUntil' has 'suspendedUntil' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].suspendedUntil`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].suspendedUntil format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].suspendedUntil\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'issuedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].issuedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].issuedAt' has 'issuedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].issuedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].issuedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].issuedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'recipient' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient' has 'recipient' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient.id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient.id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient.id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient.id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient.id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('registrations[${registrations_it}].recipient.id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].recipient.id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'name' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient.name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient.name`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient.name' has 'name' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient.name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient.name`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('registrations[${registrations_it}].recipient.name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].recipient.name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'type' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient.type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient.type`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient.type' has 'type' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient.type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient.type`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('registrations[${registrations_it}].recipient.type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].recipient.type\", \"\")).to.include.oneOf([\"branch\",\"person\",\"employee\"]);\n        })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "008e6f27-b809-46be-ab4a-fb8afea6d442",
              "name": "/registrations/:id",
              "request": {
                "name": "/registrations/:id",
                "description": {},
                "url": {
                  "path": [
                    "registrations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "fd1415e5-0bb1-463c-9142-2d9f1a4e712c",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "dbef3bde-eb45-4610-bb1c-2b7ed5ffb5d1",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "ac95d9f9-9c25-4a13-9455-3bdb6262197e",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /registrations/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "262f168f-52cc-4d89-b42e-4750c4dd2172",
              "name": "/registrations/:id",
              "request": {
                "name": "/registrations/:id",
                "description": {},
                "url": {
                  "path": [
                    "registrations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": \"{{revoked}}\",\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "1cfe04a7-6e2f-494f-8886-ac624755daac",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": false,\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"createdAt\": \"2009-05-14T17:10:32.314Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"urn:uuid:66123e2a-f080-338b-c0c9-d85b56adfa27\",\n  \"issuedAt\": \"1992-08-15T03:37:04.840Z\",\n  \"recipient\": {\n    \"id\": \"urn:uuid:2abf709c-f6e8-3fd9-1138-ef467cb55a22\",\n    \"name\": \"..Lp .}\",\n    \"type\": \"employee\"\n  },\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"<date>\",\n  \"updatedAt\": \"1983-08-04T11:28:52.087Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "d6c61d59-ca06-4aa4-874f-d7268487e375",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": false,\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "abd6b71a-fd6b-4413-862c-9372aa62b2c1",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": false,\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /registrations/:id for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(responseData[0], `reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(pm.response.json(), `reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `startDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`startDate`)){\n          if(pm.expect(_.get(responseData[0], `startDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `startDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `startDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`startDate`)){\n          if(pm.expect(_.get(pm.response.json(), `startDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `startDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('startDate format to be date',function(){\n                pm.expect(_.get(responseData, \"startDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `endDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`endDate`)){\n          if(pm.expect(_.get(responseData[0], `endDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `endDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `endDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`endDate`)){\n          if(pm.expect(_.get(pm.response.json(), `endDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `endDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('endDate format to be date',function(){\n                pm.expect(_.get(responseData, \"endDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`status`)){\n          if(pm.expect(_.get(responseData[0], `status`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `status`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n          if(pm.expect(_.get(pm.response.json(), `status`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `credentialUrl` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`credentialUrl`)){\n          if(pm.expect(_.get(responseData[0], `credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `credentialUrl`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `credentialUrl` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`credentialUrl`)){\n          if(pm.expect(_.get(pm.response.json(), `credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `credentialUrl`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('credentialUrl has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"credentialUrl\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `suspendedUntil` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`suspendedUntil`)){\n          if(pm.expect(_.get(responseData[0], `suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `suspendedUntil`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `suspendedUntil` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`suspendedUntil`)){\n          if(pm.expect(_.get(pm.response.json(), `suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `suspendedUntil`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('suspendedUntil format to be date',function(){\n                pm.expect(_.get(responseData, \"suspendedUntil\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `issuedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`issuedAt`)){\n          if(pm.expect(_.get(responseData[0], `issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `issuedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `issuedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`issuedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `issuedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('issuedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"issuedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `recipient` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`recipient`)){\n          if(pm.expect(_.get(responseData[0], `recipient`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `recipient`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `recipient` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`recipient`)){\n          if(pm.expect(_.get(pm.response.json(), `recipient`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `recipient`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `recipient.id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`recipient.id`)){\n          if(pm.expect(_.get(responseData[0], `recipient.id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `recipient.id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `recipient.id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`recipient.id`)){\n          if(pm.expect(_.get(pm.response.json(), `recipient.id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `recipient.id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('recipient.id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"recipient.id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `recipient.name` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`recipient.name`)){\n          if(pm.expect(_.get(responseData[0], `recipient.name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `recipient.name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `recipient.name` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`recipient.name`)){\n          if(pm.expect(_.get(pm.response.json(), `recipient.name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `recipient.name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('recipient.name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"recipient.name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `recipient.type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`recipient.type`)){\n          if(pm.expect(_.get(responseData[0], `recipient.type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `recipient.type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `recipient.type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`recipient.type`)){\n          if(pm.expect(_.get(pm.response.json(), `recipient.type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `recipient.type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('recipient.type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"recipient.type\", \"\")).to.include.oneOf([\"branch\",\"person\",\"employee\"]);\n        })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "3513db0e-11ac-47bc-b6d4-010ec93e13cf",
      "name": "/errors",
      "request": {
        "name": "/errors",
        "description": {},
        "url": {
          "path": [
            "errors"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "id": "e502b532-902a-449e-b20e-47bbf4d7c7da",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "errors"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"description\": \"Descriptive Error Message\",\n    \"error\": \"error/code\"\n  },\n  {\n    \"description\": \"Descriptive Error Message\",\n    \"error\": \"error/code\"\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /errors for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "1edac304-7c32-42d9-8a27-881c7263fc38",
      "name": "/kvk/zoeken",
      "request": {
        "name": "/kvk/zoeken",
        "description": {},
        "url": {
          "path": [
            "kvk",
            "zoeken"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [
            {
              "disabled": false,
              "key": "kvkNummer",
              "value": "{{kvkNummer}}"
            },
            {
              "disabled": false,
              "key": "vestigingsnummer",
              "value": "{{vestigingsnummer}}",
              "description": "Filter results based on reference"
            },
            {
              "disabled": false,
              "key": "handelsnaam",
              "value": "{{handelsnaam}}",
              "description": "Filter results based on reference"
            }
          ],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "key",
              "value": "Token"
            },
            {
              "key": "value",
              "value": "{{apiKey}}"
            },
            {
              "key": "in",
              "value": "header"
            }
          ]
        }
      },
      "response": [
        {
          "id": "80bd8d40-b235-41b1-9795-4b1b9a5e3027",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "kvk",
                "zoeken"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "kvkNummer",
                  "value": "{{kvkNummer}}"
                },
                {
                  "key": "vestigingsnummer",
                  "value": "{{vestigingsnummer}}"
                },
                {
                  "key": "handelsnaam",
                  "value": "{{handelsnaam}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "\"See kvk OAS specs\"",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /kvk/zoeken?kvkNummer=<string>&vestigingsnummer=<string>&handelsnaam=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "https://virtserver.swaggerhub.com/credentialregister/wallet/1.0.0",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "9e39f1bd-e52d-46ab-b3e8-158895de8b31",
    "name": "Wallet API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "The Wallet API of the Credential Register.",
      "type": "text/plain"
    }
  }
}