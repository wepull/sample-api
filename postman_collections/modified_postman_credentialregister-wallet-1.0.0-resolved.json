{
  "item": [
    {
      "id": "96e208b4-c420-41b3-bd7c-5f79704ebeb3",
      "name": "accounts",
      "item": [
        {
          "id": "4466eb70-45d7-431e-883e-9514b4195a8f",
          "name": "Create new Account",
          "request": {
            "name": "Create new Account",
            "description": {
              "content": "You will receive an email with OTP",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "accounts"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "description": "Commit Hash of Client Sowftware",
                "key": "commit-hash",
                "value": "{{commit-hash}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "2d60a28a-8d30-4d7e-a086-cbc1ba882ded",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "Commit Hash of Client Sowftware",
                    "key": "commit-hash",
                    "value": "{{commit-hash}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Commit Hash",
                  "key": "commit-hash",
                  "value": "{{commit-hash}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "bbe02e53-9b41-4c76-bb92-e8149acafec7",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "Commit Hash of Client Sowftware",
                    "key": "commit-hash",
                    "value": "{{commit-hash}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /accounts for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "a44edbb1-9c03-40b3-ad3f-9364a55b7231",
          "name": "Login to existing Account",
          "request": {
            "name": "Login to existing Account",
            "description": {
              "content": "You will receive an email with OTP",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "accounts"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "a42c990a-fab5-4657-8712-73b09b32d099",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "764c02e4-a795-44e5-a109-865885fe4152",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /accounts for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "078df2f9-f90c-4b02-bae4-680efa8effa8",
      "name": "Login using OTP: creates a session",
      "request": {
        "name": "Login using OTP: creates a session",
        "description": {
          "content": "Returned is a token, which is combined the session-uuid and the account-uuid",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "login"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"client\": \"{{client}}\",\n    \"email\": \"{{email}}\",\n    \"otp\": \"{{otp}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "325002dc-4367-4266-bc13-5fb606505f89",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"client\": \"{{client}}\",\n    \"email\": \"{{email}}\",\n    \"otp\": \"{{otp}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Created",
          "code": 201,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"token\": \"0a747d90-4cdc-4b08-ca5c-f62a4907a121:c72faa05-590e-b8ee-d3db-ba4d3fb57364\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "52444063-b80d-4e4e-a33f-e6749532b25b",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"client\": \"{{client}}\",\n    \"email\": \"{{email}}\",\n    \"otp\": \"{{otp}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /login for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `token` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`token`)){\n          if(pm.expect(_.get(responseData[0], `token`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `token`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `token` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`token`)){\n          if(pm.expect(_.get(pm.response.json(), `token`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `token`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('token has same pattern as `^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`',function(){ \n          pm.expect(_.get(responseData, \"token\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\n        })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "e06e29d6-cd30-4711-be2b-b9634e37c35d",
      "name": "Logout: delete the session",
      "request": {
        "name": "Logout: delete the session",
        "description": {},
        "url": {
          "path": [
            "logout"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "key",
              "value": "Token"
            },
            {
              "key": "value",
              "value": "{{apiKey}}"
            },
            {
              "key": "in",
              "value": "header"
            }
          ]
        }
      },
      "response": [
        {
          "id": "2050fec3-100f-4434-8dd7-a281f03509b9",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "logout"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "3f86e402-b566-4bb7-a9e2-dbb8d5049dc1",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "logout"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /logout for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "f8973e9f-611f-4563-ac4c-c80a2f171f75",
      "name": "me",
      "item": [
        {
          "id": "aa1637c7-1ba1-4f19-b97f-321299435c49",
          "name": "my account details",
          "request": {
            "name": "my account details",
            "description": {},
            "url": {
              "path": [
                "me"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "b6486f70-7c4c-4d23-b5e2-a2005e2c3513",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"1948-01-26T18:11:04.720Z\",\n  \"did\": \"officia nostrud anim\",\n  \"email\": \"<email>\",\n  \"id\": \"urn:uuid:d4d7acb7-f0ab-c01e-012b-bc64da8e08d1\",\n  \"image\": \"https://cdn.credentialregiater.com/2571c54e-2cde-4434-83f2-c329f74adc27.png\",\n  \"name\": \"' L}'{Lp-L'.-p''p.Lp- 'pL  p.p}-.--L{\",\n  \"settings\": {\n    \"dolore_3\": -66283427.95895126,\n    \"ad_a0\": -46923739\n  },\n  \"updatedAt\": \"1962-05-02T05:12:32.190Z\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "0a61fd75-898a-4d72-be39-340d84c6fc57",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "1d6b151c-976c-4f2d-906a-cf78878ddbba",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /me for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `did` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`did`)){\n          if(pm.expect(_.get(responseData[0], `did`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `did`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `did` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`did`)){\n          if(pm.expect(_.get(pm.response.json(), `did`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `did`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(responseData[0], `name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(pm.response.json(), `name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `image` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`image`)){\n          if(pm.expect(_.get(responseData[0], `image`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `image`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `image` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`image`)){\n          if(pm.expect(_.get(pm.response.json(), `image`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `image`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('image has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"image\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `settings` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`settings`)){\n          if(pm.expect(_.get(responseData[0], `settings`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `settings`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `settings` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`settings`)){\n          if(pm.expect(_.get(pm.response.json(), `settings`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `settings`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "d7006136-d651-4283-a9da-20047f8f0910",
          "name": "Change my settings or account name",
          "request": {
            "name": "Change my settings or account name",
            "description": {},
            "url": {
              "path": [
                "me"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"ullamcof4\": \"{{ullamcof4}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "9fea0ea5-c9c2-4ce9-99f6-8ee17f9e120d",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"Excepteurb7c\": \"{{Excepteurb7c}}\",\n        \"irure35c\": \"{{irure35c}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"1948-01-26T18:11:04.720Z\",\n  \"did\": \"officia nostrud anim\",\n  \"email\": \"<email>\",\n  \"id\": \"urn:uuid:d4d7acb7-f0ab-c01e-012b-bc64da8e08d1\",\n  \"image\": \"https://cdn.credentialregiater.com/2571c54e-2cde-4434-83f2-c329f74adc27.png\",\n  \"name\": \"' L}'{Lp-L'.-p''p.Lp- 'pL  p.p}-.--L{\",\n  \"settings\": {\n    \"dolore_3\": -66283427.95895126,\n    \"ad_a0\": -46923739\n  },\n  \"updatedAt\": \"1962-05-02T05:12:32.190Z\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "af577cbc-c1c1-4b1d-8089-9fb5b4bd7572",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"Excepteurb7c\": \"{{Excepteurb7c}}\",\n        \"irure35c\": \"{{irure35c}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "8c24005b-fe56-4770-9ad6-39c850aebbe6",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"Excepteurb7c\": \"{{Excepteurb7c}}\",\n        \"irure35c\": \"{{irure35c}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /me for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `did` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`did`)){\n          if(pm.expect(_.get(responseData[0], `did`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `did`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `did` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`did`)){\n          if(pm.expect(_.get(pm.response.json(), `did`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `did`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(responseData[0], `name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(pm.response.json(), `name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `image` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`image`)){\n          if(pm.expect(_.get(responseData[0], `image`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `image`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `image` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`image`)){\n          if(pm.expect(_.get(pm.response.json(), `image`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `image`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('image has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"image\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `settings` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`settings`)){\n          if(pm.expect(_.get(responseData[0], `settings`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `settings`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `settings` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`settings`)){\n          if(pm.expect(_.get(pm.response.json(), `settings`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `settings`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "c183cddc-fec2-4ccb-984d-53ab1a2c5ddc",
      "name": "credentials",
      "item": [
        {
          "id": "ea6532f2-9e41-4863-8773-02d6466011cc",
          "name": "All credentials in my Wallet",
          "request": {
            "name": "All credentials in my Wallet",
            "description": {},
            "url": {
              "path": [
                "credentials"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "size",
                  "value": "{{size}}",
                  "description": "Limit the number of results"
                },
                {
                  "disabled": false,
                  "key": "offset",
                  "value": "{{offset}}",
                  "description": "Offset results"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "06d36f71-4ccb-4d68-b65e-5a80986cf97f",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "credentials"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Response record count",
                  "key": "page-size",
                  "value": "{{page-size}}"
                },
                {
                  "disabled": false,
                  "description": "Response record offset",
                  "key": "page-offset",
                  "value": "{{page-offset}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"credentials\": [\n    {\n      \"createdAt\": \"1969-03-10T07:38:04.955Z\",\n      \"credential\": \"adipisicing esse\",\n      \"format\": \"jwt_vc_json\",\n      \"id\": \"urn:uuid:de4ca89b-5d2a-d897-1925-c103b68d5e8f\",\n      \"status\": \"pending\",\n      \"statusUpdatedAt\": \"1968-03-12T06:04:40.757Z\"\n    },\n    {\n      \"createdAt\": \"1949-07-06T01:13:52.319Z\",\n      \"credential\": \"nulla in esse\",\n      \"format\": \"ldp_vc\",\n      \"id\": \"572000d2-b7bb-a011-349f-813d769cdba1\",\n      \"status\": \"pending\",\n      \"statusUpdatedAt\": \"1947-03-28T19:30:29.242Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "4d50138d-7f40-4248-8f01-3b7207a2576b",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "credentials"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "ea2f6147-0646-4369-b931-b854c3ce1caf",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "credentials"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /credentials?size=<integer>&offset=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `credentials` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`credentials`)){\n              if(pm.expect(_.get(responseData[0], `credentials`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `credentials`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `credentials` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`credentials`)){\n              if(pm.expect(_.get(pm.response.json(), `credentials`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `credentials`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the credentials field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`credentials`);\n          let credentialsArray = _.get(pm.response.json(), `credentials`, \"\");\n          for (let credentials_it = 0; credentials_it < credentialsArray.length; credentials_it++) {\n            let iterator = credentials_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('credentials[${credentials_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'format' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].format`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].format`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].format' has 'format' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].format`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].format`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('credentials[${credentials_it}].format to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials[${credentials_it}].format\", \"\")).to.include.oneOf([\"jwt_vc_json\",\"jwt_vc_json-ld\",\"ldp_vc\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'credential' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].credential`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].credential`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].credential' has 'credential' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].credential`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].credential`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].status`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].status`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('credentials[${credentials_it}].status to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials[${credentials_it}].status\", \"\")).to.include.oneOf([\"active\",\"suspended\",\"revoked\",\"expired\",\"pending\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'statusUpdatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].statusUpdatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].statusUpdatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].statusUpdatedAt' has 'statusUpdatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].statusUpdatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].statusUpdatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('credentials[${credentials_it}].statusUpdatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].statusUpdatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('credentials[${credentials_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "19cb35f2-98a6-4a83-b8ad-092a75c7713e",
          "name": "{id}",
          "item": [
            {
              "id": "5119f706-76a3-4ac8-b1d0-5b13aebf12fb",
              "name": "One credential from my Wallet",
              "request": {
                "name": "One credential from my Wallet",
                "description": {},
                "url": {
                  "path": [
                    "credentials",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "6dadb748-adf3-4d48-976d-ebccb2c11f59",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"createdAt\": \"1993-04-12T03:53:26.354Z\",\n  \"credential\": \"velit deserunt ut consect\",\n  \"format\": \"ldp_vc\",\n  \"id\": \"urn:uuid:3fdb79f3-c42b-0f09-3d41-fc6f92dc73c9\",\n  \"status\": \"active\",\n  \"statusUpdatedAt\": \"2023-04-16T07:11:09.259Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "c6144815-5221-4864-958e-e087da497099",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "55d92e3d-abd9-4474-937c-a738c46f74b4",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /credentials/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `credentials` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`credentials`)){\n              if(pm.expect(_.get(responseData[0], `credentials`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `credentials`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `credentials` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`credentials`)){\n              if(pm.expect(_.get(pm.response.json(), `credentials`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `credentials`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the credentials field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`credentials`);\n          let credentialsArray = _.get(pm.response.json(), `credentials`, \"\");\n          for (let credentials_it = 0; credentials_it < credentialsArray.length; credentials_it++) {\n            let iterator = credentials_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('credentials[${credentials_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'format' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].format`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].format`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].format' has 'format' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].format`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].format`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('credentials[${credentials_it}].format to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials[${credentials_it}].format\", \"\")).to.include.oneOf([\"jwt_vc_json\",\"jwt_vc_json-ld\",\"ldp_vc\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'credential' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].credential`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].credential`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].credential' has 'credential' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].credential`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].credential`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].status`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].status`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('credentials[${credentials_it}].status to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials[${credentials_it}].status\", \"\")).to.include.oneOf([\"active\",\"suspended\",\"revoked\",\"expired\",\"pending\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'statusUpdatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].statusUpdatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].statusUpdatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].statusUpdatedAt' has 'statusUpdatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].statusUpdatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].statusUpdatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('credentials[${credentials_it}].statusUpdatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].statusUpdatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('credentials[${credentials_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "80d10088-4857-4965-bf60-73cce4354b22",
              "name": "Delete one credential from my Wallet",
              "request": {
                "name": "Delete one credential from my Wallet",
                "description": {},
                "url": {
                  "path": [
                    "credentials",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "be47d17e-8f72-458a-9b0b-a2bd55e8bbf2",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "cda12129-5c72-484b-90df-510a3807499f",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "55e40974-ab86-4222-8f4e-0328bcc96704",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /credentials/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "3f10c1ac-fbc1-4106-97d0-077a2666a822",
      "name": "Retrieve accounts with granted access permissions",
      "request": {
        "name": "Retrieve accounts with granted access permissions",
        "description": {},
        "url": {
          "path": [
            "grants"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "key",
              "value": "Token"
            },
            {
              "key": "value",
              "value": "{{apiKey}}"
            },
            {
              "key": "in",
              "value": "header"
            }
          ]
        }
      },
      "response": [
        {
          "id": "46e1e105-ecbf-4b81-bca9-55cb1da8a9e2",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "grants"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"grants\": [\n    {\n      \"account\": {\n        \"email\": \"<email>\",\n        \"id\": \"urn:uuid:e8966cb5-5540-ba20-e531-fd3a2a5e6fdf\",\n        \"image\": \"data:image/jpeg;base64,<clipped>\",\n        \"name\": \"-.{Lp-.p..L-p-.}.'p}{}'Lp -p{  --}{-.Lp'L-}{--{L{L .}} \"\n      },\n      \"createdAt\": \"1967-01-06T09:51:52.751Z\",\n      \"id\": \"urn:uuid:11b91adc-cff6-7108-758e-e354aa946835\",\n      \"token\": \"76bbfa68-d267-8909-7e05-aa6ff8ae2ea5:69ec9e27-7f29-53a1-083e-0840747932a0\",\n      \"updatedAt\": \"1958-06-14T01:30:04.308Z\"\n    },\n    {\n      \"account\": {\n        \"email\": \"<email>\",\n        \"id\": \"urn:uuid:fafa2c74-0fca-4786-b916-ef30bc112fef\",\n        \"image\": \"data:image/jpeg;base64,<clipped>\",\n        \"name\": \"{'{-p}''.p .L. .'-pLL'}.{}.L.'L}'-}L-{{ Lp...L{'{{-' pL.'-}' {}'.} .L} p L}\"\n      },\n      \"createdAt\": \"1994-03-15T06:36:22.773Z\",\n      \"id\": \"urn:uuid:53901e5f-77c9-88e4-29cd-a5c308dd80a5\",\n      \"token\": \"53bc5a92-9835-dba2-7567-a56b86c1a42f:abcb987b-2ed1-9f2d-eba4-b3ee8caa6b02\",\n      \"updatedAt\": \"1974-12-29T02:22:32.533Z\"\n    }\n  ],\n  \"total\": 1\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "5c9fcdf5-cd23-405e-a170-49ee90ed81a1",
          "name": "Authentication Required",
          "originalRequest": {
            "url": {
              "path": [
                "grants"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /grants for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `grants` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`grants`)){\n              if(pm.expect(_.get(responseData[0], `grants`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `grants`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `grants` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`grants`)){\n              if(pm.expect(_.get(pm.response.json(), `grants`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `grants`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the grants field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`grants`);\n          let grantsArray = _.get(pm.response.json(), `grants`, \"\");\n          for (let grants_it = 0; grants_it < grantsArray.length; grants_it++) {\n            let iterator = grants_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('grants[${grants_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"grants[${grants_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'token' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].token`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].token`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].token' has 'token' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].token`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].token`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('grants[${grants_it}].token has same pattern as `^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`',function(){ \n          pm.expect(_.get(responseData, \"grants[${grants_it}].token\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('grants[${grants_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"grants[${grants_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('grants[${grants_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"grants[${grants_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'account' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].account`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].account`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].account' has 'account' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].account`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].account`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].account.id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].account.id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].account.id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].account.id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].account.id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('grants[${grants_it}].account.id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"grants[${grants_it}].account.id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'name' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].account.name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].account.name`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].account.name' has 'name' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].account.name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].account.name`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('grants[${grants_it}].account.name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"grants[${grants_it}].account.name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'image' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].account.image`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].account.image`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].account.image' has 'image' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].account.image`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].account.image`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].account.email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].account.email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].account.email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].account.email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].account.email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('grants[${grants_it}].account.email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"grants[${grants_it}].account.email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('grants[${grants_it}].account.email format to be email',function(){ \n                pm.expect(_.get(responseData, \"grants[${grants_it}].account.email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "47c3c599-6066-46a7-b0b9-3c52e7f29b69",
      "name": "authorizations",
      "item": [
        {
          "id": "b562e14a-e5d2-4dc4-95a4-10f6f4b3d2ef",
          "name": "List accounts who have access to my account",
          "request": {
            "name": "List accounts who have access to my account",
            "description": {},
            "url": {
              "path": [
                "authorizations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "1af75d7d-2de1-427d-92cf-849514e70f2e",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"authorizations\": [\n    {\n      \"createdAt\": \"2016-07-03T05:41:02.550Z\",\n      \"email\": \"<email>\",\n      \"id\": \"73ff723b-15c9-909d-c617-57c52a4fd8bb\",\n      \"name\": \"L'{ {p{ pL.{L{.pp} }.p.L'p.'.L}L..{'..'L.{L{- }.pL--'L'}LL{L'}p-'-L\",\n      \"updatedAt\": \"1963-07-03T20:36:05.756Z\"\n    },\n    {\n      \"createdAt\": \"1992-04-02T16:41:16.720Z\",\n      \"email\": \"<email>\",\n      \"id\": \"urn:uuid:19b98997-eb85-7c05-7675-440b28133746\",\n      \"name\": \" 'pL ..L-{'}Lp- {-p.\",\n      \"updatedAt\": \"2022-01-18T14:14:46.568Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "2f614d9c-47d3-421b-a0c5-bb3129ed537b",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "83d4ca6d-b5b9-4a7b-bbf0-5bb454cd1a51",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /authorizations for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `authorizations` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`authorizations`)){\n              if(pm.expect(_.get(responseData[0], `authorizations`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `authorizations`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `authorizations` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`authorizations`)){\n              if(pm.expect(_.get(pm.response.json(), `authorizations`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `authorizations`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the authorizations field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`authorizations`);\n          let authorizationsArray = _.get(pm.response.json(), `authorizations`, \"\");\n          for (let authorizations_it = 0; authorizations_it < authorizationsArray.length; authorizations_it++) {\n            let iterator = authorizations_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'authorizationsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `authorizations[${authorizations_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`authorizations[${authorizations_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'authorizations[${authorizations_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `authorizations[${authorizations_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`authorizations[${authorizations_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('authorizations[${authorizations_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"authorizations[${authorizations_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'authorizationsArray' has 'name' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `authorizations[${authorizations_it}].name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`authorizations[${authorizations_it}].name`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'authorizations[${authorizations_it}].name' has 'name' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `authorizations[${authorizations_it}].name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`authorizations[${authorizations_it}].name`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('authorizations[${authorizations_it}].name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"authorizations[${authorizations_it}].name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'authorizationsArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `authorizations[${authorizations_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`authorizations[${authorizations_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'authorizations[${authorizations_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `authorizations[${authorizations_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`authorizations[${authorizations_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('authorizations[${authorizations_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"authorizations[${authorizations_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('authorizations[${authorizations_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"authorizations[${authorizations_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'authorizationsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `authorizations[${authorizations_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`authorizations[${authorizations_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'authorizations[${authorizations_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `authorizations[${authorizations_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`authorizations[${authorizations_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('authorizations[${authorizations_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"authorizations[${authorizations_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'authorizationsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `authorizations[${authorizations_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`authorizations[${authorizations_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'authorizations[${authorizations_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `authorizations[${authorizations_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`authorizations[${authorizations_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('authorizations[${authorizations_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"authorizations[${authorizations_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "41f686b0-3574-4d27-b8c7-6027da7ab61a",
          "name": "Authorize another existing Account to access my Account",
          "request": {
            "name": "Authorize another existing Account to access my Account",
            "description": {},
            "url": {
              "path": [
                "authorizations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "2416a42e-fe9b-4eb2-bc31-706dbb2efeec",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Location of the created resource",
                  "key": "location",
                  "value": "{{location}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"2012-10-12T09:29:00.976Z\",\n  \"email\": \"<email>\",\n  \"id\": \"883093d8-df79-4366-4936-9136a562e90a\",\n  \"name\": \"L-..-.''pL{}'{L'L}-L''L' -.L ' p LL- }{'.p'{p{}'{ '\",\n  \"updatedAt\": \"2006-03-14T14:10:44.929Z\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "1d5b06d8-e6d3-4872-af11-9f1d9bcaae2b",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "c9eefa69-4d3c-4a69-ac77-39098539054b",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /authorizations for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(responseData[0], `name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(pm.response.json(), `name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "96f767be-ae0b-4714-a63f-64dc63fe1e14",
          "name": "Remove Authorized Account",
          "request": {
            "name": "Remove Authorized Account",
            "description": {},
            "url": {
              "path": [
                "authorizations",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) UUID"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "eeee40bf-54d6-4919-8755-df7bfef859ad",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "196cb539-5791-4572-8f82-9322b01e6807",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "79544755-b535-476e-a2ae-086d1f1f0cbd",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /authorizations/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "169e9c59-763f-4d0b-8041-a43f71f28a9a",
      "name": "apikeys",
      "item": [
        {
          "id": "444462a0-6521-4f49-94e1-10efda0bad66",
          "name": "List API Keys you have created (session.type = 4)",
          "request": {
            "name": "List API Keys you have created (session.type = 4)",
            "description": {
              "content": "API keys to access your account via the API. API Keys are a session record with session.type equal to 4.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "apikeys"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "a59626f4-fd4c-4cc4-a98f-124ef4b458cd",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"apikeys\": [\n    {\n      \"createdAt\": \"1994-11-23T12:59:46.857Z\",\n      \"id\": \"dd926910-b1f2-568e-e7f2-81ceefe99bc5\"\n    },\n    {\n      \"createdAt\": \"1979-05-10T15:14:00.456Z\",\n      \"id\": \"6076d82b-1e12-8e67-7f5d-c953693b0539\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "78c2d806-899e-4681-a5a9-210954ff0310",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "571d2c38-4f1b-4564-947d-47dc90665e3b",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /apikeys for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `apikeys` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`apikeys`)){\n              if(pm.expect(_.get(responseData[0], `apikeys`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `apikeys`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `apikeys` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`apikeys`)){\n              if(pm.expect(_.get(pm.response.json(), `apikeys`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `apikeys`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the apikeys field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`apikeys`);\n          let apikeysArray = _.get(pm.response.json(), `apikeys`, \"\");\n          for (let apikeys_it = 0; apikeys_it < apikeysArray.length; apikeys_it++) {\n            let iterator = apikeys_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'apikeysArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `apikeys[${apikeys_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`apikeys[${apikeys_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'apikeys[${apikeys_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `apikeys[${apikeys_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`apikeys[${apikeys_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('apikeys[${apikeys_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"apikeys[${apikeys_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'apikeysArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `apikeys[${apikeys_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`apikeys[${apikeys_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'apikeys[${apikeys_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `apikeys[${apikeys_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`apikeys[${apikeys_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('apikeys[${apikeys_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"apikeys[${apikeys_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "95b8c2a7-3171-43a2-808c-3bd6f80bdd58",
          "name": "Create API Key (Create Session with type = 4)",
          "request": {
            "name": "Create API Key (Create Session with type = 4)",
            "description": {},
            "url": {
              "path": [
                "apikeys"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "7f77a031-fb6c-427e-8db8-fc5ead4554e9",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Location of the created resource",
                  "key": "location",
                  "value": "{{location}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"1972-12-10T10:44:11.252Z\",\n  \"id\": \"a348feb6-0147-7fcb-ccd5-9fc69cee6632\",\n  \"token\": \"9f4c04ef-5c03-d4c8-49a4-6a87a11bb8f1:e9b063e1-fcee-2049-3378-fd7666943a54\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "d5338642-356d-4d60-a411-b817655fc57c",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "297977bd-c816-4ad7-bd2c-0fce79389e7a",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /apikeys for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `token` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`token`)){\n          if(pm.expect(_.get(responseData[0], `token`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `token`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `token` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`token`)){\n          if(pm.expect(_.get(pm.response.json(), `token`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `token`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('token has same pattern as `^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`',function(){ \n          pm.expect(_.get(responseData, \"token\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "cc3ec646-9a5d-4d38-a2b2-1430dd8c63af",
          "name": "/apikeys/:id",
          "request": {
            "name": "/apikeys/:id",
            "description": {},
            "url": {
              "path": [
                "apikeys",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) UUID"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "579fccc8-6ecb-4962-aa0f-67c6673aff69",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "50a4249e-997a-4163-9679-fee2746b429c",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "41c19131-21d9-4458-8575-7e0b6d9a3bee",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /apikeys/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "4d3a2e84-8d8c-45ce-850a-c22e6eb4d920",
      "name": "recipients",
      "item": [
        {
          "id": "19b46afb-547d-49a7-856d-0b6b4ac02fc1",
          "name": "branches",
          "item": [
            {
              "id": "ac5d022d-869f-4023-a466-f2721ee4653d",
              "name": "/recipients/branches",
              "request": {
                "name": "/recipients/branches",
                "description": {},
                "url": {
                  "path": [
                    "recipients",
                    "branches"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "key": "coc-number",
                      "value": "{{coc-number}}",
                      "description": "Filter the results on the Chamber of Commerce number (Kamer van Koophandel nummer). This could return multiple results, as there could be multiple Branches."
                    },
                    {
                      "disabled": false,
                      "key": "coc-branch-number",
                      "value": "{{coc-branch-number}}",
                      "description": "Filter the results on the Chamber of Commerce Branch number (Kamer van Koophandel vestigingsnummer). This should only return a single result."
                    },
                    {
                      "disabled": false,
                      "key": "trade-name",
                      "value": "{{trade-name}}",
                      "description": "Filter the results on the Tradename of the organization."
                    },
                    {
                      "disabled": false,
                      "key": "size",
                      "value": "{{size}}",
                      "description": "Limit the number of results"
                    },
                    {
                      "disabled": false,
                      "key": "offset",
                      "value": "{{offset}}",
                      "description": "Offset results"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "671343c1-c126-469a-b13b-1f4cfa23bed5",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "coc-number",
                          "value": "{{coc-number}}"
                        },
                        {
                          "key": "coc-branch-number",
                          "value": "{{coc-branch-number}}"
                        },
                        {
                          "key": "trade-name",
                          "value": "{{trade-name}}"
                        },
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record count",
                      "key": "page-size",
                      "value": "{{page-size}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record offset",
                      "key": "page-offset",
                      "value": "{{page-offset}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"branches\": [\n    {\n      \"cocBranchNumber\": \"029013332373\",\n      \"cocNumber\": \"49061366\",\n      \"createdAt\": \"1978-03-12T02:29:56.485Z\",\n      \"deregistrationDate\": \"1970-05-16\",\n      \"eoriNumber\": \"NL937573471\",\n      \"id\": \"462d8a0c-931e-5cac-cd57-3356828c3549\",\n      \"tradeName\": \"ipsum proident\",\n      \"tradeNames\": [\n        \"comm\",\n        \"velit reprehenderit Excepteur\"\n      ],\n      \"updatedAt\": \"1972-06-06T15:54:17.547Z\",\n      \"email\": \"0QHJBTQ.?Fu{R?d8z.ihiuQ=Bb%K.ZA.BWr6*Iov'j.+J'@[12.92.7.5]\",\n      \"phone\": \"reprehenderit adipisicing aute\"\n    },\n    {\n      \"cocBranchNumber\": \"199761366153\",\n      \"cocNumber\": \"84348161\",\n      \"createdAt\": \"1992-12-20T10:28:28.787Z\",\n      \"deregistrationDate\": \"1987-02-11\",\n      \"eoriNumber\": \"NL834561710\",\n      \"id\": \"urn:uuid:3a6af21f-bbbe-3aac-4779-a4ae787c42c7\",\n      \"tradeName\": \"sint in do aliquip\",\n      \"tradeNames\": [\n        \"ad ipsum\",\n        \"aute officia\"\n      ],\n      \"updatedAt\": \"1975-06-02T17:29:26.504Z\",\n      \"email\": \"\\\"YOB.;\\\"@[32.5.579.92]\",\n      \"phone\": \"deserunt cillum Excepteur labore\"\n    }\n  ],\n  \"total\": 1\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "cd35de83-ebb5-4468-8e41-3249252716d0",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "coc-number",
                          "value": "{{coc-number}}"
                        },
                        {
                          "key": "coc-branch-number",
                          "value": "{{coc-branch-number}}"
                        },
                        {
                          "key": "trade-name",
                          "value": "{{trade-name}}"
                        },
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "3d88916b-a9a1-4330-a5c6-3eac39e55cc0",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "coc-number",
                          "value": "{{coc-number}}"
                        },
                        {
                          "key": "coc-branch-number",
                          "value": "{{coc-branch-number}}"
                        },
                        {
                          "key": "trade-name",
                          "value": "{{trade-name}}"
                        },
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches?coc-number=<string>&coc-branch-number=<string>&trade-name=<string>&size=<integer>&offset=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(responseData[0], `branches`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(pm.response.json(), `branches`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the branches field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`branches`);\n          let branchesArray = _.get(pm.response.json(), `branches`, \"\");\n          for (let branches_it = 0; branches_it < branchesArray.length; branches_it++) {\n            let iterator = branches_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('branches[${branches_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"branches[${branches_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('branches[${branches_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].phone`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].phone`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocNumber' has 'cocNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocBranchNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocBranchNumber' has 'cocBranchNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocBranchNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'tradeName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].tradeName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].tradeName' has 'tradeName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].tradeName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'eoriNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].eoriNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].eoriNumber' has 'eoriNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].eoriNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'deregistrationDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].deregistrationDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].deregistrationDate' has 'deregistrationDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].deregistrationDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "0338561a-2aee-4531-9c99-04d0411603a4",
              "name": "Add new Branch. The branch details are checked with the KvK API. If details are incorrect, an error is returned.<br>Required: cocNr  (single br) || (cocNr && city) || cocBranchNr",
              "request": {
                "name": "Add new Branch. The branch details are checked with the KvK API. If details are incorrect, an error is returned.<br>Required: cocNr  (single br) || (cocNr && city) || cocBranchNr",
                "description": {
                  "content": "Add new Branch. The branch details are checked with the KvK API. If details are incorrect, an error is returned.<br>Required: cocNr  (single br) || (cocNr && city) || cocBranchNr",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "recipients",
                    "branches"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "29f39893-3534-4aae-85eb-a6c2ecec2445",
                  "name": "successful operation, existing branch returned",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Location of the created resource",
                      "key": "location",
                      "value": "{{location}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"1994-07-27T08:23:24.332Z\",\n  \"deregistrationDate\": \"1947-07-19\",\n  \"eoriNumber\": \"NL771403270\",\n  \"id\": \"urn:uuid:b7c2fb2c-057e-e87a-309c-8e4bf0f6fe3e\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"nostrud qui\",\n    \"in quis Duis nostrud\"\n  ],\n  \"updatedAt\": \"2012-09-23T10:12:14.303Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "28d60f5a-2b52-4b2d-ad54-f0bb1470e9a6",
                  "name": "successful operation, branch created",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Location of the created resource",
                      "key": "location",
                      "value": "{{location}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"1994-07-27T08:23:24.332Z\",\n  \"deregistrationDate\": \"1947-07-19\",\n  \"eoriNumber\": \"NL771403270\",\n  \"id\": \"urn:uuid:b7c2fb2c-057e-e87a-309c-8e4bf0f6fe3e\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"nostrud qui\",\n    \"in quis Duis nostrud\"\n  ],\n  \"updatedAt\": \"2012-09-23T10:12:14.303Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "a75da786-a610-450d-8fca-12d4abee4d0d",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "daabe62e-8aa1-4e13-933e-657231c3db4a",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation, existing branch returned\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(responseData[0], `phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(pm.response.json(), `phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(responseData[0], `tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `tradeName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(pm.response.json(), `tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `tradeName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(responseData[0], `tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(pm.response.json(), `tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(responseData[0], `eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `eoriNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `eoriNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(responseData[0], `deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `deregistrationDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(pm.response.json(), `deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `deregistrationDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation, branch created\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(responseData[0], `phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(pm.response.json(), `phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(responseData[0], `tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `tradeName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(pm.response.json(), `tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `tradeName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(responseData[0], `tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(pm.response.json(), `tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(responseData[0], `eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `eoriNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `eoriNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(responseData[0], `deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `deregistrationDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(pm.response.json(), `deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `deregistrationDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "2292c99b-393d-44e8-bb31-374b95a96649",
              "name": "{id}",
              "item": [
                {
                  "id": "aa31d12f-3c60-4718-8b5a-5789c6ced4fc",
                  "name": "/recipients/branches/:id",
                  "request": {
                    "name": "/recipients/branches/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "branches",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "9d8fb5a7-037e-4587-857f-7d9b47f33995",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"1994-07-27T08:23:24.332Z\",\n  \"deregistrationDate\": \"1947-07-19\",\n  \"eoriNumber\": \"NL771403270\",\n  \"id\": \"urn:uuid:b7c2fb2c-057e-e87a-309c-8e4bf0f6fe3e\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"nostrud qui\",\n    \"in quis Duis nostrud\"\n  ],\n  \"updatedAt\": \"2012-09-23T10:12:14.303Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "979494f4-710a-4474-81c7-cdeb034095ab",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "5a610e59-81e4-4c9e-bf9e-d58f490ae666",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(responseData[0], `branches`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(pm.response.json(), `branches`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the branches field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`branches`);\n          let branchesArray = _.get(pm.response.json(), `branches`, \"\");\n          for (let branches_it = 0; branches_it < branchesArray.length; branches_it++) {\n            let iterator = branches_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('branches[${branches_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"branches[${branches_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('branches[${branches_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].phone`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].phone`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocNumber' has 'cocNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocBranchNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocBranchNumber' has 'cocBranchNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocBranchNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'tradeName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].tradeName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].tradeName' has 'tradeName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].tradeName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'eoriNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].eoriNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].eoriNumber' has 'eoriNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].eoriNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'deregistrationDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].deregistrationDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].deregistrationDate' has 'deregistrationDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].deregistrationDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "0f49496a-4756-4526-901a-2eb918bb22b0",
                  "name": "/recipients/branches/:id",
                  "request": {
                    "name": "/recipients/branches/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "branches",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "dd101d91-51c1-43e3-a875-45609b7d8b29",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "10e17e03-7c36-44b0-96f2-04b2cf4c78e5",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "24319a4a-0775-4752-a00d-3a6ac5dd5506",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "62dc2946-a3a7-4787-b45d-5d7182c5c48a",
                  "name": "/recipients/branches/:id",
                  "request": {
                    "name": "/recipients/branches/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "branches",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [
                    {
                      "id": "07e8743d-bf42-49bc-af3b-207625e1b8ff",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"1994-07-27T08:23:24.332Z\",\n  \"deregistrationDate\": \"1947-07-19\",\n  \"eoriNumber\": \"NL771403270\",\n  \"id\": \"urn:uuid:b7c2fb2c-057e-e87a-309c-8e4bf0f6fe3e\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"nostrud qui\",\n    \"in quis Duis nostrud\"\n  ],\n  \"updatedAt\": \"2012-09-23T10:12:14.303Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "7a1a40bf-dddf-4b54-a289-2ab0fd3da8bc",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "4c47135d-2626-473e-a8ed-02c585a20d3d",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches/:id for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(responseData[0], `phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(pm.response.json(), `phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(responseData[0], `tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `tradeName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(pm.response.json(), `tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `tradeName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(responseData[0], `tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(pm.response.json(), `tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(responseData[0], `eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `eoriNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `eoriNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(responseData[0], `deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `deregistrationDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(pm.response.json(), `deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `deregistrationDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "2bf33426-d8ad-481a-b943-ca567b1fb4aa",
                  "name": "registrations",
                  "item": [
                    {
                      "id": "c002f924-29b3-470e-b813-0bdf5b2ad311",
                      "name": "/recipients/branches/:id/registrations",
                      "request": {
                        "name": "/recipients/branches/:id/registrations",
                        "description": {},
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "disabled": false,
                              "key": "credential-url",
                              "value": "{{credential-url}}",
                              "description": "Filter results on specific Credential (URL)."
                            },
                            {
                              "disabled": false,
                              "key": "size",
                              "value": "{{size}}",
                              "description": "Limit the number of results"
                            },
                            {
                              "disabled": false,
                              "key": "offset",
                              "value": "{{offset}}",
                              "description": "Offset results"
                            }
                          ],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        }
                      },
                      "response": [
                        {
                          "id": "dee55551-3c58-4c2d-ad59-256bab5defa9",
                          "name": "successful operation",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record count",
                              "key": "page-size",
                              "value": "{{page-size}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record offset",
                              "key": "page-offset",
                              "value": "{{page-offset}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"registrations\": [\n    {\n      \"createdAt\": \"1979-06-26T08:28:05.561Z\",\n      \"credentialUrl\": \"Ih1pSJD1x:j=\",\n      \"endDate\": \"2012-05-23\",\n      \"id\": \"84f9ee01-fa69-9941-0b6a-bae9e77c0d65\",\n      \"issuedAt\": \"2014-12-30T01:21:15.591Z\",\n      \"reference\": \"nisi reprehenderit fugiat ullamco \",\n      \"startDate\": \"1987-07-07\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"2016-02-20\",\n      \"updatedAt\": \"1973-10-01T03:06:05.324Z\"\n    },\n    {\n      \"createdAt\": \"1953-09-30T03:33:49.564Z\",\n      \"credentialUrl\": \"DEdP://&dQ\",\n      \"endDate\": \"1944-11-27\",\n      \"id\": \"445d3109-d118-147e-66fc-09f91b0288df\",\n      \"issuedAt\": \"2000-12-01T11:56:44.059Z\",\n      \"reference\": \"labore nostrud\",\n      \"startDate\": \"1947-03-22\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1987-03-10\",\n      \"updatedAt\": \"1987-05-15T19:12:22.661Z\"\n    }\n  ],\n  \"total\": 1\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "e08ec5be-85b4-44c1-a2ba-5b936e930143",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "32607820-7df1-40ed-8188-a7f41c20a4f7",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches/:id/registrations?credential-url=<string>&size=<integer>&offset=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(responseData[0], `branches`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(pm.response.json(), `branches`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the branches field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`branches`);\n          let branchesArray = _.get(pm.response.json(), `branches`, \"\");\n          for (let branches_it = 0; branches_it < branchesArray.length; branches_it++) {\n            let iterator = branches_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('branches[${branches_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"branches[${branches_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('branches[${branches_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].phone`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].phone`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocNumber' has 'cocNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocBranchNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocBranchNumber' has 'cocBranchNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocBranchNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'tradeName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].tradeName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].tradeName' has 'tradeName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].tradeName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'eoriNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].eoriNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].eoriNumber' has 'eoriNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].eoriNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'deregistrationDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].deregistrationDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].deregistrationDate' has 'deregistrationDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].deregistrationDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    {
                      "id": "79edee27-2aac-4fda-ba3b-b9019b273dd1",
                      "name": "Create new Registration for the Recipient",
                      "request": {
                        "name": "Create new Registration for the Recipient",
                        "description": {
                          "content": "Create new Registration for the Recipient",
                          "type": "text/plain"
                        },
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        },
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "response": [
                        {
                          "id": "38d73a92-956d-4fd2-84cf-edb31906eb12",
                          "name": "Successful",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Created",
                          "code": 201,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Location of the created resource",
                              "key": "location",
                              "value": "{{location}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"createdAt\": \"1988-07-10T05:52:09.330Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"urn:uuid:989354b9-a1c8-ce84-7e11-1b957b0b0168\",\n  \"issuedAt\": \"1995-06-21T03:58:50.465Z\",\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"1976-12-12\",\n  \"updatedAt\": \"1964-11-30T04:48:09.788Z\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "cb731cc0-cac7-4651-b38d-c3a895d15149",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "0a270982-38d5-448f-9a77-c49d5fc52cfa",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches/:id/registrations for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"Successful\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(responseData[0], `reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(pm.response.json(), `reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `startDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`startDate`)){\n          if(pm.expect(_.get(responseData[0], `startDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `startDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `startDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`startDate`)){\n          if(pm.expect(_.get(pm.response.json(), `startDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `startDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('startDate format to be date',function(){\n                pm.expect(_.get(responseData, \"startDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `endDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`endDate`)){\n          if(pm.expect(_.get(responseData[0], `endDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `endDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `endDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`endDate`)){\n          if(pm.expect(_.get(pm.response.json(), `endDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `endDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('endDate format to be date',function(){\n                pm.expect(_.get(responseData, \"endDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`status`)){\n          if(pm.expect(_.get(responseData[0], `status`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `status`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n          if(pm.expect(_.get(pm.response.json(), `status`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `credentialUrl` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`credentialUrl`)){\n          if(pm.expect(_.get(responseData[0], `credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `credentialUrl`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `credentialUrl` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`credentialUrl`)){\n          if(pm.expect(_.get(pm.response.json(), `credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `credentialUrl`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('credentialUrl has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"credentialUrl\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `suspendedUntil` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`suspendedUntil`)){\n          if(pm.expect(_.get(responseData[0], `suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `suspendedUntil`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `suspendedUntil` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`suspendedUntil`)){\n          if(pm.expect(_.get(pm.response.json(), `suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `suspendedUntil`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('suspendedUntil format to be date',function(){\n                pm.expect(_.get(responseData, \"suspendedUntil\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `issuedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`issuedAt`)){\n          if(pm.expect(_.get(responseData[0], `issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `issuedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `issuedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`issuedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `issuedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('issuedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"issuedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        },
        {
          "id": "7cb64511-2d6a-4453-8a82-be09693c3153",
          "name": "persons",
          "item": [
            {
              "id": "10650f3c-b988-4e95-87ef-21f15ce47c76",
              "name": "/recipients/persons",
              "request": {
                "name": "/recipients/persons",
                "description": {},
                "url": {
                  "path": [
                    "recipients",
                    "persons"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "key": "size",
                      "value": "{{size}}",
                      "description": "Limit the number of results"
                    },
                    {
                      "disabled": false,
                      "key": "offset",
                      "value": "{{offset}}",
                      "description": "Offset results"
                    },
                    {
                      "disabled": false,
                      "key": "name",
                      "value": "{{name}}",
                      "description": "Filter results based on Person's name"
                    },
                    {
                      "disabled": false,
                      "key": "birth-date",
                      "value": "{{birth-date}}",
                      "description": "Filter results based on birth date"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "82f7341b-38be-4483-acef-d2aa44ec73a6",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        },
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "birth-date",
                          "value": "{{birth-date}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record count",
                      "key": "page-size",
                      "value": "{{page-size}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record offset",
                      "key": "page-offset",
                      "value": "{{page-offset}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"persons\": [\n    {\n      \"birthDate\": \"2003-01-23\",\n      \"birthPlace\": \"'-{,,-L- .,p-,'...p,.L-,L-\",\n      \"countryCode\": \"UC\",\n      \"createdAt\": \"2019-09-08T21:21:18.496Z\",\n      \"email\": \"<email>\",\n      \"firstName\": \"p.'p{{p-{.{'{'.}.}Lp.'p{-''-p {pp.-  {L  }-\",\n      \"houseNumber\": \"4\",\n      \"houseNumberPostfix\": \"C'XYLHetcQn\",\n      \"id\": \"urn:uuid:df62ecd8-e8e8-d0ca-4de4-9d217e248884\",\n      \"initials\": \"LDUQ\",\n      \"lastName\": \"{-{p{--- LLL{p''p.-pp\",\n      \"middleName\": \"{{--L-pL\",\n      \"phone\": \"<string>\",\n      \"postalCode\": \"03058\",\n      \"reference\": \"consequat Lorem do exercitation eiusmod\",\n      \"updatedAt\": \"2001-05-03T15:09:34.122Z\"\n    },\n    {\n      \"birthDate\": \"2022-12-26\",\n      \"birthPlace\": \"{-LL{}},{L}{\",\n      \"countryCode\": \"VP\",\n      \"createdAt\": \"2000-06-03T19:35:37.643Z\",\n      \"email\": \"<email>\",\n      \"firstName\": \" .-'L''-L ..pL-}L-}'pppL.pLLL{}p '..}.  p{\",\n      \"houseNumber\": \"091\",\n      \"houseNumberPostfix\": \"ephfakrf._qVzGg\",\n      \"id\": \"c8c81c1a-da9e-eae3-3985-b563515fd32b\",\n      \"initials\": \"UR\",\n      \"lastName\": \" pLp'\",\n      \"middleName\": \"}p.''''.\",\n      \"phone\": \"<string>\",\n      \"postalCode\": \"59201\",\n      \"reference\": \"velit amet\",\n      \"updatedAt\": \"1997-12-11T04:49:51.158Z\"\n    }\n  ],\n  \"total\": 1\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "9d160b4a-b165-47aa-b937-2aa0d2d65dba",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        },
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "birth-date",
                          "value": "{{birth-date}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "6937a7ec-42f5-4773-82ba-645e0df51355",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        },
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "birth-date",
                          "value": "{{birth-date}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons?size=<integer>&offset=<integer>&name=<string>&birth-date=<date> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(responseData[0], `persons`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(pm.response.json(), `persons`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the persons field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`persons`);\n          let personsArray = _.get(pm.response.json(), `persons`, \"\");\n          for (let persons_it = 0; persons_it < personsArray.length; persons_it++) {\n            let iterator = persons_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('persons[${persons_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"persons[${persons_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'initials' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].initials`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].initials`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].initials' has 'initials' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].initials`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].initials`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'firstName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].firstName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].firstName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].firstName' has 'firstName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].firstName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].firstName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'middleName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].middleName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].middleName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].middleName' has 'middleName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].middleName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].middleName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'lastName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].lastName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].lastName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].lastName' has 'lastName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].lastName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].lastName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthDate' has 'birthDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthPlace' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthPlace`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthPlace' has 'birthPlace' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthPlace`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].phone`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].phone`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('persons[${persons_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'postalCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].postalCode`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].postalCode' has 'postalCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].postalCode`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumber' has 'houseNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumberPostfix' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumberPostfix' has 'houseNumberPostfix' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'countryCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].countryCode`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].countryCode' has 'countryCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].countryCode`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'reference' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].reference`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].reference' has 'reference' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].reference`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('persons[${persons_it}].reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"persons[${persons_it}].reference\", \"\").length).to.be.at.most(100);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f66cf640-eec4-4c6d-b56e-fc257cdc7012",
              "name": "/recipients/persons",
              "request": {
                "name": "/recipients/persons",
                "description": {},
                "url": {
                  "path": [
                    "recipients",
                    "persons"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "e481a3ce-4e28-4497-a8b7-25f74f0feb32",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Location of the created resource",
                      "key": "location",
                      "value": "{{location}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"birthDate\": \"<date>\",\n  \"birthPlace\": \"<string>\",\n  \"countryCode\": \"<string>\",\n  \"createdAt\": \"1961-11-17T16:41:39.602Z\",\n  \"email\": \"<email>\",\n  \"firstName\": \"<string>\",\n  \"houseNumber\": \"<string>\",\n  \"houseNumberPostfix\": \"<string>\",\n  \"id\": \"urn:uuid:2f10e9a2-38fa-b478-92e1-35aadacc6e4c\",\n  \"initials\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"middleName\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"postalCode\": \"<string>\",\n  \"reference\": \"<string>\",\n  \"updatedAt\": \"1952-02-21T18:16:34.213Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "d5731f20-97a5-4606-84b6-db1037788085",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "d2308cac-e890-421f-b208-bf2f26dcac82",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`initials`)){\n          if(pm.expect(_.get(responseData[0], `initials`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `initials`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`initials`)){\n          if(pm.expect(_.get(pm.response.json(), `initials`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `initials`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`firstName`)){\n          if(pm.expect(_.get(responseData[0], `firstName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `firstName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`firstName`)){\n          if(pm.expect(_.get(pm.response.json(), `firstName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `firstName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`middleName`)){\n          if(pm.expect(_.get(responseData[0], `middleName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `middleName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`middleName`)){\n          if(pm.expect(_.get(pm.response.json(), `middleName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `middleName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`lastName`)){\n          if(pm.expect(_.get(responseData[0], `lastName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `lastName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`lastName`)){\n          if(pm.expect(_.get(pm.response.json(), `lastName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `lastName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`birthDate`)){\n          if(pm.expect(_.get(responseData[0], `birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `birthDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`birthDate`)){\n          if(pm.expect(_.get(pm.response.json(), `birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `birthDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`birthPlace`)){\n          if(pm.expect(_.get(responseData[0], `birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `birthPlace`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`birthPlace`)){\n          if(pm.expect(_.get(pm.response.json(), `birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `birthPlace`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(responseData[0], `phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(pm.response.json(), `phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`postalCode`)){\n          if(pm.expect(_.get(responseData[0], `postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `postalCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`postalCode`)){\n          if(pm.expect(_.get(pm.response.json(), `postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `postalCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`houseNumber`)){\n          if(pm.expect(_.get(responseData[0], `houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `houseNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `houseNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`houseNumberPostfix`)){\n          if(pm.expect(_.get(responseData[0], `houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumberPostfix`)){\n          if(pm.expect(_.get(pm.response.json(), `houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`countryCode`)){\n          if(pm.expect(_.get(responseData[0], `countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `countryCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`countryCode`)){\n          if(pm.expect(_.get(pm.response.json(), `countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `countryCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(responseData[0], `reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(pm.response.json(), `reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "937edf50-fe0d-470c-932f-f2f0acde8295",
              "name": "{id}",
              "item": [
                {
                  "id": "a12b56b4-68dd-4cc5-a992-64b61fd87e57",
                  "name": "/recipients/persons/:id",
                  "request": {
                    "name": "/recipients/persons/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "persons",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "4b27035c-e4d2-4f7a-9c60-c63ab1452c13",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"birthDate\": \"<date>\",\n  \"birthPlace\": \"<string>\",\n  \"countryCode\": \"<string>\",\n  \"createdAt\": \"1961-11-17T16:41:39.602Z\",\n  \"email\": \"<email>\",\n  \"firstName\": \"<string>\",\n  \"houseNumber\": \"<string>\",\n  \"houseNumberPostfix\": \"<string>\",\n  \"id\": \"urn:uuid:2f10e9a2-38fa-b478-92e1-35aadacc6e4c\",\n  \"initials\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"middleName\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"postalCode\": \"<string>\",\n  \"reference\": \"<string>\",\n  \"updatedAt\": \"1952-02-21T18:16:34.213Z\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "b1a68b99-3f83-4856-90f8-c33256c8ad84",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "cfb070c7-cc83-4b98-9546-ff46c01dd0c6",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(responseData[0], `persons`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(pm.response.json(), `persons`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the persons field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`persons`);\n          let personsArray = _.get(pm.response.json(), `persons`, \"\");\n          for (let persons_it = 0; persons_it < personsArray.length; persons_it++) {\n            let iterator = persons_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('persons[${persons_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"persons[${persons_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'initials' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].initials`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].initials`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].initials' has 'initials' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].initials`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].initials`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'firstName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].firstName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].firstName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].firstName' has 'firstName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].firstName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].firstName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'middleName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].middleName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].middleName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].middleName' has 'middleName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].middleName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].middleName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'lastName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].lastName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].lastName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].lastName' has 'lastName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].lastName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].lastName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthDate' has 'birthDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthPlace' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthPlace`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthPlace' has 'birthPlace' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthPlace`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].phone`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].phone`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('persons[${persons_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'postalCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].postalCode`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].postalCode' has 'postalCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].postalCode`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumber' has 'houseNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumberPostfix' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumberPostfix' has 'houseNumberPostfix' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'countryCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].countryCode`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].countryCode' has 'countryCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].countryCode`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'reference' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].reference`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].reference' has 'reference' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].reference`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('persons[${persons_it}].reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"persons[${persons_it}].reference\", \"\").length).to.be.at.most(100);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "5f486b34-ee03-4d9b-9f8e-78beef86833d",
                  "name": "/recipients/persons/:id",
                  "request": {
                    "name": "/recipients/persons/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "persons",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "07f1f64f-ee4e-4009-b03c-59212816faad",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "4e0fae0f-b150-4f2c-9601-c8f5f90601ce",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "420084ff-941c-4cc0-820e-3775cc7ac041",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "4ac41634-3b8a-4691-86a3-2afaed92fa66",
                  "name": "Update a Person. Note: when the VC is issued, these fields cannot be updated anymore:<br/>- initials<br/>- lastName<br/>- birthDate",
                  "request": {
                    "name": "Update a Person. Note: when the VC is issued, these fields cannot be updated anymore:<br/>- initials<br/>- lastName<br/>- birthDate",
                    "description": {
                      "content": "Update a Person. Note: when the VC is issued, these fields cannot be updated anymore:<br/>- initials<br/>- lastName<br/>- birthDate",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "recipients",
                        "persons",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [
                    {
                      "id": "a8a742d6-4282-4c7c-8d58-479027cbd364",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"birthDate\": \"<date>\",\n  \"birthPlace\": \"<string>\",\n  \"countryCode\": \"<string>\",\n  \"createdAt\": \"1961-11-17T16:41:39.602Z\",\n  \"email\": \"<email>\",\n  \"firstName\": \"<string>\",\n  \"houseNumber\": \"<string>\",\n  \"houseNumberPostfix\": \"<string>\",\n  \"id\": \"urn:uuid:2f10e9a2-38fa-b478-92e1-35aadacc6e4c\",\n  \"initials\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"middleName\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"postalCode\": \"<string>\",\n  \"reference\": \"<string>\",\n  \"updatedAt\": \"1952-02-21T18:16:34.213Z\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "28ecc2e4-543d-48f8-b222-0d0330dd39cb",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "5d12dda1-1ef1-490e-ab50-df97369f452e",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons/:id for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`initials`)){\n          if(pm.expect(_.get(responseData[0], `initials`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `initials`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`initials`)){\n          if(pm.expect(_.get(pm.response.json(), `initials`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `initials`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`firstName`)){\n          if(pm.expect(_.get(responseData[0], `firstName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `firstName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`firstName`)){\n          if(pm.expect(_.get(pm.response.json(), `firstName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `firstName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`middleName`)){\n          if(pm.expect(_.get(responseData[0], `middleName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `middleName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`middleName`)){\n          if(pm.expect(_.get(pm.response.json(), `middleName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `middleName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`lastName`)){\n          if(pm.expect(_.get(responseData[0], `lastName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `lastName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`lastName`)){\n          if(pm.expect(_.get(pm.response.json(), `lastName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `lastName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`birthDate`)){\n          if(pm.expect(_.get(responseData[0], `birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `birthDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`birthDate`)){\n          if(pm.expect(_.get(pm.response.json(), `birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `birthDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`birthPlace`)){\n          if(pm.expect(_.get(responseData[0], `birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `birthPlace`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`birthPlace`)){\n          if(pm.expect(_.get(pm.response.json(), `birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `birthPlace`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(responseData[0], `phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(pm.response.json(), `phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`postalCode`)){\n          if(pm.expect(_.get(responseData[0], `postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `postalCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`postalCode`)){\n          if(pm.expect(_.get(pm.response.json(), `postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `postalCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`houseNumber`)){\n          if(pm.expect(_.get(responseData[0], `houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `houseNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `houseNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`houseNumberPostfix`)){\n          if(pm.expect(_.get(responseData[0], `houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumberPostfix`)){\n          if(pm.expect(_.get(pm.response.json(), `houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`countryCode`)){\n          if(pm.expect(_.get(responseData[0], `countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `countryCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`countryCode`)){\n          if(pm.expect(_.get(pm.response.json(), `countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `countryCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(responseData[0], `reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(pm.response.json(), `reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "45c2ee68-8dc9-4e0d-b530-7d7d98a01e19",
                  "name": "registrations",
                  "item": [
                    {
                      "id": "65479fd4-c721-48c2-bba6-0e35c5e99221",
                      "name": "/recipients/persons/:id/registrations",
                      "request": {
                        "name": "/recipients/persons/:id/registrations",
                        "description": {},
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "disabled": false,
                              "key": "credential-url",
                              "value": "{{credential-url}}",
                              "description": "Filter results on specific Credential (URL)."
                            },
                            {
                              "disabled": false,
                              "key": "size",
                              "value": "{{size}}",
                              "description": "Limit the number of results"
                            },
                            {
                              "disabled": false,
                              "key": "offset",
                              "value": "{{offset}}",
                              "description": "Offset results"
                            }
                          ],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        }
                      },
                      "response": [
                        {
                          "id": "866c6c20-b1bb-4885-bd49-ed0e1a494546",
                          "name": "successful operation",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record count",
                              "key": "page-size",
                              "value": "{{page-size}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record offset",
                              "key": "page-offset",
                              "value": "{{page-offset}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"registrations\": [\n    {\n      \"createdAt\": \"1975-10-18T02:14:21.210Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"urn:uuid:b8f6d0f7-5298-e549-eeef-7888199608af\",\n      \"issuedAt\": \"1954-08-05T12:48:20.579Z\",\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1959-12-10\",\n      \"updatedAt\": \"1983-12-19T00:45:39.668Z\"\n    },\n    {\n      \"createdAt\": \"1944-11-20T02:37:15.391Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"urn:uuid:288e5d46-a246-3b7d-b202-d03e17c605a9\",\n      \"issuedAt\": \"1985-03-02T06:08:04.153Z\",\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"2012-01-19\",\n      \"updatedAt\": \"1996-09-23T15:19:42.504Z\"\n    }\n  ],\n  \"total\": 1\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "dac7d26d-84bb-4d35-b5f1-0800be031f4d",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "4cf89fbf-7016-4f03-8a59-960ef54781be",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons/:id/registrations?credential-url=<string>&size=<integer>&offset=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(responseData[0], `persons`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(pm.response.json(), `persons`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the persons field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`persons`);\n          let personsArray = _.get(pm.response.json(), `persons`, \"\");\n          for (let persons_it = 0; persons_it < personsArray.length; persons_it++) {\n            let iterator = persons_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('persons[${persons_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"persons[${persons_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'initials' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].initials`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].initials`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].initials' has 'initials' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].initials`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].initials`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'firstName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].firstName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].firstName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].firstName' has 'firstName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].firstName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].firstName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'middleName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].middleName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].middleName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].middleName' has 'middleName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].middleName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].middleName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'lastName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].lastName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].lastName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].lastName' has 'lastName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].lastName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].lastName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthDate' has 'birthDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthPlace' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthPlace`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthPlace' has 'birthPlace' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthPlace`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].phone`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].phone`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('persons[${persons_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'postalCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].postalCode`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].postalCode' has 'postalCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].postalCode`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumber' has 'houseNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumberPostfix' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumberPostfix' has 'houseNumberPostfix' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'countryCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].countryCode`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].countryCode' has 'countryCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].countryCode`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'reference' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].reference`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].reference' has 'reference' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].reference`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('persons[${persons_it}].reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"persons[${persons_it}].reference\", \"\").length).to.be.at.most(100);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    {
                      "id": "4585202c-3921-429c-ab17-69b154b6bb3a",
                      "name": "Create new Registration",
                      "request": {
                        "name": "Create new Registration",
                        "description": {
                          "content": "Create new Registration",
                          "type": "text/plain"
                        },
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        },
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "response": [
                        {
                          "id": "326c6412-07f2-4223-ad3f-41b8be198998",
                          "name": "Successful",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Created",
                          "code": 201,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Location of the created resource",
                              "key": "location",
                              "value": "{{location}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"createdAt\": \"1988-07-10T05:52:09.330Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"urn:uuid:989354b9-a1c8-ce84-7e11-1b957b0b0168\",\n  \"issuedAt\": \"1995-06-21T03:58:50.465Z\",\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"1976-12-12\",\n  \"updatedAt\": \"1964-11-30T04:48:09.788Z\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "62e1bf07-3d80-4c73-b641-07092304d2d6",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "9ed54a48-ca52-4474-a055-81696bc6f9ae",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons/:id/registrations for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"Successful\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`initials`)){\n          if(pm.expect(_.get(responseData[0], `initials`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `initials`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`initials`)){\n          if(pm.expect(_.get(pm.response.json(), `initials`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `initials`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`firstName`)){\n          if(pm.expect(_.get(responseData[0], `firstName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `firstName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`firstName`)){\n          if(pm.expect(_.get(pm.response.json(), `firstName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `firstName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`middleName`)){\n          if(pm.expect(_.get(responseData[0], `middleName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `middleName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`middleName`)){\n          if(pm.expect(_.get(pm.response.json(), `middleName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `middleName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`lastName`)){\n          if(pm.expect(_.get(responseData[0], `lastName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `lastName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`lastName`)){\n          if(pm.expect(_.get(pm.response.json(), `lastName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `lastName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`birthDate`)){\n          if(pm.expect(_.get(responseData[0], `birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `birthDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`birthDate`)){\n          if(pm.expect(_.get(pm.response.json(), `birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `birthDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`birthPlace`)){\n          if(pm.expect(_.get(responseData[0], `birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `birthPlace`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`birthPlace`)){\n          if(pm.expect(_.get(pm.response.json(), `birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `birthPlace`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(responseData[0], `phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(pm.response.json(), `phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`postalCode`)){\n          if(pm.expect(_.get(responseData[0], `postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `postalCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`postalCode`)){\n          if(pm.expect(_.get(pm.response.json(), `postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `postalCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`houseNumber`)){\n          if(pm.expect(_.get(responseData[0], `houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `houseNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `houseNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`houseNumberPostfix`)){\n          if(pm.expect(_.get(responseData[0], `houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumberPostfix`)){\n          if(pm.expect(_.get(pm.response.json(), `houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`countryCode`)){\n          if(pm.expect(_.get(responseData[0], `countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `countryCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`countryCode`)){\n          if(pm.expect(_.get(pm.response.json(), `countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `countryCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(responseData[0], `reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(pm.response.json(), `reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "763c74fd-3533-4cf8-a508-f1eeacea4680",
      "name": "registrations",
      "item": [
        {
          "id": "7bc22165-fbe1-4acc-96a1-aecdc6a1b04b",
          "name": "/registrations",
          "request": {
            "name": "/registrations",
            "description": {},
            "url": {
              "path": [
                "registrations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "size",
                  "value": "{{size}}",
                  "description": "Limit the number of results"
                },
                {
                  "disabled": false,
                  "key": "offset",
                  "value": "{{offset}}",
                  "description": "Offset results"
                },
                {
                  "disabled": false,
                  "key": "recipient-id",
                  "value": "{{recipient-id}}",
                  "description": "Filter results by Recipient ID (UUID)"
                },
                {
                  "disabled": false,
                  "key": "credential-url",
                  "value": "{{credential-url}}",
                  "description": "Filter results on specific Credential (URL)."
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "4d58bb73-d6c5-4cde-9df1-ba63d038db3a",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "registrations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    },
                    {
                      "key": "recipient-id",
                      "value": "{{recipient-id}}"
                    },
                    {
                      "key": "credential-url",
                      "value": "{{credential-url}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Response record count",
                  "key": "page-size",
                  "value": "{{page-size}}"
                },
                {
                  "disabled": false,
                  "description": "Response record offset",
                  "key": "page-offset",
                  "value": "{{page-offset}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"registrations\": [\n    {\n      \"createdAt\": \"1957-04-28T17:16:53.897Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"urn:uuid:6078edff-4c97-0d92-cd5c-aebc571560a1\",\n      \"issuedAt\": \"1948-07-12T14:45:53.321Z\",\n      \"recipient\": {\n        \"id\": \"2e8e4234-3b8d-e972-f137-40aa6d917efd\",\n        \"name\": \"} {.'..{.} -.{LL.-L}'--p L{.. }p{ }' 'p'' L.}{'.ppL}Lp-{pL''-L'}L{ {pLp{ {.}'{L{L' -p'L{ L .' -\",\n        \"type\": \"branch\"\n      },\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"2015-07-24\",\n      \"updatedAt\": \"1950-02-26T00:06:46.421Z\"\n    },\n    {\n      \"createdAt\": \"2023-05-15T07:30:21.831Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"urn:uuid:78fcc13c-a52e-ee40-464d-f10df5e8c00a\",\n      \"issuedAt\": \"2012-10-20T16:39:01.935Z\",\n      \"recipient\": {\n        \"id\": \"urn:uuid:802af7fb-67ea-7fc9-4f64-80d083d39885\",\n        \"name\": \" 'L}pL-L.  {  p{ L}{'  L}'L-...L'} {.pL{}}}{-\",\n        \"type\": \"employee\"\n      },\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1946-12-13\",\n      \"updatedAt\": \"2021-05-19T20:12:29.915Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "56a9d3bf-ee10-47af-84c6-871ca88ef07b",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "registrations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    },
                    {
                      "key": "recipient-id",
                      "value": "{{recipient-id}}"
                    },
                    {
                      "key": "credential-url",
                      "value": "{{credential-url}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "077ab99d-696a-483b-9544-2e3e04d5a6e2",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "registrations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    },
                    {
                      "key": "recipient-id",
                      "value": "{{recipient-id}}"
                    },
                    {
                      "key": "credential-url",
                      "value": "{{credential-url}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /registrations?size=<integer>&offset=<integer>&recipient-id=<uuid>&credential-url=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `registrations` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`registrations`)){\n              if(pm.expect(_.get(responseData[0], `registrations`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `registrations`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `registrations` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`registrations`)){\n              if(pm.expect(_.get(pm.response.json(), `registrations`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `registrations`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the registrations field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`registrations`);\n          let registrationsArray = _.get(pm.response.json(), `registrations`, \"\");\n          for (let registrations_it = 0; registrations_it < registrationsArray.length; registrations_it++) {\n            let iterator = registrations_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('registrations[${registrations_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'reference' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].reference`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].reference' has 'reference' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].reference`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('registrations[${registrations_it}].reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].reference\", \"\").length).to.be.at.most(100);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'startDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].startDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].startDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].startDate' has 'startDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].startDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].startDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].startDate format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].startDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'endDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].endDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].endDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].endDate' has 'endDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].endDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].endDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].endDate format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].endDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].status`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].status`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'credentialUrl' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].credentialUrl`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].credentialUrl' has 'credentialUrl' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].credentialUrl`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('registrations[${registrations_it}].credentialUrl has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].credentialUrl\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'suspendedUntil' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].suspendedUntil`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].suspendedUntil' has 'suspendedUntil' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].suspendedUntil`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].suspendedUntil format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].suspendedUntil\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'issuedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].issuedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].issuedAt' has 'issuedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].issuedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].issuedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].issuedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'recipient' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient' has 'recipient' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient.id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient.id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient.id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient.id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient.id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('registrations[${registrations_it}].recipient.id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].recipient.id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'name' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient.name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient.name`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient.name' has 'name' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient.name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient.name`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('registrations[${registrations_it}].recipient.name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].recipient.name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'type' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient.type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient.type`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient.type' has 'type' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient.type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient.type`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('registrations[${registrations_it}].recipient.type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].recipient.type\", \"\")).to.include.oneOf([\"branch\",\"person\",\"employee\"]);\n        })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "b2fbbe9d-3f3f-439a-8ab3-b1c7eeedc156",
          "name": "{id}",
          "item": [
            {
              "id": "514a8d36-b429-416c-a1a9-a6351b6cadd4",
              "name": "/registrations/:id",
              "request": {
                "name": "/registrations/:id",
                "description": {},
                "url": {
                  "path": [
                    "registrations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "4077ff4e-7406-4c5c-a1c3-04331ff6c6ef",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"createdAt\": \"2020-04-26T11:50:08.491Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"urn:uuid:9493e4f4-8ffa-9c02-a7e5-3b49570f37fc\",\n  \"issuedAt\": \"2013-03-09T04:29:16.344Z\",\n  \"recipient\": {\n    \"id\": \"c0d864a7-ce31-803e-a27a-68337ff5ccb4\",\n    \"name\": \"..}LL{{}.{pL -L}LLpp {.p}pp.p '}{--{-'L {p- }p'{L{..p ..LL' '{{'.}{p- --{p}- \",\n    \"type\": \"employee\"\n  },\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"1981-07-24\",\n  \"updatedAt\": \"1976-12-04T23:22:14.169Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "aaac2078-4fe5-4b32-832c-167a81f7fef3",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "fa42b584-ff1e-4b17-8ed4-a2cb3f7e0866",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /registrations/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `registrations` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`registrations`)){\n              if(pm.expect(_.get(responseData[0], `registrations`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `registrations`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `registrations` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`registrations`)){\n              if(pm.expect(_.get(pm.response.json(), `registrations`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `registrations`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the registrations field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`registrations`);\n          let registrationsArray = _.get(pm.response.json(), `registrations`, \"\");\n          for (let registrations_it = 0; registrations_it < registrationsArray.length; registrations_it++) {\n            let iterator = registrations_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('registrations[${registrations_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'reference' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].reference`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].reference' has 'reference' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].reference`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('registrations[${registrations_it}].reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].reference\", \"\").length).to.be.at.most(100);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'startDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].startDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].startDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].startDate' has 'startDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].startDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].startDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].startDate format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].startDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'endDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].endDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].endDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].endDate' has 'endDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].endDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].endDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].endDate format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].endDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].status`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].status`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'credentialUrl' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].credentialUrl`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].credentialUrl' has 'credentialUrl' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].credentialUrl`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('registrations[${registrations_it}].credentialUrl has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].credentialUrl\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'suspendedUntil' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].suspendedUntil`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].suspendedUntil' has 'suspendedUntil' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].suspendedUntil`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].suspendedUntil format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].suspendedUntil\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'issuedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].issuedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].issuedAt' has 'issuedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].issuedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].issuedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].issuedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'recipient' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient' has 'recipient' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient.id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient.id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient.id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient.id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient.id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('registrations[${registrations_it}].recipient.id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].recipient.id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'name' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient.name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient.name`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient.name' has 'name' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient.name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient.name`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('registrations[${registrations_it}].recipient.name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].recipient.name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'type' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient.type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient.type`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient.type' has 'type' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient.type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient.type`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('registrations[${registrations_it}].recipient.type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].recipient.type\", \"\")).to.include.oneOf([\"branch\",\"person\",\"employee\"]);\n        })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "9a37cd4c-2a52-46cc-acce-639861063c13",
              "name": "/registrations/:id",
              "request": {
                "name": "/registrations/:id",
                "description": {},
                "url": {
                  "path": [
                    "registrations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "367c20d9-0381-47a6-a9a5-1d1c48ef2c1a",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "82ca4ce1-1f13-4851-acf4-da2e5b6f4caa",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "c9d92542-af96-4e43-9f65-24b5ec011e04",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /registrations/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "38ff680e-c420-422f-a65e-e86c651125d8",
              "name": "/registrations/:id",
              "request": {
                "name": "/registrations/:id",
                "description": {},
                "url": {
                  "path": [
                    "registrations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": \"{{revoked}}\",\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "df2cb2ff-f62d-47a0-af37-d7955dcd4860",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": false,\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"createdAt\": \"2022-06-20T08:24:42.858Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"urn:uuid:cc46d422-afc8-aff7-63c3-f50d9661598e\",\n  \"issuedAt\": \"2005-07-04T23:19:54.085Z\",\n  \"recipient\": {\n    \"id\": \"urn:uuid:9adecc8d-de2d-e1bf-8221-e8bf3d4be223\",\n    \"name\": \"' .-Lp''}  {.{}}-'' .{}{\",\n    \"type\": \"branch\"\n  },\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"<date>\",\n  \"updatedAt\": \"2000-06-29T22:11:11.067Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "cb87ecea-fcad-42b4-af51-1c140e889734",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": false,\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "b2f048a3-c14d-4cd2-8d0e-f3a6637283f4",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": false,\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /registrations/:id for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(responseData[0], `reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(pm.response.json(), `reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `startDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`startDate`)){\n          if(pm.expect(_.get(responseData[0], `startDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `startDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `startDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`startDate`)){\n          if(pm.expect(_.get(pm.response.json(), `startDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `startDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('startDate format to be date',function(){\n                pm.expect(_.get(responseData, \"startDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `endDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`endDate`)){\n          if(pm.expect(_.get(responseData[0], `endDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `endDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `endDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`endDate`)){\n          if(pm.expect(_.get(pm.response.json(), `endDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `endDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('endDate format to be date',function(){\n                pm.expect(_.get(responseData, \"endDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`status`)){\n          if(pm.expect(_.get(responseData[0], `status`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `status`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n          if(pm.expect(_.get(pm.response.json(), `status`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `credentialUrl` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`credentialUrl`)){\n          if(pm.expect(_.get(responseData[0], `credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `credentialUrl`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `credentialUrl` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`credentialUrl`)){\n          if(pm.expect(_.get(pm.response.json(), `credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `credentialUrl`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('credentialUrl has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"credentialUrl\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `suspendedUntil` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`suspendedUntil`)){\n          if(pm.expect(_.get(responseData[0], `suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `suspendedUntil`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `suspendedUntil` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`suspendedUntil`)){\n          if(pm.expect(_.get(pm.response.json(), `suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `suspendedUntil`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('suspendedUntil format to be date',function(){\n                pm.expect(_.get(responseData, \"suspendedUntil\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `issuedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`issuedAt`)){\n          if(pm.expect(_.get(responseData[0], `issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `issuedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `issuedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`issuedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `issuedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('issuedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"issuedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `recipient` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`recipient`)){\n          if(pm.expect(_.get(responseData[0], `recipient`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `recipient`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `recipient` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`recipient`)){\n          if(pm.expect(_.get(pm.response.json(), `recipient`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `recipient`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `recipient.id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`recipient.id`)){\n          if(pm.expect(_.get(responseData[0], `recipient.id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `recipient.id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `recipient.id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`recipient.id`)){\n          if(pm.expect(_.get(pm.response.json(), `recipient.id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `recipient.id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('recipient.id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"recipient.id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `recipient.name` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`recipient.name`)){\n          if(pm.expect(_.get(responseData[0], `recipient.name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `recipient.name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `recipient.name` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`recipient.name`)){\n          if(pm.expect(_.get(pm.response.json(), `recipient.name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `recipient.name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('recipient.name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"recipient.name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `recipient.type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`recipient.type`)){\n          if(pm.expect(_.get(responseData[0], `recipient.type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `recipient.type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `recipient.type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`recipient.type`)){\n          if(pm.expect(_.get(pm.response.json(), `recipient.type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `recipient.type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('recipient.type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"recipient.type\", \"\")).to.include.oneOf([\"branch\",\"person\",\"employee\"]);\n        })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "15a3777a-196a-4547-b9c8-d67c5699c78d",
      "name": "/errors",
      "request": {
        "name": "/errors",
        "description": {},
        "url": {
          "path": [
            "errors"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "id": "105a1dcd-1f6c-4f0c-9d99-c79cde525f1b",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "errors"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"description\": \"Descriptive Error Message\",\n    \"error\": \"error/code\"\n  },\n  {\n    \"description\": \"Descriptive Error Message\",\n    \"error\": \"error/code\"\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /errors for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "cd38ab87-a9f7-45b3-a5c3-bc1fc41324b9",
      "name": "/kvk/zoeken",
      "request": {
        "name": "/kvk/zoeken",
        "description": {},
        "url": {
          "path": [
            "kvk",
            "zoeken"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [
            {
              "disabled": false,
              "key": "kvkNummer",
              "value": "{{kvkNummer}}"
            },
            {
              "disabled": false,
              "key": "vestigingsnummer",
              "value": "{{vestigingsnummer}}",
              "description": "Filter results based on reference"
            },
            {
              "disabled": false,
              "key": "handelsnaam",
              "value": "{{handelsnaam}}",
              "description": "Filter results based on reference"
            }
          ],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "key",
              "value": "Token"
            },
            {
              "key": "value",
              "value": "{{apiKey}}"
            },
            {
              "key": "in",
              "value": "header"
            }
          ]
        }
      },
      "response": [
        {
          "id": "3c11fa3e-8f3c-4e5e-8bd2-047d30cdfb38",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "kvk",
                "zoeken"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "kvkNummer",
                  "value": "{{kvkNummer}}"
                },
                {
                  "key": "vestigingsnummer",
                  "value": "{{vestigingsnummer}}"
                },
                {
                  "key": "handelsnaam",
                  "value": "{{handelsnaam}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "\"See kvk OAS specs\"",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /kvk/zoeken?kvkNummer=<string>&vestigingsnummer=<string>&handelsnaam=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "https://virtserver.swaggerhub.com/credentialregister/wallet/1.0.0",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "8f897114-3153-4c57-b911-7dae35e638ff",
    "name": "Wallet API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "The Wallet API of the Credential Register.",
      "type": "text/plain"
    }
  }
}