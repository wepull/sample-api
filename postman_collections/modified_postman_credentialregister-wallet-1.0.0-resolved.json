{
  "item": [
    {
      "id": "6b64b3e5-f8f2-4e83-9e1c-97d6ae02a3f0",
      "name": "accounts",
      "item": [
        {
          "id": "e136826c-eeed-443c-a3c6-066bccff8f4f",
          "name": "Create new Account",
          "request": {
            "name": "Create new Account",
            "description": {
              "content": "You will receive an email with OTP",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "accounts"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "description": "Commit Hash of Client Sowftware",
                "key": "commit-hash",
                "value": "{{commit-hash}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "04ae2ded-0cb2-45ff-a7d8-4766a9e976ca",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "Commit Hash of Client Sowftware",
                    "key": "commit-hash",
                    "value": "{{commit-hash}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Commit Hash",
                  "key": "commit-hash",
                  "value": "{{commit-hash}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "90a682a1-29a9-4a31-959f-f237f662ed65",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "Commit Hash of Client Sowftware",
                    "key": "commit-hash",
                    "value": "{{commit-hash}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /accounts for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "62425f7e-1078-430b-a7d2-fceb2a52f1b9",
          "name": "Login to existing Account",
          "request": {
            "name": "Login to existing Account",
            "description": {
              "content": "You will receive an email with OTP",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "accounts"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "679d18d7-613c-46c9-9f44-019a63f1e0f4",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "552fbf0c-9c8a-4dd5-81ed-5bb16a4f984f",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /accounts for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "82ea9c4f-2e98-425c-a94b-502404858975",
      "name": "Login using OTP: creates a session",
      "request": {
        "name": "Login using OTP: creates a session",
        "description": {
          "content": "Returned is a token, which is combined the session-uuid and the account-uuid",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "login"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"client\": \"{{client}}\",\n    \"email\": \"{{email}}\",\n    \"otp\": \"{{otp}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "44205d35-d2f4-433d-b45b-10dcdc6e5992",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"client\": \"{{client}}\",\n    \"email\": \"{{email}}\",\n    \"otp\": \"{{otp}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Created",
          "code": 201,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"token\": \"9216e558-a5f9-9060-a808-75954ecda594:f2cfeef4-8ac8-ebf7-21df-f8dbb6740b15\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "678f185a-1e99-4893-9544-8582b8ffb1c1",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"client\": \"{{client}}\",\n    \"email\": \"{{email}}\",\n    \"otp\": \"{{otp}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /login for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `token` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`token`)){\n          if(pm.expect(_.get(responseData[0], `token`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `token`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `token` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`token`)){\n          if(pm.expect(_.get(pm.response.json(), `token`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `token`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('token has same pattern as `^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`',function(){ \n          pm.expect(_.get(responseData, \"token\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\n        })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "dbc93d8a-9e80-459d-aa52-e8c4f86ad740",
      "name": "Logout: delete the session",
      "request": {
        "name": "Logout: delete the session",
        "description": {},
        "url": {
          "path": [
            "logout"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "key",
              "value": "Token"
            },
            {
              "key": "value",
              "value": "{{apiKey}}"
            },
            {
              "key": "in",
              "value": "header"
            }
          ]
        }
      },
      "response": [
        {
          "id": "86bfc5b8-65c1-4ca0-bf95-6a4bf04ba055",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "logout"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "e74662d7-d673-4e3d-9fb5-50f7bb5e5da8",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "logout"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /logout for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "b7b8778c-e827-49db-b28c-117c50e5d3a9",
      "name": "me",
      "item": [
        {
          "id": "164df3b6-1254-4179-85a5-b98db4dd7d77",
          "name": "my account details",
          "request": {
            "name": "my account details",
            "description": {},
            "url": {
              "path": [
                "me"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "816edcc9-5243-418e-8daa-0d60855a916e",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"1998-09-01T19:54:25.761Z\",\n  \"did\": \"consequat Ut Excepteur\",\n  \"email\": \"<email>\",\n  \"id\": \"7058d0b9-0c9e-faa5-1b1f-624d7c6ec7e8\",\n  \"image\": \"https://cdn.credentialregiater.com/2571c54e-2cde-4434-83f2-c329f74adc27.png\",\n  \"name\": \"'L'}  -L Lp- L'-Lp.'..'- -''-{.}'}{-{'-.-L.-''- -.}. LL'-}L.\",\n  \"settings\": {\n    \"cupidatat_479\": -97639783\n  },\n  \"updatedAt\": \"2020-03-29T17:20:34.767Z\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "ef90f096-e3b5-4792-8c12-040d00ad74b3",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "5ae01a85-6dd6-4794-8b19-3449a75a4b95",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /me for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `did` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`did`)){\n          if(pm.expect(_.get(responseData[0], `did`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `did`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `did` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`did`)){\n          if(pm.expect(_.get(pm.response.json(), `did`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `did`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(responseData[0], `name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(pm.response.json(), `name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `image` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`image`)){\n          if(pm.expect(_.get(responseData[0], `image`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `image`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `image` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`image`)){\n          if(pm.expect(_.get(pm.response.json(), `image`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `image`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('image has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"image\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `settings` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`settings`)){\n          if(pm.expect(_.get(responseData[0], `settings`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `settings`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `settings` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`settings`)){\n          if(pm.expect(_.get(pm.response.json(), `settings`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `settings`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "d0c35050-f7ad-416d-a628-05dfa0b6c917",
          "name": "Change my settings or account name",
          "request": {
            "name": "Change my settings or account name",
            "description": {},
            "url": {
              "path": [
                "me"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"dolore5ca\": true,\n        \"reprehenderit_ea5\": \"{{reprehenderit_ea5}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "d4b708b4-940a-4f52-a134-605c762778cc",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"cupidatat3_\": \"{{cupidatat3_}}\",\n        \"nona0\": \"{{nona0}}\",\n        \"esse1\": \"{{esse1}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"1998-09-01T19:54:25.761Z\",\n  \"did\": \"consequat Ut Excepteur\",\n  \"email\": \"<email>\",\n  \"id\": \"7058d0b9-0c9e-faa5-1b1f-624d7c6ec7e8\",\n  \"image\": \"https://cdn.credentialregiater.com/2571c54e-2cde-4434-83f2-c329f74adc27.png\",\n  \"name\": \"'L'}  -L Lp- L'-Lp.'..'- -''-{.}'}{-{'-.-L.-''- -.}. LL'-}L.\",\n  \"settings\": {\n    \"cupidatat_479\": -97639783\n  },\n  \"updatedAt\": \"2020-03-29T17:20:34.767Z\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "a2b667d5-7145-4025-977f-85ab6660708c",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"cupidatat3_\": \"{{cupidatat3_}}\",\n        \"nona0\": \"{{nona0}}\",\n        \"esse1\": \"{{esse1}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "312b3cec-4717-42a2-94be-80feb9f58e5e",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"cupidatat3_\": \"{{cupidatat3_}}\",\n        \"nona0\": \"{{nona0}}\",\n        \"esse1\": \"{{esse1}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /me for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `did` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`did`)){\n          if(pm.expect(_.get(responseData[0], `did`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `did`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `did` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`did`)){\n          if(pm.expect(_.get(pm.response.json(), `did`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `did`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(responseData[0], `name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(pm.response.json(), `name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `image` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`image`)){\n          if(pm.expect(_.get(responseData[0], `image`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `image`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `image` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`image`)){\n          if(pm.expect(_.get(pm.response.json(), `image`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `image`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('image has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"image\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `settings` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`settings`)){\n          if(pm.expect(_.get(responseData[0], `settings`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `settings`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `settings` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`settings`)){\n          if(pm.expect(_.get(pm.response.json(), `settings`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `settings`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "f101610e-a66b-4c72-9c3f-9607905df073",
      "name": "credentials",
      "item": [
        {
          "id": "7703b444-1e83-466b-9d63-fd8e9b7375f2",
          "name": "All credentials in my Wallet",
          "request": {
            "name": "All credentials in my Wallet",
            "description": {},
            "url": {
              "path": [
                "credentials"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "size",
                  "value": "{{size}}",
                  "description": "Limit the number of results"
                },
                {
                  "disabled": false,
                  "key": "offset",
                  "value": "{{offset}}",
                  "description": "Offset results"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "1f99d584-e88d-403f-bd76-445488b6aa3e",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "credentials"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Response record count",
                  "key": "page-size",
                  "value": "{{page-size}}"
                },
                {
                  "disabled": false,
                  "description": "Response record offset",
                  "key": "page-offset",
                  "value": "{{page-offset}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"credentials\": [\n    {\n      \"createdAt\": \"2013-06-08T07:56:29.379Z\",\n      \"credential\": \"culpa aliquip dolore anim deserunt\",\n      \"format\": \"ldp_vc\",\n      \"id\": \"1c29a6a1-5edd-5e27-167c-b1d41ab1539f\",\n      \"status\": \"pending\",\n      \"statusUpdatedAt\": \"1990-09-15T18:25:15.915Z\"\n    },\n    {\n      \"createdAt\": \"1945-11-02T21:32:22.889Z\",\n      \"credential\": \"ut\",\n      \"format\": \"jwt_vc_json\",\n      \"id\": \"urn:uuid:3b3d455a-f5f3-36e4-cac3-622b7c44f3f4\",\n      \"status\": \"suspended\",\n      \"statusUpdatedAt\": \"1952-07-06T23:05:01.958Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "65ab730e-d3d0-45a4-9b5b-bc12d8af7547",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "credentials"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "eaa4a22a-d5fe-4db2-84e0-a94edf59bdf1",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "credentials"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /credentials?size=<integer>&offset=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `credentials` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`credentials`)){\n              if(pm.expect(_.get(responseData[0], `credentials`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `credentials`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `credentials` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`credentials`)){\n              if(pm.expect(_.get(pm.response.json(), `credentials`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `credentials`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the credentials field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`credentials`);\n          let credentialsArray = _.get(pm.response.json(), `credentials`, \"\");\n          for (let credentials_it = 0; credentials_it < credentialsArray.length; credentials_it++) {\n            let iterator = credentials_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('credentials[${credentials_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'format' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].format`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].format`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].format' has 'format' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].format`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].format`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('credentials[${credentials_it}].format to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials[${credentials_it}].format\", \"\")).to.include.oneOf([\"jwt_vc_json\",\"jwt_vc_json-ld\",\"ldp_vc\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'credential' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].credential`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].credential`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].credential' has 'credential' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].credential`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].credential`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].status`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].status`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('credentials[${credentials_it}].status to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials[${credentials_it}].status\", \"\")).to.include.oneOf([\"active\",\"suspended\",\"revoked\",\"expired\",\"pending\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'statusUpdatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].statusUpdatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].statusUpdatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].statusUpdatedAt' has 'statusUpdatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].statusUpdatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].statusUpdatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('credentials[${credentials_it}].statusUpdatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].statusUpdatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('credentials[${credentials_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "cc8e6fa6-20ef-409f-8c98-9af9992817d9",
          "name": "{id}",
          "item": [
            {
              "id": "4d60d147-19ef-4333-9263-288620424276",
              "name": "One credential from my Wallet",
              "request": {
                "name": "One credential from my Wallet",
                "description": {},
                "url": {
                  "path": [
                    "credentials",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "5f0ec115-2714-468a-a875-b0b5f1e0d253",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"createdAt\": \"1967-04-23T08:17:15.549Z\",\n  \"credential\": \"aliqua et\",\n  \"format\": \"ldp_vc\",\n  \"id\": \"urn:uuid:b1ab231d-9e66-55a6-fa7b-3167003accd4\",\n  \"status\": \"revoked\",\n  \"statusUpdatedAt\": \"2017-05-22T11:23:40.314Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "8b8c7974-0671-421c-8a3c-d1b1ba774849",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "71956011-a051-4ab1-a723-028b49254c94",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /credentials/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `credentials` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`credentials`)){\n              if(pm.expect(_.get(responseData[0], `credentials`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `credentials`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `credentials` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`credentials`)){\n              if(pm.expect(_.get(pm.response.json(), `credentials`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `credentials`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the credentials field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`credentials`);\n          let credentialsArray = _.get(pm.response.json(), `credentials`, \"\");\n          for (let credentials_it = 0; credentials_it < credentialsArray.length; credentials_it++) {\n            let iterator = credentials_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('credentials[${credentials_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'format' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].format`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].format`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].format' has 'format' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].format`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].format`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('credentials[${credentials_it}].format to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials[${credentials_it}].format\", \"\")).to.include.oneOf([\"jwt_vc_json\",\"jwt_vc_json-ld\",\"ldp_vc\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'credential' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].credential`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].credential`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].credential' has 'credential' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].credential`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].credential`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].status`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].status`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('credentials[${credentials_it}].status to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials[${credentials_it}].status\", \"\")).to.include.oneOf([\"active\",\"suspended\",\"revoked\",\"expired\",\"pending\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'statusUpdatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].statusUpdatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].statusUpdatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].statusUpdatedAt' has 'statusUpdatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].statusUpdatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].statusUpdatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('credentials[${credentials_it}].statusUpdatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].statusUpdatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('credentials[${credentials_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "6bca5c52-88b6-4a6a-b6d3-94bb66c3db4b",
              "name": "Delete one credential from my Wallet",
              "request": {
                "name": "Delete one credential from my Wallet",
                "description": {},
                "url": {
                  "path": [
                    "credentials",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "ebc6c5b1-7b62-4d36-a784-b5bdaf874f4b",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "f21e297f-b363-4c6a-b24e-9275dc57517f",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "088409d4-7f97-4dd7-a3ec-42f1da0e2114",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /credentials/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "cfbeb925-308a-4c8d-9d4c-3d9d66d91969",
      "name": "Retrieve accounts with granted access permissions",
      "request": {
        "name": "Retrieve accounts with granted access permissions",
        "description": {},
        "url": {
          "path": [
            "grants"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "key",
              "value": "Token"
            },
            {
              "key": "value",
              "value": "{{apiKey}}"
            },
            {
              "key": "in",
              "value": "header"
            }
          ]
        }
      },
      "response": [
        {
          "id": "795e9745-7be4-4f99-8cc3-3339d772733e",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "grants"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"grants\": [\n    {\n      \"account\": {\n        \"email\": \"<email>\",\n        \"id\": \"246d6b2a-f170-9592-f35b-c730d2a6e2b3\",\n        \"image\": \"data:image/jpeg;base64,<clipped>\",\n        \"name\": \"{.\"\n      },\n      \"createdAt\": \"2015-07-30T05:07:07.759Z\",\n      \"id\": \"urn:uuid:f2793a0a-a4ec-22f9-af03-cb068677f6de\",\n      \"token\": \"d7ffb442-f30b-9748-cb22-531b78ecd208:04d11679-f79b-a25b-a7f9-3510cc04e2dd\",\n      \"updatedAt\": \"2022-11-05T15:36:12.034Z\"\n    },\n    {\n      \"account\": {\n        \"email\": \"<email>\",\n        \"id\": \"0a3c8bd8-f692-9ad6-2923-56ca987b1b80\",\n        \"image\": \"data:image/jpeg;base64,<clipped>\",\n        \"name\": \"L{'p}{   p .L''.-.\"\n      },\n      \"createdAt\": \"1965-01-16T13:45:42.793Z\",\n      \"id\": \"urn:uuid:b6efdf9b-9021-a0cf-5da9-544ca206b20f\",\n      \"token\": \"00ede154-b363-db6f-8551-5a0c44d4fd43:0318f665-2a53-b118-076c-8564f1a346d9\",\n      \"updatedAt\": \"1962-05-06T08:00:39.324Z\"\n    }\n  ],\n  \"total\": 1\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "68dd2b77-42bc-41fe-aa8e-1f74d9b89279",
          "name": "Authentication Required",
          "originalRequest": {
            "url": {
              "path": [
                "grants"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /grants for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `grants` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`grants`)){\n              if(pm.expect(_.get(responseData[0], `grants`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `grants`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `grants` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`grants`)){\n              if(pm.expect(_.get(pm.response.json(), `grants`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `grants`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the grants field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`grants`);\n          let grantsArray = _.get(pm.response.json(), `grants`, \"\");\n          for (let grants_it = 0; grants_it < grantsArray.length; grants_it++) {\n            let iterator = grants_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('grants[${grants_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"grants[${grants_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'token' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].token`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].token`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].token' has 'token' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].token`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].token`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('grants[${grants_it}].token has same pattern as `^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`',function(){ \n          pm.expect(_.get(responseData, \"grants[${grants_it}].token\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('grants[${grants_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"grants[${grants_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('grants[${grants_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"grants[${grants_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'account' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].account`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].account`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].account' has 'account' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].account`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].account`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].account.id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].account.id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].account.id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].account.id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].account.id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('grants[${grants_it}].account.id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"grants[${grants_it}].account.id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'name' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].account.name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].account.name`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].account.name' has 'name' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].account.name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].account.name`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('grants[${grants_it}].account.name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"grants[${grants_it}].account.name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'image' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].account.image`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].account.image`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].account.image' has 'image' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].account.image`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].account.image`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].account.email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].account.email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].account.email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].account.email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].account.email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('grants[${grants_it}].account.email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"grants[${grants_it}].account.email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('grants[${grants_it}].account.email format to be email',function(){ \n                pm.expect(_.get(responseData, \"grants[${grants_it}].account.email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "d40fa23e-4b59-48d5-80da-a73d00716975",
      "name": "authorizations",
      "item": [
        {
          "id": "af694af6-4cef-48b0-917b-ddcd9853692c",
          "name": "List accounts who have access to my account",
          "request": {
            "name": "List accounts who have access to my account",
            "description": {},
            "url": {
              "path": [
                "authorizations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "d8f6ac09-19e9-44f8-aec1-3a6d74be366f",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"authorizations\": [\n    {\n      \"createdAt\": \"2019-12-14T10:34:02.083Z\",\n      \"email\": \"<email>\",\n      \"id\": \"00a4a76f-a62b-4483-31cc-b0fcdb785206\",\n      \"name\": \"}L L-{'p  .{L}.LL '-'{-p  .'.LL- '-p.' p}}. L'..}{--.''L{L{{ L{}{}.'p.{{pp-.'p.Lpp}LLL{'\",\n      \"updatedAt\": \"1997-10-16T12:15:25.627Z\"\n    },\n    {\n      \"createdAt\": \"1955-06-10T02:24:46.058Z\",\n      \"email\": \"<email>\",\n      \"id\": \"d5d3804b-9fca-2bad-b4e8-5fd7c02d11f1\",\n      \"name\": \"L {'.{ .-L}..{}p L}{' -.''L.-}L.p -ppL{}}''.p}}}-}'-LL- }.. .p''-.L{--p\",\n      \"updatedAt\": \"1967-03-06T09:09:23.779Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "819f7f0e-1c50-4eb8-a050-39adf5c9ce48",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "58aaca76-e95f-465a-877e-88bb4f64eb64",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /authorizations for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `authorizations` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`authorizations`)){\n              if(pm.expect(_.get(responseData[0], `authorizations`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `authorizations`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `authorizations` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`authorizations`)){\n              if(pm.expect(_.get(pm.response.json(), `authorizations`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `authorizations`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the authorizations field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`authorizations`);\n          let authorizationsArray = _.get(pm.response.json(), `authorizations`, \"\");\n          for (let authorizations_it = 0; authorizations_it < authorizationsArray.length; authorizations_it++) {\n            let iterator = authorizations_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'authorizationsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `authorizations[${authorizations_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`authorizations[${authorizations_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'authorizations[${authorizations_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `authorizations[${authorizations_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`authorizations[${authorizations_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('authorizations[${authorizations_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"authorizations[${authorizations_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'authorizationsArray' has 'name' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `authorizations[${authorizations_it}].name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`authorizations[${authorizations_it}].name`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'authorizations[${authorizations_it}].name' has 'name' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `authorizations[${authorizations_it}].name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`authorizations[${authorizations_it}].name`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('authorizations[${authorizations_it}].name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"authorizations[${authorizations_it}].name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'authorizationsArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `authorizations[${authorizations_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`authorizations[${authorizations_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'authorizations[${authorizations_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `authorizations[${authorizations_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`authorizations[${authorizations_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('authorizations[${authorizations_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"authorizations[${authorizations_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('authorizations[${authorizations_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"authorizations[${authorizations_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'authorizationsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `authorizations[${authorizations_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`authorizations[${authorizations_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'authorizations[${authorizations_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `authorizations[${authorizations_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`authorizations[${authorizations_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('authorizations[${authorizations_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"authorizations[${authorizations_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'authorizationsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `authorizations[${authorizations_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`authorizations[${authorizations_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'authorizations[${authorizations_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `authorizations[${authorizations_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`authorizations[${authorizations_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('authorizations[${authorizations_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"authorizations[${authorizations_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "5f99fb8a-5f22-4783-8cad-0cc7d64d2f9b",
          "name": "Authorize another existing Account to access my Account",
          "request": {
            "name": "Authorize another existing Account to access my Account",
            "description": {},
            "url": {
              "path": [
                "authorizations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "4d8c0011-114b-4f67-9b79-a7c88ae14c4e",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Location of the created resource",
                  "key": "location",
                  "value": "{{location}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"1979-12-14T07:14:56.653Z\",\n  \"email\": \"<email>\",\n  \"id\": \"607b770a-16fb-c6b7-febf-511a61044214\",\n  \"name\": \"p{{.'.}{p{p{-{pp{LL--p.pp {- p}L}p - }{pp .L.pL} }-.--''}L-L{{pp{pLpL '.-- }  ...{.--L'p'-{}{{L-  \",\n  \"updatedAt\": \"1953-03-29T21:05:36.529Z\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "79164218-9362-436e-a3ba-9f649006f420",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "87f001c2-b605-47df-a22e-3842952ae1d5",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /authorizations for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(responseData[0], `name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(pm.response.json(), `name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "6bd11c82-7c15-4303-a1e2-feaeafe093cc",
          "name": "Remove Authorized Account",
          "request": {
            "name": "Remove Authorized Account",
            "description": {},
            "url": {
              "path": [
                "authorizations",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) UUID"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "748dc332-97fb-41c3-bd9d-d7902b0ed5bf",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "8c0fa751-c740-48e2-b4bb-edef9a720fd7",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "5e5b1fbf-736d-4912-becc-525941523c0c",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /authorizations/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "11affbbb-5c27-488d-9fc9-0c25dc591e41",
      "name": "apikeys",
      "item": [
        {
          "id": "762e110d-d8d1-4349-8ea0-4d460a8e325f",
          "name": "List API Keys you have created (session.type = 4)",
          "request": {
            "name": "List API Keys you have created (session.type = 4)",
            "description": {
              "content": "API keys to access your account via the API. API Keys are a session record with session.type equal to 4.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "apikeys"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "db47da50-70af-41bf-8f63-cb120776e954",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"apikeys\": [\n    {\n      \"createdAt\": \"2019-02-24T08:01:59.435Z\",\n      \"id\": \"urn:uuid:c01eb86e-2831-c63f-bfb3-a24f672695d3\"\n    },\n    {\n      \"createdAt\": \"1956-08-16T14:36:44.604Z\",\n      \"id\": \"urn:uuid:19e45eb9-9086-ed0f-dce6-dc0811edb0bf\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "b524b808-bba6-4e89-b2e1-521bd95b98b8",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "9e317969-6135-47d2-af3d-b28911953218",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /apikeys for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `apikeys` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`apikeys`)){\n              if(pm.expect(_.get(responseData[0], `apikeys`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `apikeys`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `apikeys` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`apikeys`)){\n              if(pm.expect(_.get(pm.response.json(), `apikeys`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `apikeys`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the apikeys field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`apikeys`);\n          let apikeysArray = _.get(pm.response.json(), `apikeys`, \"\");\n          for (let apikeys_it = 0; apikeys_it < apikeysArray.length; apikeys_it++) {\n            let iterator = apikeys_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'apikeysArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `apikeys[${apikeys_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`apikeys[${apikeys_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'apikeys[${apikeys_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `apikeys[${apikeys_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`apikeys[${apikeys_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('apikeys[${apikeys_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"apikeys[${apikeys_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'apikeysArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `apikeys[${apikeys_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`apikeys[${apikeys_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'apikeys[${apikeys_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `apikeys[${apikeys_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`apikeys[${apikeys_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('apikeys[${apikeys_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"apikeys[${apikeys_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "2a006e92-6f8c-4cc9-bdfa-ad2ef668e797",
          "name": "Create API Key (Create Session with type = 4)",
          "request": {
            "name": "Create API Key (Create Session with type = 4)",
            "description": {},
            "url": {
              "path": [
                "apikeys"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "3445c058-8bab-45ca-ad4e-8d038d107c02",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Location of the created resource",
                  "key": "location",
                  "value": "{{location}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"1962-08-03T14:54:54.357Z\",\n  \"id\": \"urn:uuid:8bfa5e7c-8c4f-875c-3173-a56ac5b756e7\",\n  \"token\": \"cdd09fab-5d30-efa3-38c4-723fd32a8d85:4c22b56a-7440-127a-cba2-dfb1fdad4319\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "c683c75d-b424-49c7-be18-5daae18a1239",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "2384c42c-f8f7-4404-b075-ad5ff87b7cf4",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /apikeys for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `token` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`token`)){\n          if(pm.expect(_.get(responseData[0], `token`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `token`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `token` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`token`)){\n          if(pm.expect(_.get(pm.response.json(), `token`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `token`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('token has same pattern as `^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`',function(){ \n          pm.expect(_.get(responseData, \"token\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "2d24c933-8c0f-4251-b940-7dbf4a86085d",
          "name": "/apikeys/:id",
          "request": {
            "name": "/apikeys/:id",
            "description": {},
            "url": {
              "path": [
                "apikeys",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) UUID"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "c12b7554-59b4-4caf-9103-33ac662b1005",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "a56fc555-7ff2-42e2-9101-85d43d535194",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "00d64dd8-0604-4f28-83b7-7ad77e93f549",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /apikeys/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "43647c78-bfe7-4e07-930b-02fefe1418f1",
      "name": "recipients",
      "item": [
        {
          "id": "649d1fcd-8bdb-471c-81f4-a7674cfb3033",
          "name": "branches",
          "item": [
            {
              "id": "d00b833d-6053-4cb1-b4c9-a0d4c6e8e9f1",
              "name": "/recipients/branches",
              "request": {
                "name": "/recipients/branches",
                "description": {},
                "url": {
                  "path": [
                    "recipients",
                    "branches"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "key": "coc-number",
                      "value": "{{coc-number}}",
                      "description": "Filter the results on the Chamber of Commerce number (Kamer van Koophandel nummer). This could return multiple results, as there could be multiple Branches."
                    },
                    {
                      "disabled": false,
                      "key": "coc-branch-number",
                      "value": "{{coc-branch-number}}",
                      "description": "Filter the results on the Chamber of Commerce Branch number (Kamer van Koophandel vestigingsnummer). This should only return a single result."
                    },
                    {
                      "disabled": false,
                      "key": "trade-name",
                      "value": "{{trade-name}}",
                      "description": "Filter the results on the Tradename of the organization."
                    },
                    {
                      "disabled": false,
                      "key": "size",
                      "value": "{{size}}",
                      "description": "Limit the number of results"
                    },
                    {
                      "disabled": false,
                      "key": "offset",
                      "value": "{{offset}}",
                      "description": "Offset results"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "af817f69-f401-41ca-b919-a1def0a32620",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "coc-number",
                          "value": "{{coc-number}}"
                        },
                        {
                          "key": "coc-branch-number",
                          "value": "{{coc-branch-number}}"
                        },
                        {
                          "key": "trade-name",
                          "value": "{{trade-name}}"
                        },
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record count",
                      "key": "page-size",
                      "value": "{{page-size}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record offset",
                      "key": "page-offset",
                      "value": "{{page-offset}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"branches\": [\n    {\n      \"cocBranchNumber\": \"090388497695\",\n      \"cocNumber\": \"40506877\",\n      \"createdAt\": \"1989-05-05T15:31:24.433Z\",\n      \"deregistrationDate\": \"1961-07-16\",\n      \"eoriNumber\": \"NL643009202\",\n      \"id\": \"d866c585-e47a-c66b-5d7c-a6d9bd2ef471\",\n      \"tradeName\": \"veniam moll\",\n      \"tradeNames\": [\n        \"pariatur\",\n        \"do occaecat est\"\n      ],\n      \"updatedAt\": \"1950-09-23T08:58:14.875Z\",\n      \"email\": \"\\\"3\\\"~?4\\\"@[562.9.109.569]\",\n      \"phone\": \"consequat adipisicing fugiat Duis\"\n    },\n    {\n      \"cocBranchNumber\": \"974542793148\",\n      \"cocNumber\": \"65415161\",\n      \"createdAt\": \"1992-10-03T14:58:51.576Z\",\n      \"deregistrationDate\": \"1981-11-30\",\n      \"eoriNumber\": \"NL403744394\",\n      \"id\": \"69fba2f6-4593-1c5e-7a81-ca1d1e3e4046\",\n      \"tradeName\": \"commodo in nisi sed\",\n      \"tradeNames\": [\n        \"dolore\",\n        \"est voluptate\"\n      ],\n      \"updatedAt\": \"1994-02-08T02:58:07.490Z\",\n      \"email\": \"\\\"G])Xm^\\\"@Ebg.20jtwcQCeE.jcGntEYh8.xTE.Kch6uZ.c7DxGc.oc.Oreu.txZ\",\n      \"phone\": \"mollit amet\"\n    }\n  ],\n  \"total\": 1\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "3bfbe0cc-ebb0-4f1a-be8f-021f8c01d4d0",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "coc-number",
                          "value": "{{coc-number}}"
                        },
                        {
                          "key": "coc-branch-number",
                          "value": "{{coc-branch-number}}"
                        },
                        {
                          "key": "trade-name",
                          "value": "{{trade-name}}"
                        },
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "7c8a04f9-49ef-4e7c-a509-615da2f3ed83",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "coc-number",
                          "value": "{{coc-number}}"
                        },
                        {
                          "key": "coc-branch-number",
                          "value": "{{coc-branch-number}}"
                        },
                        {
                          "key": "trade-name",
                          "value": "{{trade-name}}"
                        },
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches?coc-number=<string>&coc-branch-number=<string>&trade-name=<string>&size=<integer>&offset=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(responseData[0], `branches`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(pm.response.json(), `branches`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the branches field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`branches`);\n          let branchesArray = _.get(pm.response.json(), `branches`, \"\");\n          for (let branches_it = 0; branches_it < branchesArray.length; branches_it++) {\n            let iterator = branches_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('branches[${branches_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"branches[${branches_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('branches[${branches_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].phone`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].phone`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocNumber' has 'cocNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocBranchNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocBranchNumber' has 'cocBranchNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocBranchNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'tradeName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].tradeName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].tradeName' has 'tradeName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].tradeName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'eoriNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].eoriNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].eoriNumber' has 'eoriNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].eoriNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'deregistrationDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].deregistrationDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].deregistrationDate' has 'deregistrationDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].deregistrationDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "cdda228e-32f3-494e-bc2e-346b087090c7",
              "name": "Add new Branch. The branch details are checked with the KvK API. If details are incorrect, an error is returned.<br>Required: cocNr  (single br) || (cocNr && city) || cocBranchNr",
              "request": {
                "name": "Add new Branch. The branch details are checked with the KvK API. If details are incorrect, an error is returned.<br>Required: cocNr  (single br) || (cocNr && city) || cocBranchNr",
                "description": {
                  "content": "Add new Branch. The branch details are checked with the KvK API. If details are incorrect, an error is returned.<br>Required: cocNr  (single br) || (cocNr && city) || cocBranchNr",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "recipients",
                    "branches"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "39d2521b-a4b1-426c-88ab-f2bf10d305c4",
                  "name": "successful operation, existing branch returned",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Location of the created resource",
                      "key": "location",
                      "value": "{{location}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"2006-06-03T02:07:56.728Z\",\n  \"deregistrationDate\": \"1985-11-13\",\n  \"eoriNumber\": \"NL954407102\",\n  \"id\": \"dd0f510f-0078-b918-e366-fc834a691662\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"Ut\",\n    \"Lorem veniam\"\n  ],\n  \"updatedAt\": \"1992-04-15T04:09:14.077Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "25ef18f9-353d-412f-accb-0d067c7386c2",
                  "name": "successful operation, branch created",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Location of the created resource",
                      "key": "location",
                      "value": "{{location}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"2006-06-03T02:07:56.728Z\",\n  \"deregistrationDate\": \"1985-11-13\",\n  \"eoriNumber\": \"NL954407102\",\n  \"id\": \"dd0f510f-0078-b918-e366-fc834a691662\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"Ut\",\n    \"Lorem veniam\"\n  ],\n  \"updatedAt\": \"1992-04-15T04:09:14.077Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "2005a4de-a739-4ac6-adfe-6d472882cfd3",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "9ab3fd36-5f35-4740-8f88-79dec8a7f136",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation, existing branch returned\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(responseData[0], `phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(pm.response.json(), `phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(responseData[0], `tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `tradeName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(pm.response.json(), `tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `tradeName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(responseData[0], `tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(pm.response.json(), `tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(responseData[0], `eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `eoriNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `eoriNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(responseData[0], `deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `deregistrationDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(pm.response.json(), `deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `deregistrationDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation, branch created\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(responseData[0], `phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(pm.response.json(), `phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(responseData[0], `tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `tradeName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(pm.response.json(), `tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `tradeName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(responseData[0], `tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(pm.response.json(), `tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(responseData[0], `eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `eoriNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `eoriNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(responseData[0], `deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `deregistrationDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(pm.response.json(), `deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `deregistrationDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "9163315d-80a2-4da6-8dce-a5d56c572464",
              "name": "{id}",
              "item": [
                {
                  "id": "f6fbaaa8-afa1-43e4-9563-279b15fd71bc",
                  "name": "/recipients/branches/:id",
                  "request": {
                    "name": "/recipients/branches/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "branches",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "b965dd63-ef28-4cdf-aff2-3597869449e2",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"2006-06-03T02:07:56.728Z\",\n  \"deregistrationDate\": \"1985-11-13\",\n  \"eoriNumber\": \"NL954407102\",\n  \"id\": \"dd0f510f-0078-b918-e366-fc834a691662\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"Ut\",\n    \"Lorem veniam\"\n  ],\n  \"updatedAt\": \"1992-04-15T04:09:14.077Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "0a7d0140-2fed-493c-a820-f60624943f76",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "967b050b-cd2f-4ee9-aadf-000e7c7e5e3f",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(responseData[0], `branches`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(pm.response.json(), `branches`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the branches field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`branches`);\n          let branchesArray = _.get(pm.response.json(), `branches`, \"\");\n          for (let branches_it = 0; branches_it < branchesArray.length; branches_it++) {\n            let iterator = branches_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('branches[${branches_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"branches[${branches_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('branches[${branches_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].phone`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].phone`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocNumber' has 'cocNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocBranchNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocBranchNumber' has 'cocBranchNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocBranchNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'tradeName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].tradeName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].tradeName' has 'tradeName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].tradeName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'eoriNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].eoriNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].eoriNumber' has 'eoriNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].eoriNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'deregistrationDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].deregistrationDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].deregistrationDate' has 'deregistrationDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].deregistrationDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "277c14d2-6022-4035-b36d-4b2a749267ea",
                  "name": "/recipients/branches/:id",
                  "request": {
                    "name": "/recipients/branches/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "branches",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "cc13a396-6cbc-4a18-92c7-12ffc3432696",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "779b7a37-a341-4038-92e8-2f66955662be",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "8b747312-b38c-4f20-9e4f-b159337c2092",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "1c21fec7-5beb-47c9-8173-274fa25a019e",
                  "name": "/recipients/branches/:id",
                  "request": {
                    "name": "/recipients/branches/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "branches",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [
                    {
                      "id": "fd864357-1959-445e-8b01-478061da2d22",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"2006-06-03T02:07:56.728Z\",\n  \"deregistrationDate\": \"1985-11-13\",\n  \"eoriNumber\": \"NL954407102\",\n  \"id\": \"dd0f510f-0078-b918-e366-fc834a691662\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"Ut\",\n    \"Lorem veniam\"\n  ],\n  \"updatedAt\": \"1992-04-15T04:09:14.077Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "87f1c3c7-d8f2-41a2-91f3-68b18928a218",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "59dbeb2e-cd1a-4139-99e7-0bc7a654e3e3",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches/:id for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(responseData[0], `phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(pm.response.json(), `phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(responseData[0], `tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `tradeName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(pm.response.json(), `tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `tradeName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(responseData[0], `tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(pm.response.json(), `tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(responseData[0], `eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `eoriNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `eoriNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(responseData[0], `deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `deregistrationDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(pm.response.json(), `deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `deregistrationDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "1f7b66d2-8584-4a57-a1bd-667e34532382",
                  "name": "registrations",
                  "item": [
                    {
                      "id": "c937cca7-aaca-47d3-a5ec-f7b102e6b66e",
                      "name": "/recipients/branches/:id/registrations",
                      "request": {
                        "name": "/recipients/branches/:id/registrations",
                        "description": {},
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "disabled": false,
                              "key": "credential-url",
                              "value": "{{credential-url}}",
                              "description": "Filter results on specific Credential (URL)."
                            },
                            {
                              "disabled": false,
                              "key": "size",
                              "value": "{{size}}",
                              "description": "Limit the number of results"
                            },
                            {
                              "disabled": false,
                              "key": "offset",
                              "value": "{{offset}}",
                              "description": "Offset results"
                            }
                          ],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        }
                      },
                      "response": [
                        {
                          "id": "559ec8b1-ad36-40c1-b1b2-977b48e47669",
                          "name": "successful operation",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record count",
                              "key": "page-size",
                              "value": "{{page-size}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record offset",
                              "key": "page-offset",
                              "value": "{{page-offset}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"registrations\": [\n    {\n      \"createdAt\": \"1988-06-18T23:36:14.544Z\",\n      \"credentialUrl\": \"S:/h:AH#D\",\n      \"endDate\": \"1956-03-28\",\n      \"id\": \"3c5b7749-3e3e-f704-b0c7-bcba7b77df4b\",\n      \"issuedAt\": \"1947-12-29T10:39:19.449Z\",\n      \"reference\": \"eiusmod nostrud\",\n      \"startDate\": \"1999-10-22\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1997-10-11\",\n      \"updatedAt\": \"2010-09-07T08:35:14.805Z\"\n    },\n    {\n      \"createdAt\": \"2014-02-27T10:51:59.577Z\",\n      \"credentialUrl\": \"ILq5T0E:/_[\\\"F*Or_J@\",\n      \"endDate\": \"1952-11-02\",\n      \"id\": \"f518feb4-d579-6d1d-98a9-c46f32cb0ab9\",\n      \"issuedAt\": \"1981-03-15T23:10:59.712Z\",\n      \"reference\": \"est eu id\",\n      \"startDate\": \"2014-12-03\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"2015-04-24\",\n      \"updatedAt\": \"1985-02-03T16:56:37.634Z\"\n    }\n  ],\n  \"total\": 1\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "301f3b50-001e-4395-bf0a-cefdd6990249",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "6ed323ca-86fc-429e-a234-da01a7eb6399",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches/:id/registrations?credential-url=<string>&size=<integer>&offset=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(responseData[0], `branches`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(pm.response.json(), `branches`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the branches field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`branches`);\n          let branchesArray = _.get(pm.response.json(), `branches`, \"\");\n          for (let branches_it = 0; branches_it < branchesArray.length; branches_it++) {\n            let iterator = branches_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('branches[${branches_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"branches[${branches_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('branches[${branches_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].phone`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].phone`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocNumber' has 'cocNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocBranchNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocBranchNumber' has 'cocBranchNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocBranchNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'tradeName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].tradeName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].tradeName' has 'tradeName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].tradeName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'eoriNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].eoriNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].eoriNumber' has 'eoriNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].eoriNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'deregistrationDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].deregistrationDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].deregistrationDate' has 'deregistrationDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].deregistrationDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    {
                      "id": "4dc45f37-409c-4cb6-b667-7d959d67a8d3",
                      "name": "Create new Registration for the Recipient",
                      "request": {
                        "name": "Create new Registration for the Recipient",
                        "description": {
                          "content": "Create new Registration for the Recipient",
                          "type": "text/plain"
                        },
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        },
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "response": [
                        {
                          "id": "d098f7ba-c269-4a35-8c95-6a3f40453b91",
                          "name": "Successful",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Created",
                          "code": 201,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Location of the created resource",
                              "key": "location",
                              "value": "{{location}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"createdAt\": \"2015-11-04T23:30:19.559Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"urn:uuid:458c13d2-c305-1bc5-8a52-1c4e2ab31423\",\n  \"issuedAt\": \"1950-05-21T03:48:40.125Z\",\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"2020-08-06\",\n  \"updatedAt\": \"1980-11-28T10:17:20.512Z\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "b491536d-9643-47d0-8fb7-124fc3c3fe06",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "9e25cbdc-1f37-4432-a9f2-8af7496cab6d",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches/:id/registrations for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"Successful\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(responseData[0], `reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(pm.response.json(), `reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `startDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`startDate`)){\n          if(pm.expect(_.get(responseData[0], `startDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `startDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `startDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`startDate`)){\n          if(pm.expect(_.get(pm.response.json(), `startDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `startDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('startDate format to be date',function(){\n                pm.expect(_.get(responseData, \"startDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `endDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`endDate`)){\n          if(pm.expect(_.get(responseData[0], `endDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `endDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `endDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`endDate`)){\n          if(pm.expect(_.get(pm.response.json(), `endDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `endDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('endDate format to be date',function(){\n                pm.expect(_.get(responseData, \"endDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`status`)){\n          if(pm.expect(_.get(responseData[0], `status`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `status`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n          if(pm.expect(_.get(pm.response.json(), `status`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `credentialUrl` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`credentialUrl`)){\n          if(pm.expect(_.get(responseData[0], `credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `credentialUrl`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `credentialUrl` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`credentialUrl`)){\n          if(pm.expect(_.get(pm.response.json(), `credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `credentialUrl`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('credentialUrl has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"credentialUrl\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `suspendedUntil` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`suspendedUntil`)){\n          if(pm.expect(_.get(responseData[0], `suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `suspendedUntil`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `suspendedUntil` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`suspendedUntil`)){\n          if(pm.expect(_.get(pm.response.json(), `suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `suspendedUntil`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('suspendedUntil format to be date',function(){\n                pm.expect(_.get(responseData, \"suspendedUntil\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `issuedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`issuedAt`)){\n          if(pm.expect(_.get(responseData[0], `issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `issuedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `issuedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`issuedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `issuedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('issuedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"issuedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        },
        {
          "id": "a228395f-2333-49c6-b0ae-f3c4a4baef0d",
          "name": "persons",
          "item": [
            {
              "id": "b013e36b-23d5-41fd-b9ec-c0d6d5588410",
              "name": "/recipients/persons",
              "request": {
                "name": "/recipients/persons",
                "description": {},
                "url": {
                  "path": [
                    "recipients",
                    "persons"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "key": "size",
                      "value": "{{size}}",
                      "description": "Limit the number of results"
                    },
                    {
                      "disabled": false,
                      "key": "offset",
                      "value": "{{offset}}",
                      "description": "Offset results"
                    },
                    {
                      "disabled": false,
                      "key": "name",
                      "value": "{{name}}",
                      "description": "Filter results based on Person's name"
                    },
                    {
                      "disabled": false,
                      "key": "birth-date",
                      "value": "{{birth-date}}",
                      "description": "Filter results based on birth date"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "9d41e8c8-977e-4c07-b5d8-242cded5a1ba",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        },
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "birth-date",
                          "value": "{{birth-date}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record count",
                      "key": "page-size",
                      "value": "{{page-size}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record offset",
                      "key": "page-offset",
                      "value": "{{page-offset}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"persons\": [\n    {\n      \"birthDate\": \"2013-04-14\",\n      \"birthPlace\": \"L-{   p{'{ }-'L{{-}p--'.{,p-{} LpL  -}'pp-},}p'{,- \",\n      \"countryCode\": \"FK\",\n      \"createdAt\": \"2022-08-22T17:37:40.267Z\",\n      \"email\": \"<email>\",\n      \"firstName\": \"}- ''-pp.'L}' -{{}'-' L'LL}.'LL{\",\n      \"houseNumber\": \"088359\",\n      \"houseNumberPostfix\": \"MiiUJTtRlxiItnLa\",\n      \"id\": \"urn:uuid:0c0348e4-7660-7e04-bd32-30511ee145ad\",\n      \"initials\": \"CTJH\",\n      \"lastName\": \"p.--p{p-{'.-L {.- -\",\n      \"middleName\": \"  -'.-'{..{\",\n      \"phone\": \"<string>\",\n      \"postalCode\": \"94313\",\n      \"reference\": \"officia ad\",\n      \"updatedAt\": \"1965-04-25T10:53:38.030Z\"\n    },\n    {\n      \"birthDate\": \"1996-10-05\",\n      \"birthPlace\": \"-- p.{. -p}LL.L., }L {,p.p,}LL.LL' },.{L. ,LL'{p}pL-.{'.}'{  .}.'p}p\",\n      \"countryCode\": \"KI\",\n      \"createdAt\": \"1983-08-13T00:53:57.717Z\",\n      \"email\": \"<email>\",\n      \"firstName\": \"LLL.-}L} ..}L- }Lp'pL{}p}'L'L'p''{-pL {{}-} pL\",\n      \"houseNumber\": \"1\",\n      \"houseNumberPostfix\": \"ditfqwOg\",\n      \"id\": \"58b02ed6-6c17-08e9-3357-7648fa69d2c9\",\n      \"initials\": \"HCZC\",\n      \"lastName\": \"p -{.L{L}L.-''} --L  -L Lp{}{ {p-p}-{}}.'\",\n      \"middleName\": \".p p }'-'. L -\",\n      \"phone\": \"<string>\",\n      \"postalCode\": \"2477WU\",\n      \"reference\": \"ipsum sit\",\n      \"updatedAt\": \"2008-06-18T10:33:04.721Z\"\n    }\n  ],\n  \"total\": 1\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "8860acfb-9570-449b-a563-029a5726d231",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        },
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "birth-date",
                          "value": "{{birth-date}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "3d760fd5-d7cc-4b31-b828-30929001cd30",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        },
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "birth-date",
                          "value": "{{birth-date}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons?size=<integer>&offset=<integer>&name=<string>&birth-date=<date> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(responseData[0], `persons`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(pm.response.json(), `persons`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the persons field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`persons`);\n          let personsArray = _.get(pm.response.json(), `persons`, \"\");\n          for (let persons_it = 0; persons_it < personsArray.length; persons_it++) {\n            let iterator = persons_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('persons[${persons_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"persons[${persons_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'initials' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].initials`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].initials`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].initials' has 'initials' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].initials`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].initials`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'firstName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].firstName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].firstName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].firstName' has 'firstName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].firstName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].firstName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'middleName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].middleName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].middleName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].middleName' has 'middleName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].middleName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].middleName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'lastName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].lastName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].lastName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].lastName' has 'lastName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].lastName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].lastName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthDate' has 'birthDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthPlace' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthPlace`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthPlace' has 'birthPlace' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthPlace`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].phone`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].phone`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('persons[${persons_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'postalCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].postalCode`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].postalCode' has 'postalCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].postalCode`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumber' has 'houseNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumberPostfix' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumberPostfix' has 'houseNumberPostfix' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'countryCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].countryCode`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].countryCode' has 'countryCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].countryCode`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'reference' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].reference`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].reference' has 'reference' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].reference`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('persons[${persons_it}].reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"persons[${persons_it}].reference\", \"\").length).to.be.at.most(100);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "b49acc86-a74a-4725-90a0-ca8dfcfd3b9c",
              "name": "/recipients/persons",
              "request": {
                "name": "/recipients/persons",
                "description": {},
                "url": {
                  "path": [
                    "recipients",
                    "persons"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "f11868d0-60ea-4cde-9500-de079a2043c0",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Location of the created resource",
                      "key": "location",
                      "value": "{{location}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"birthDate\": \"<date>\",\n  \"birthPlace\": \"<string>\",\n  \"countryCode\": \"<string>\",\n  \"createdAt\": \"1988-02-23T12:30:41.291Z\",\n  \"email\": \"<email>\",\n  \"firstName\": \"<string>\",\n  \"houseNumber\": \"<string>\",\n  \"houseNumberPostfix\": \"<string>\",\n  \"id\": \"ed824fb1-1c01-7dc0-9648-8174bb9d9168\",\n  \"initials\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"middleName\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"postalCode\": \"<string>\",\n  \"reference\": \"<string>\",\n  \"updatedAt\": \"2014-10-25T06:37:47.770Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "c57b8e86-82fc-4de0-95a1-ec5de86b9447",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "bfd83d62-4608-4c49-8e05-4281775283fe",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`initials`)){\n          if(pm.expect(_.get(responseData[0], `initials`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `initials`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`initials`)){\n          if(pm.expect(_.get(pm.response.json(), `initials`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `initials`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`firstName`)){\n          if(pm.expect(_.get(responseData[0], `firstName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `firstName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`firstName`)){\n          if(pm.expect(_.get(pm.response.json(), `firstName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `firstName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`middleName`)){\n          if(pm.expect(_.get(responseData[0], `middleName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `middleName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`middleName`)){\n          if(pm.expect(_.get(pm.response.json(), `middleName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `middleName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`lastName`)){\n          if(pm.expect(_.get(responseData[0], `lastName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `lastName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`lastName`)){\n          if(pm.expect(_.get(pm.response.json(), `lastName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `lastName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`birthDate`)){\n          if(pm.expect(_.get(responseData[0], `birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `birthDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`birthDate`)){\n          if(pm.expect(_.get(pm.response.json(), `birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `birthDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`birthPlace`)){\n          if(pm.expect(_.get(responseData[0], `birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `birthPlace`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`birthPlace`)){\n          if(pm.expect(_.get(pm.response.json(), `birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `birthPlace`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(responseData[0], `phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(pm.response.json(), `phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`postalCode`)){\n          if(pm.expect(_.get(responseData[0], `postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `postalCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`postalCode`)){\n          if(pm.expect(_.get(pm.response.json(), `postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `postalCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`houseNumber`)){\n          if(pm.expect(_.get(responseData[0], `houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `houseNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `houseNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`houseNumberPostfix`)){\n          if(pm.expect(_.get(responseData[0], `houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumberPostfix`)){\n          if(pm.expect(_.get(pm.response.json(), `houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`countryCode`)){\n          if(pm.expect(_.get(responseData[0], `countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `countryCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`countryCode`)){\n          if(pm.expect(_.get(pm.response.json(), `countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `countryCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(responseData[0], `reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(pm.response.json(), `reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "0c2993cd-22b4-4c44-82a3-d320eb0dc52a",
              "name": "{id}",
              "item": [
                {
                  "id": "df1077b1-e651-4ef4-9d0d-1b10c0a63132",
                  "name": "/recipients/persons/:id",
                  "request": {
                    "name": "/recipients/persons/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "persons",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "bef27414-0208-45eb-a028-a44e05bb4afc",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"birthDate\": \"<date>\",\n  \"birthPlace\": \"<string>\",\n  \"countryCode\": \"<string>\",\n  \"createdAt\": \"1988-02-23T12:30:41.291Z\",\n  \"email\": \"<email>\",\n  \"firstName\": \"<string>\",\n  \"houseNumber\": \"<string>\",\n  \"houseNumberPostfix\": \"<string>\",\n  \"id\": \"ed824fb1-1c01-7dc0-9648-8174bb9d9168\",\n  \"initials\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"middleName\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"postalCode\": \"<string>\",\n  \"reference\": \"<string>\",\n  \"updatedAt\": \"2014-10-25T06:37:47.770Z\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "607313e0-0a0c-4dd9-b154-3dfb09eb3ca0",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "a212d4d1-e0c6-41b2-aab2-a28d73eb2899",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(responseData[0], `persons`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(pm.response.json(), `persons`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the persons field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`persons`);\n          let personsArray = _.get(pm.response.json(), `persons`, \"\");\n          for (let persons_it = 0; persons_it < personsArray.length; persons_it++) {\n            let iterator = persons_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('persons[${persons_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"persons[${persons_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'initials' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].initials`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].initials`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].initials' has 'initials' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].initials`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].initials`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'firstName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].firstName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].firstName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].firstName' has 'firstName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].firstName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].firstName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'middleName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].middleName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].middleName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].middleName' has 'middleName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].middleName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].middleName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'lastName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].lastName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].lastName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].lastName' has 'lastName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].lastName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].lastName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthDate' has 'birthDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthPlace' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthPlace`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthPlace' has 'birthPlace' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthPlace`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].phone`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].phone`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('persons[${persons_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'postalCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].postalCode`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].postalCode' has 'postalCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].postalCode`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumber' has 'houseNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumberPostfix' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumberPostfix' has 'houseNumberPostfix' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'countryCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].countryCode`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].countryCode' has 'countryCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].countryCode`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'reference' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].reference`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].reference' has 'reference' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].reference`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('persons[${persons_it}].reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"persons[${persons_it}].reference\", \"\").length).to.be.at.most(100);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "52b80f1d-350a-4151-8c59-3d7d745a748c",
                  "name": "/recipients/persons/:id",
                  "request": {
                    "name": "/recipients/persons/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "persons",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "e4d36e5f-1276-4c2f-91b2-e4e8c954206f",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "87d4d873-1a89-4c71-8960-b8b5cc8442fb",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "eb9a9c43-a806-4952-a980-f99d6b586578",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "86408209-b2f7-48f3-9126-f6efb82c2c96",
                  "name": "Update a Person. Note: when the VC is issued, these fields cannot be updated anymore:<br/>- initials<br/>- lastName<br/>- birthDate",
                  "request": {
                    "name": "Update a Person. Note: when the VC is issued, these fields cannot be updated anymore:<br/>- initials<br/>- lastName<br/>- birthDate",
                    "description": {
                      "content": "Update a Person. Note: when the VC is issued, these fields cannot be updated anymore:<br/>- initials<br/>- lastName<br/>- birthDate",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "recipients",
                        "persons",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [
                    {
                      "id": "71aa4c78-e7fc-4e8c-bd34-d56fd509efdd",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"birthDate\": \"<date>\",\n  \"birthPlace\": \"<string>\",\n  \"countryCode\": \"<string>\",\n  \"createdAt\": \"1988-02-23T12:30:41.291Z\",\n  \"email\": \"<email>\",\n  \"firstName\": \"<string>\",\n  \"houseNumber\": \"<string>\",\n  \"houseNumberPostfix\": \"<string>\",\n  \"id\": \"ed824fb1-1c01-7dc0-9648-8174bb9d9168\",\n  \"initials\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"middleName\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"postalCode\": \"<string>\",\n  \"reference\": \"<string>\",\n  \"updatedAt\": \"2014-10-25T06:37:47.770Z\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "7a07d91c-95ee-43b6-b355-b12f462a9ed1",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "964716fa-5042-428a-a4d5-f350de6971a9",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons/:id for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`initials`)){\n          if(pm.expect(_.get(responseData[0], `initials`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `initials`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`initials`)){\n          if(pm.expect(_.get(pm.response.json(), `initials`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `initials`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`firstName`)){\n          if(pm.expect(_.get(responseData[0], `firstName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `firstName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`firstName`)){\n          if(pm.expect(_.get(pm.response.json(), `firstName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `firstName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`middleName`)){\n          if(pm.expect(_.get(responseData[0], `middleName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `middleName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`middleName`)){\n          if(pm.expect(_.get(pm.response.json(), `middleName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `middleName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`lastName`)){\n          if(pm.expect(_.get(responseData[0], `lastName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `lastName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`lastName`)){\n          if(pm.expect(_.get(pm.response.json(), `lastName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `lastName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`birthDate`)){\n          if(pm.expect(_.get(responseData[0], `birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `birthDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`birthDate`)){\n          if(pm.expect(_.get(pm.response.json(), `birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `birthDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`birthPlace`)){\n          if(pm.expect(_.get(responseData[0], `birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `birthPlace`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`birthPlace`)){\n          if(pm.expect(_.get(pm.response.json(), `birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `birthPlace`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(responseData[0], `phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(pm.response.json(), `phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`postalCode`)){\n          if(pm.expect(_.get(responseData[0], `postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `postalCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`postalCode`)){\n          if(pm.expect(_.get(pm.response.json(), `postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `postalCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`houseNumber`)){\n          if(pm.expect(_.get(responseData[0], `houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `houseNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `houseNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`houseNumberPostfix`)){\n          if(pm.expect(_.get(responseData[0], `houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumberPostfix`)){\n          if(pm.expect(_.get(pm.response.json(), `houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`countryCode`)){\n          if(pm.expect(_.get(responseData[0], `countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `countryCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`countryCode`)){\n          if(pm.expect(_.get(pm.response.json(), `countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `countryCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(responseData[0], `reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(pm.response.json(), `reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "4feb49b9-788a-4b61-8788-4f393776c14b",
                  "name": "registrations",
                  "item": [
                    {
                      "id": "0fcbadfe-b0c5-4f78-b417-c31a9ccdea85",
                      "name": "/recipients/persons/:id/registrations",
                      "request": {
                        "name": "/recipients/persons/:id/registrations",
                        "description": {},
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "disabled": false,
                              "key": "credential-url",
                              "value": "{{credential-url}}",
                              "description": "Filter results on specific Credential (URL)."
                            },
                            {
                              "disabled": false,
                              "key": "size",
                              "value": "{{size}}",
                              "description": "Limit the number of results"
                            },
                            {
                              "disabled": false,
                              "key": "offset",
                              "value": "{{offset}}",
                              "description": "Offset results"
                            }
                          ],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        }
                      },
                      "response": [
                        {
                          "id": "efdfc3d4-d50f-4952-9cbf-9b5c60b968df",
                          "name": "successful operation",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record count",
                              "key": "page-size",
                              "value": "{{page-size}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record offset",
                              "key": "page-offset",
                              "value": "{{page-offset}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"registrations\": [\n    {\n      \"createdAt\": \"1999-10-15T23:22:17.943Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"urn:uuid:748a095e-1759-56ee-5f72-9dca8d2a038f\",\n      \"issuedAt\": \"1961-12-25T07:32:26.290Z\",\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"2001-09-08\",\n      \"updatedAt\": \"2016-02-17T00:57:52.413Z\"\n    },\n    {\n      \"createdAt\": \"1961-08-17T07:29:00.269Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"urn:uuid:61411ddb-ec15-4da4-89ec-598afe0e025d\",\n      \"issuedAt\": \"1958-01-13T08:53:37.709Z\",\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"2009-04-16\",\n      \"updatedAt\": \"1983-10-06T13:46:26.794Z\"\n    }\n  ],\n  \"total\": 1\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "23df504e-8db8-4e77-b9e2-2982a040bc8f",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "fd237b5f-ce45-43e1-a744-428c3a12316e",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons/:id/registrations?credential-url=<string>&size=<integer>&offset=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(responseData[0], `persons`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(pm.response.json(), `persons`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the persons field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`persons`);\n          let personsArray = _.get(pm.response.json(), `persons`, \"\");\n          for (let persons_it = 0; persons_it < personsArray.length; persons_it++) {\n            let iterator = persons_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('persons[${persons_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"persons[${persons_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'initials' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].initials`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].initials`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].initials' has 'initials' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].initials`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].initials`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'firstName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].firstName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].firstName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].firstName' has 'firstName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].firstName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].firstName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'middleName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].middleName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].middleName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].middleName' has 'middleName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].middleName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].middleName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'lastName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].lastName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].lastName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].lastName' has 'lastName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].lastName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].lastName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthDate' has 'birthDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthPlace' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthPlace`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthPlace' has 'birthPlace' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthPlace`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].phone`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].phone`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('persons[${persons_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'postalCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].postalCode`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].postalCode' has 'postalCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].postalCode`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumber' has 'houseNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumberPostfix' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumberPostfix' has 'houseNumberPostfix' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'countryCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].countryCode`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].countryCode' has 'countryCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].countryCode`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'reference' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].reference`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].reference' has 'reference' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].reference`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('persons[${persons_it}].reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"persons[${persons_it}].reference\", \"\").length).to.be.at.most(100);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    {
                      "id": "1b47052c-294e-4da5-8df7-4cdbce9c42cb",
                      "name": "Create new Registration",
                      "request": {
                        "name": "Create new Registration",
                        "description": {
                          "content": "Create new Registration",
                          "type": "text/plain"
                        },
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        },
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "response": [
                        {
                          "id": "855e9480-bdb1-4c02-889b-55fd7dd7bf6d",
                          "name": "Successful",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Created",
                          "code": 201,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Location of the created resource",
                              "key": "location",
                              "value": "{{location}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"createdAt\": \"2015-11-04T23:30:19.559Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"urn:uuid:458c13d2-c305-1bc5-8a52-1c4e2ab31423\",\n  \"issuedAt\": \"1950-05-21T03:48:40.125Z\",\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"2020-08-06\",\n  \"updatedAt\": \"1980-11-28T10:17:20.512Z\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "3dfbba94-49a7-4348-9da1-e05e921035b6",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "1da76ef4-71f4-44d3-9fc2-e363933e10b5",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons/:id/registrations for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"Successful\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`initials`)){\n          if(pm.expect(_.get(responseData[0], `initials`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `initials`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`initials`)){\n          if(pm.expect(_.get(pm.response.json(), `initials`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `initials`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`firstName`)){\n          if(pm.expect(_.get(responseData[0], `firstName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `firstName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`firstName`)){\n          if(pm.expect(_.get(pm.response.json(), `firstName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `firstName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`middleName`)){\n          if(pm.expect(_.get(responseData[0], `middleName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `middleName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`middleName`)){\n          if(pm.expect(_.get(pm.response.json(), `middleName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `middleName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`lastName`)){\n          if(pm.expect(_.get(responseData[0], `lastName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `lastName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`lastName`)){\n          if(pm.expect(_.get(pm.response.json(), `lastName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `lastName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`birthDate`)){\n          if(pm.expect(_.get(responseData[0], `birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `birthDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`birthDate`)){\n          if(pm.expect(_.get(pm.response.json(), `birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `birthDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`birthPlace`)){\n          if(pm.expect(_.get(responseData[0], `birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `birthPlace`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`birthPlace`)){\n          if(pm.expect(_.get(pm.response.json(), `birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `birthPlace`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(responseData[0], `phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(pm.response.json(), `phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`postalCode`)){\n          if(pm.expect(_.get(responseData[0], `postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `postalCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`postalCode`)){\n          if(pm.expect(_.get(pm.response.json(), `postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `postalCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`houseNumber`)){\n          if(pm.expect(_.get(responseData[0], `houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `houseNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `houseNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`houseNumberPostfix`)){\n          if(pm.expect(_.get(responseData[0], `houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumberPostfix`)){\n          if(pm.expect(_.get(pm.response.json(), `houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`countryCode`)){\n          if(pm.expect(_.get(responseData[0], `countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `countryCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`countryCode`)){\n          if(pm.expect(_.get(pm.response.json(), `countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `countryCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(responseData[0], `reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(pm.response.json(), `reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "da967785-964e-4ef2-a017-f66d7bb3fe2a",
      "name": "registrations",
      "item": [
        {
          "id": "d1952fed-f440-46bf-9355-8f015ba53a55",
          "name": "/registrations",
          "request": {
            "name": "/registrations",
            "description": {},
            "url": {
              "path": [
                "registrations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "size",
                  "value": "{{size}}",
                  "description": "Limit the number of results"
                },
                {
                  "disabled": false,
                  "key": "offset",
                  "value": "{{offset}}",
                  "description": "Offset results"
                },
                {
                  "disabled": false,
                  "key": "recipient-id",
                  "value": "{{recipient-id}}",
                  "description": "Filter results by Recipient ID (UUID)"
                },
                {
                  "disabled": false,
                  "key": "credential-url",
                  "value": "{{credential-url}}",
                  "description": "Filter results on specific Credential (URL)."
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "4c4959eb-9ed1-4e14-a0d3-b6002cbdea9d",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "registrations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    },
                    {
                      "key": "recipient-id",
                      "value": "{{recipient-id}}"
                    },
                    {
                      "key": "credential-url",
                      "value": "{{credential-url}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Response record count",
                  "key": "page-size",
                  "value": "{{page-size}}"
                },
                {
                  "disabled": false,
                  "description": "Response record offset",
                  "key": "page-offset",
                  "value": "{{page-offset}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"registrations\": [\n    {\n      \"createdAt\": \"2003-01-10T18:34:58.752Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"7cda3f87-171e-342f-09ed-b0237e70330f\",\n      \"issuedAt\": \"1990-09-28T19:54:35.836Z\",\n      \"recipient\": {\n        \"id\": \"urn:uuid:9a052664-7bb5-c4ee-b787-50a916727437\",\n        \"name\": \"'.}L{{p}L.'..'{{{p-''} p' {p.L.}{  {-{L.-'}'-{{}p-{'.}p }- --p\",\n        \"type\": \"employee\"\n      },\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"2015-01-06\",\n      \"updatedAt\": \"1964-12-13T06:22:38.055Z\"\n    },\n    {\n      \"createdAt\": \"1948-07-04T21:03:53.651Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"urn:uuid:f4af3a4a-d4fd-1533-fc3a-475c83775ca3\",\n      \"issuedAt\": \"2022-10-05T10:59:48.303Z\",\n      \"recipient\": {\n        \"id\": \"urn:uuid:444f5477-2f25-a0a6-6ffd-a41f60d005e3\",\n        \"name\": \"{{-}p  p{L'{}-.} {L p-p p - Lp{'{{p-'.'p-p'}L{p{}''p'L\",\n        \"type\": \"employee\"\n      },\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1959-02-02\",\n      \"updatedAt\": \"1950-06-10T03:22:09.598Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "61559672-75e2-4ca2-b994-11203bcf62f5",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "registrations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    },
                    {
                      "key": "recipient-id",
                      "value": "{{recipient-id}}"
                    },
                    {
                      "key": "credential-url",
                      "value": "{{credential-url}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "03b66772-bc40-4fa7-90ec-53695d39651e",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "registrations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    },
                    {
                      "key": "recipient-id",
                      "value": "{{recipient-id}}"
                    },
                    {
                      "key": "credential-url",
                      "value": "{{credential-url}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /registrations?size=<integer>&offset=<integer>&recipient-id=<uuid>&credential-url=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `registrations` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`registrations`)){\n              if(pm.expect(_.get(responseData[0], `registrations`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `registrations`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `registrations` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`registrations`)){\n              if(pm.expect(_.get(pm.response.json(), `registrations`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `registrations`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the registrations field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`registrations`);\n          let registrationsArray = _.get(pm.response.json(), `registrations`, \"\");\n          for (let registrations_it = 0; registrations_it < registrationsArray.length; registrations_it++) {\n            let iterator = registrations_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('registrations[${registrations_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'reference' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].reference`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].reference' has 'reference' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].reference`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('registrations[${registrations_it}].reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].reference\", \"\").length).to.be.at.most(100);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'startDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].startDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].startDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].startDate' has 'startDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].startDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].startDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].startDate format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].startDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'endDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].endDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].endDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].endDate' has 'endDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].endDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].endDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].endDate format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].endDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].status`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].status`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'credentialUrl' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].credentialUrl`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].credentialUrl' has 'credentialUrl' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].credentialUrl`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('registrations[${registrations_it}].credentialUrl has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].credentialUrl\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'suspendedUntil' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].suspendedUntil`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].suspendedUntil' has 'suspendedUntil' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].suspendedUntil`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].suspendedUntil format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].suspendedUntil\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'issuedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].issuedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].issuedAt' has 'issuedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].issuedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].issuedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].issuedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'recipient' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient' has 'recipient' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient.id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient.id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient.id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient.id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient.id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('registrations[${registrations_it}].recipient.id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].recipient.id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'name' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient.name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient.name`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient.name' has 'name' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient.name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient.name`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('registrations[${registrations_it}].recipient.name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].recipient.name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'type' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient.type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient.type`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient.type' has 'type' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient.type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient.type`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('registrations[${registrations_it}].recipient.type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].recipient.type\", \"\")).to.include.oneOf([\"branch\",\"person\",\"employee\"]);\n        })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "d6ea106e-3a54-45bf-8447-a908ac23ebf8",
          "name": "{id}",
          "item": [
            {
              "id": "814d1e30-7bef-45c2-b6cf-b8ea078896a4",
              "name": "/registrations/:id",
              "request": {
                "name": "/registrations/:id",
                "description": {},
                "url": {
                  "path": [
                    "registrations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "f70b7074-a3e4-403b-9d30-81ccb977a9b1",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"createdAt\": \"2024-03-06T09:56:14.845Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"340ed869-468a-ef43-f1c1-365a1bc6b9e9\",\n  \"issuedAt\": \"1985-09-30T08:47:06.597Z\",\n  \"recipient\": {\n    \"id\": \"urn:uuid:acdd02e6-1850-1d10-6710-b1f9d166250a\",\n    \"name\": \".L'{.L }p-Lp{{.}p'{.{'-\",\n    \"type\": \"person\"\n  },\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"1997-01-12\",\n  \"updatedAt\": \"1962-12-13T17:35:06.050Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "e6c9fa8a-08d3-42f9-ab4b-d2c94a132abb",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "8364aa6d-4fb3-4c3f-a532-092a0c68e61b",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /registrations/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `registrations` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`registrations`)){\n              if(pm.expect(_.get(responseData[0], `registrations`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `registrations`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `registrations` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`registrations`)){\n              if(pm.expect(_.get(pm.response.json(), `registrations`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `registrations`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the registrations field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`registrations`);\n          let registrationsArray = _.get(pm.response.json(), `registrations`, \"\");\n          for (let registrations_it = 0; registrations_it < registrationsArray.length; registrations_it++) {\n            let iterator = registrations_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('registrations[${registrations_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'reference' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].reference`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].reference' has 'reference' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].reference`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('registrations[${registrations_it}].reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].reference\", \"\").length).to.be.at.most(100);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'startDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].startDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].startDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].startDate' has 'startDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].startDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].startDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].startDate format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].startDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'endDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].endDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].endDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].endDate' has 'endDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].endDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].endDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].endDate format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].endDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].status`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].status`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'credentialUrl' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].credentialUrl`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].credentialUrl' has 'credentialUrl' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].credentialUrl`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('registrations[${registrations_it}].credentialUrl has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].credentialUrl\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'suspendedUntil' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].suspendedUntil`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].suspendedUntil' has 'suspendedUntil' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].suspendedUntil`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].suspendedUntil format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].suspendedUntil\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'issuedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].issuedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].issuedAt' has 'issuedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].issuedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].issuedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].issuedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'recipient' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient' has 'recipient' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient.id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient.id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient.id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient.id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient.id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('registrations[${registrations_it}].recipient.id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].recipient.id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'name' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient.name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient.name`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient.name' has 'name' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient.name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient.name`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('registrations[${registrations_it}].recipient.name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].recipient.name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'type' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient.type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient.type`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient.type' has 'type' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient.type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient.type`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('registrations[${registrations_it}].recipient.type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].recipient.type\", \"\")).to.include.oneOf([\"branch\",\"person\",\"employee\"]);\n        })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "4cbe80aa-c227-4ffc-bb68-8ab5975ac77d",
              "name": "/registrations/:id",
              "request": {
                "name": "/registrations/:id",
                "description": {},
                "url": {
                  "path": [
                    "registrations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "ba73ccc5-1b9e-4e25-8c3c-62b9e8fef23a",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "b23ee1f4-a41a-4f78-aa05-448d3d431a6f",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "b0b9d00f-df35-4deb-9984-2cac91f42f2d",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /registrations/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "62845664-0a92-4fd5-b802-bd6f44a58967",
              "name": "/registrations/:id",
              "request": {
                "name": "/registrations/:id",
                "description": {},
                "url": {
                  "path": [
                    "registrations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": \"{{revoked}}\",\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "1dc2f6ed-ccd2-46f5-8a24-aba2a157bf96",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": false,\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"createdAt\": \"1968-10-27T17:58:11.763Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"9e96338e-5763-08e9-ef4f-3948cb37fd63\",\n  \"issuedAt\": \"1945-04-15T23:15:50.525Z\",\n  \"recipient\": {\n    \"id\": \"63f64563-8a3f-f32e-f3bf-6e4609a3c50b\",\n    \"name\": \".{'L}LLLp'pp'--.. -.' p.-{{-'{}.'.pp'  -\",\n    \"type\": \"employee\"\n  },\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"<date>\",\n  \"updatedAt\": \"2009-06-05T21:58:43.864Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "a75d7133-db36-4b71-bb3f-22314f548130",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": false,\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "7f37d7bb-6cd4-489d-b7fe-ff109efcdd24",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": false,\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /registrations/:id for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(responseData[0], `reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(pm.response.json(), `reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `startDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`startDate`)){\n          if(pm.expect(_.get(responseData[0], `startDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `startDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `startDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`startDate`)){\n          if(pm.expect(_.get(pm.response.json(), `startDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `startDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('startDate format to be date',function(){\n                pm.expect(_.get(responseData, \"startDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `endDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`endDate`)){\n          if(pm.expect(_.get(responseData[0], `endDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `endDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `endDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`endDate`)){\n          if(pm.expect(_.get(pm.response.json(), `endDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `endDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('endDate format to be date',function(){\n                pm.expect(_.get(responseData, \"endDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`status`)){\n          if(pm.expect(_.get(responseData[0], `status`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `status`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n          if(pm.expect(_.get(pm.response.json(), `status`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `credentialUrl` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`credentialUrl`)){\n          if(pm.expect(_.get(responseData[0], `credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `credentialUrl`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `credentialUrl` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`credentialUrl`)){\n          if(pm.expect(_.get(pm.response.json(), `credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `credentialUrl`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('credentialUrl has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"credentialUrl\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `suspendedUntil` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`suspendedUntil`)){\n          if(pm.expect(_.get(responseData[0], `suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `suspendedUntil`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `suspendedUntil` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`suspendedUntil`)){\n          if(pm.expect(_.get(pm.response.json(), `suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `suspendedUntil`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('suspendedUntil format to be date',function(){\n                pm.expect(_.get(responseData, \"suspendedUntil\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `issuedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`issuedAt`)){\n          if(pm.expect(_.get(responseData[0], `issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `issuedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `issuedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`issuedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `issuedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('issuedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"issuedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `recipient` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`recipient`)){\n          if(pm.expect(_.get(responseData[0], `recipient`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `recipient`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `recipient` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`recipient`)){\n          if(pm.expect(_.get(pm.response.json(), `recipient`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `recipient`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `recipient.id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`recipient.id`)){\n          if(pm.expect(_.get(responseData[0], `recipient.id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `recipient.id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `recipient.id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`recipient.id`)){\n          if(pm.expect(_.get(pm.response.json(), `recipient.id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `recipient.id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('recipient.id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"recipient.id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `recipient.name` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`recipient.name`)){\n          if(pm.expect(_.get(responseData[0], `recipient.name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `recipient.name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `recipient.name` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`recipient.name`)){\n          if(pm.expect(_.get(pm.response.json(), `recipient.name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `recipient.name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('recipient.name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"recipient.name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `recipient.type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`recipient.type`)){\n          if(pm.expect(_.get(responseData[0], `recipient.type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `recipient.type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `recipient.type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`recipient.type`)){\n          if(pm.expect(_.get(pm.response.json(), `recipient.type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `recipient.type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('recipient.type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"recipient.type\", \"\")).to.include.oneOf([\"branch\",\"person\",\"employee\"]);\n        })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "a3e75be7-0cf8-45de-bda7-e2978c93e954",
      "name": "/errors",
      "request": {
        "name": "/errors",
        "description": {},
        "url": {
          "path": [
            "errors"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "id": "cb8dc63a-bcfe-48f4-88f6-b8d2e2a01d7c",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "errors"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"description\": \"Descriptive Error Message\",\n    \"error\": \"error/code\"\n  },\n  {\n    \"description\": \"Descriptive Error Message\",\n    \"error\": \"error/code\"\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /errors for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "8f720f66-68f4-40d1-8d7e-6e4db2e53660",
      "name": "/kvk/zoeken",
      "request": {
        "name": "/kvk/zoeken",
        "description": {},
        "url": {
          "path": [
            "kvk",
            "zoeken"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [
            {
              "disabled": false,
              "key": "kvkNummer",
              "value": "{{kvkNummer}}"
            },
            {
              "disabled": false,
              "key": "vestigingsnummer",
              "value": "{{vestigingsnummer}}",
              "description": "Filter results based on reference"
            },
            {
              "disabled": false,
              "key": "handelsnaam",
              "value": "{{handelsnaam}}",
              "description": "Filter results based on reference"
            }
          ],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "key",
              "value": "Token"
            },
            {
              "key": "value",
              "value": "{{apiKey}}"
            },
            {
              "key": "in",
              "value": "header"
            }
          ]
        }
      },
      "response": [
        {
          "id": "7eef633a-258e-400d-bfb1-fb96d170c8f7",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "kvk",
                "zoeken"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "kvkNummer",
                  "value": "{{kvkNummer}}"
                },
                {
                  "key": "vestigingsnummer",
                  "value": "{{vestigingsnummer}}"
                },
                {
                  "key": "handelsnaam",
                  "value": "{{handelsnaam}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "\"See kvk OAS specs\"",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /kvk/zoeken?kvkNummer=<string>&vestigingsnummer=<string>&handelsnaam=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "https://virtserver.swaggerhub.com/credentialregister/wallet/1.0.0",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "b72a43d2-c497-472c-894b-0b74eb0eb0a1",
    "name": "Wallet API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "The Wallet API of the Credential Register.",
      "type": "text/plain"
    }
  }
}