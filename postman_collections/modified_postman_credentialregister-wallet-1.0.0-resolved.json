{
  "item": [
    {
      "id": "f9d62580-7897-4b36-86bc-026d1e26062c",
      "name": "accounts",
      "item": [
        {
          "id": "d3f4dd4d-b0c2-400a-9530-611a55062af6",
          "name": "Create new Account",
          "request": {
            "name": "Create new Account",
            "description": {
              "content": "You will receive an email with OTP",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "accounts"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "disabled": false,
                "description": "Commit Hash of Client Sowftware",
                "key": "commit-hash",
                "value": "{{commit-hash}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "997da983-d6cd-43c8-95bc-366d592a32cb",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "Commit Hash of Client Sowftware",
                    "key": "commit-hash",
                    "value": "{{commit-hash}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Commit Hash",
                  "key": "commit-hash",
                  "value": "{{commit-hash}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "edf30547-7129-4eec-b70d-a2bca1354d14",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "disabled": false,
                    "description": "Commit Hash of Client Sowftware",
                    "key": "commit-hash",
                    "value": "{{commit-hash}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /accounts for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "386a88c3-4f51-4cf9-8fff-df38b1060539",
          "name": "Login to existing Account",
          "request": {
            "name": "Login to existing Account",
            "description": {
              "content": "You will receive an email with OTP",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "accounts"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "auth": null,
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "85dd9b27-2267-4cba-9c92-c8a2a612bdfc",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "0b1dedb5-ea7c-4f5b-af88-cc8ddb57636a",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "accounts"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /accounts for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "0d3b640e-266d-4238-9148-363fb0d5bfec",
      "name": "Login using OTP: creates a session",
      "request": {
        "name": "Login using OTP: creates a session",
        "description": {
          "content": "Returned is a token, which is combined the session-uuid and the account-uuid",
          "type": "text/plain"
        },
        "url": {
          "path": [
            "login"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": null,
        "body": {
          "mode": "raw",
          "raw": "{\n    \"client\": \"{{client}}\",\n    \"email\": \"{{email}}\",\n    \"otp\": \"{{otp}}\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        }
      },
      "response": [
        {
          "id": "b64940f7-1242-4d96-a42d-f076bb67fba7",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"client\": \"{{client}}\",\n    \"email\": \"{{email}}\",\n    \"otp\": \"{{otp}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Created",
          "code": 201,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"token\": \"fcd06a83-38b2-fb9f-071d-15cdeaaee9e5:149ec2f1-1107-22c1-6f12-1c9c6f6fd7f0\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "9805cc26-d2c6-4074-88b7-19e69cec4338",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"client\": \"{{client}}\",\n    \"email\": \"{{email}}\",\n    \"otp\": \"{{otp}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /login for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `token` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`token`)){\n          if(pm.expect(_.get(responseData[0], `token`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `token`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `token` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`token`)){\n          if(pm.expect(_.get(pm.response.json(), `token`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `token`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('token has same pattern as `^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`',function(){ \n          pm.expect(_.get(responseData, \"token\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\n        })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "d36b4243-aea3-4ff5-98a3-d7c9d6348b5a",
      "name": "Logout: delete the session",
      "request": {
        "name": "Logout: delete the session",
        "description": {},
        "url": {
          "path": [
            "logout"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "POST",
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "key",
              "value": "Token"
            },
            {
              "key": "value",
              "value": "{{apiKey}}"
            },
            {
              "key": "in",
              "value": "header"
            }
          ]
        }
      },
      "response": [
        {
          "id": "5be9ed59-1078-4f9c-aaec-09a2884f9ab2",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "logout"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "body": "",
          "cookie": [],
          "_postman_previewlanguage": "text"
        },
        {
          "id": "6fad975d-751a-4b1c-ac6d-f639609b4336",
          "name": "Bad Request",
          "originalRequest": {
            "url": {
              "path": [
                "logout"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {}
          },
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /logout for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "a112972c-d690-4860-9a80-faf5891d0a5c",
      "name": "me",
      "item": [
        {
          "id": "33e66df7-39f0-45f8-a686-6019834be116",
          "name": "my account details",
          "request": {
            "name": "my account details",
            "description": {},
            "url": {
              "path": [
                "me"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "413a6d48-3838-4484-8593-c652220a0f9f",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"1972-01-08T16:28:12.237Z\",\n  \"did\": \"ex veniam qui labor\",\n  \"email\": \"<email>\",\n  \"id\": \"urn:uuid:207a99b2-8283-2caa-c54e-f344b0947e08\",\n  \"image\": \"https://cdn.credentialregiater.com/2571c54e-2cde-4434-83f2-c329f74adc27.png\",\n  \"name\": \"{- L}.}. }. --'LL'}'-.-.-p'-\",\n  \"settings\": {\n    \"irure_d2_\": -72246099.39814584\n  },\n  \"updatedAt\": \"1996-12-20T20:02:19.238Z\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "7683c65c-dd34-4fda-baa6-611126c9b3a1",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "52683045-3ec1-43da-819a-92cffd794cce",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /me for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `did` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`did`)){\n          if(pm.expect(_.get(responseData[0], `did`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `did`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `did` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`did`)){\n          if(pm.expect(_.get(pm.response.json(), `did`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `did`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(responseData[0], `name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(pm.response.json(), `name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `image` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`image`)){\n          if(pm.expect(_.get(responseData[0], `image`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `image`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `image` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`image`)){\n          if(pm.expect(_.get(pm.response.json(), `image`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `image`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('image has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"image\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `settings` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`settings`)){\n          if(pm.expect(_.get(responseData[0], `settings`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `settings`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `settings` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`settings`)){\n          if(pm.expect(_.get(pm.response.json(), `settings`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `settings`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "24c5f313-0c77-48fd-bb97-28696d477617",
          "name": "Change my settings or account name",
          "request": {
            "name": "Change my settings or account name",
            "description": {},
            "url": {
              "path": [
                "me"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "PATCH",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"irure_a\": \"{{irure_a}}\"\n    }\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "8359ec74-ce65-4272-8a57-110b83433c6c",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"nulla21b\": \"{{nulla21b}}\",\n        \"velit_95c\": \"{{velit_95c}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"1972-01-08T16:28:12.237Z\",\n  \"did\": \"ex veniam qui labor\",\n  \"email\": \"<email>\",\n  \"id\": \"urn:uuid:207a99b2-8283-2caa-c54e-f344b0947e08\",\n  \"image\": \"https://cdn.credentialregiater.com/2571c54e-2cde-4434-83f2-c329f74adc27.png\",\n  \"name\": \"{- L}.}. }. --'LL'}'-.-.-p'-\",\n  \"settings\": {\n    \"irure_d2_\": -72246099.39814584\n  },\n  \"updatedAt\": \"1996-12-20T20:02:19.238Z\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "bd39b2a0-74c1-4af0-8036-3119456dd789",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"nulla21b\": \"{{nulla21b}}\",\n        \"velit_95c\": \"{{velit_95c}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "d4436044-2358-4fb6-b09a-30e4f99d9b31",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "me"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"name\": \"{{name}}\",\n    \"image\": \"{{image}}\",\n    \"settings\": {\n        \"nulla21b\": \"{{nulla21b}}\",\n        \"velit_95c\": \"{{velit_95c}}\"\n    }\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /me for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `did` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`did`)){\n          if(pm.expect(_.get(responseData[0], `did`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `did`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `did` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`did`)){\n          if(pm.expect(_.get(pm.response.json(), `did`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `did`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(responseData[0], `name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(pm.response.json(), `name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `image` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`image`)){\n          if(pm.expect(_.get(responseData[0], `image`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `image`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `image` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`image`)){\n          if(pm.expect(_.get(pm.response.json(), `image`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `image`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('image has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"image\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `settings` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`settings`)){\n          if(pm.expect(_.get(responseData[0], `settings`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `settings`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `settings` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`settings`)){\n          if(pm.expect(_.get(pm.response.json(), `settings`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `settings`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "da3a155c-a668-41d4-9fec-d7574a4731f8",
      "name": "credentials",
      "item": [
        {
          "id": "1ebaea46-9b02-48d6-97a3-d3e0b3afd9ad",
          "name": "All credentials in my Wallet",
          "request": {
            "name": "All credentials in my Wallet",
            "description": {},
            "url": {
              "path": [
                "credentials"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "size",
                  "value": "{{size}}",
                  "description": "Limit the number of results"
                },
                {
                  "disabled": false,
                  "key": "offset",
                  "value": "{{offset}}",
                  "description": "Offset results"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "9729efd5-9f8c-46bf-a931-4a18af3615e7",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "credentials"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Response record count",
                  "key": "page-size",
                  "value": "{{page-size}}"
                },
                {
                  "disabled": false,
                  "description": "Response record offset",
                  "key": "page-offset",
                  "value": "{{page-offset}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"credentials\": [\n    {\n      \"createdAt\": \"1959-07-25T14:48:02.007Z\",\n      \"credential\": \"ipsum minim qui\",\n      \"format\": \"ldp_vc\",\n      \"id\": \"urn:uuid:fbf6f6c0-f7d0-e8fa-d04f-df4bd8490c99\",\n      \"status\": \"revoked\",\n      \"statusUpdatedAt\": \"1971-03-30T07:35:25.704Z\"\n    },\n    {\n      \"createdAt\": \"1951-11-13T02:35:22.458Z\",\n      \"credential\": \"voluptate ut\",\n      \"format\": \"jwt_vc_json-ld\",\n      \"id\": \"050df6be-d93e-b53d-5700-0d6d0d146a70\",\n      \"status\": \"active\",\n      \"statusUpdatedAt\": \"2004-06-12T23:57:35.216Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "210d6aa0-636c-4f93-b924-4f4e87469e16",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "credentials"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "49ce0d85-ba70-420e-ad4b-6ba559ecd534",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "credentials"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /credentials?size=<integer>&offset=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `credentials` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`credentials`)){\n              if(pm.expect(_.get(responseData[0], `credentials`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `credentials`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `credentials` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`credentials`)){\n              if(pm.expect(_.get(pm.response.json(), `credentials`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `credentials`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the credentials field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`credentials`);\n          let credentialsArray = _.get(pm.response.json(), `credentials`, \"\");\n          for (let credentials_it = 0; credentials_it < credentialsArray.length; credentials_it++) {\n            let iterator = credentials_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('credentials[${credentials_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'format' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].format`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].format`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].format' has 'format' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].format`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].format`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('credentials[${credentials_it}].format to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials[${credentials_it}].format\", \"\")).to.include.oneOf([\"jwt_vc_json\",\"jwt_vc_json-ld\",\"ldp_vc\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'credential' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].credential`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].credential`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].credential' has 'credential' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].credential`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].credential`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].status`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].status`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('credentials[${credentials_it}].status to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials[${credentials_it}].status\", \"\")).to.include.oneOf([\"active\",\"suspended\",\"revoked\",\"expired\",\"pending\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'statusUpdatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].statusUpdatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].statusUpdatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].statusUpdatedAt' has 'statusUpdatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].statusUpdatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].statusUpdatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('credentials[${credentials_it}].statusUpdatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].statusUpdatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('credentials[${credentials_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "d4ec3b36-0a5e-45d7-bf1e-45f04447a1fd",
          "name": "{id}",
          "item": [
            {
              "id": "8c4ce278-058a-4344-962e-5b18d0e618eb",
              "name": "One credential from my Wallet",
              "request": {
                "name": "One credential from my Wallet",
                "description": {},
                "url": {
                  "path": [
                    "credentials",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "fc6225e0-ce9e-4749-aa16-8d17384d0c65",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"createdAt\": \"1990-09-23T14:42:25.042Z\",\n  \"credential\": \"eu do aute\",\n  \"format\": \"ldp_vc\",\n  \"id\": \"79392f5e-e983-f882-3eee-9edaca868154\",\n  \"status\": \"revoked\",\n  \"statusUpdatedAt\": \"1981-08-30T10:03:54.188Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "b7396053-9891-4d0b-ad5f-8fc9eab5add2",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "09bb486a-9276-4e6b-bf90-8aab19ca0e9e",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /credentials/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `credentials` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`credentials`)){\n              if(pm.expect(_.get(responseData[0], `credentials`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `credentials`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `credentials` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`credentials`)){\n              if(pm.expect(_.get(pm.response.json(), `credentials`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `credentials`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the credentials field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`credentials`);\n          let credentialsArray = _.get(pm.response.json(), `credentials`, \"\");\n          for (let credentials_it = 0; credentials_it < credentialsArray.length; credentials_it++) {\n            let iterator = credentials_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('credentials[${credentials_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'format' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].format`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].format`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].format' has 'format' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].format`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].format`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('credentials[${credentials_it}].format to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials[${credentials_it}].format\", \"\")).to.include.oneOf([\"jwt_vc_json\",\"jwt_vc_json-ld\",\"ldp_vc\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'credential' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].credential`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].credential`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].credential' has 'credential' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].credential`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].credential`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].status`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].status`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('credentials[${credentials_it}].status to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"credentials[${credentials_it}].status\", \"\")).to.include.oneOf([\"active\",\"suspended\",\"revoked\",\"expired\",\"pending\"]);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'statusUpdatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].statusUpdatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].statusUpdatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].statusUpdatedAt' has 'statusUpdatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].statusUpdatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].statusUpdatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('credentials[${credentials_it}].statusUpdatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].statusUpdatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'credentialsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `credentials[${credentials_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`credentials[${credentials_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'credentials[${credentials_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `credentials[${credentials_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`credentials[${credentials_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('credentials[${credentials_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"credentials[${credentials_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "06036927-300a-47fd-99bc-b3d2fbaf43e7",
              "name": "Delete one credential from my Wallet",
              "request": {
                "name": "Delete one credential from my Wallet",
                "description": {},
                "url": {
                  "path": [
                    "credentials",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "efefd59a-78c0-4971-92f3-d82675662a9c",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "6cb29d3c-2df8-41f6-b14c-78ecd3fb8c33",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "d9aadc39-4d0a-4c05-a7c0-8b7f7215a2d0",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "credentials",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /credentials/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "60d175e5-bdbc-42d1-ada8-99660127f613",
      "name": "Retrieve accounts with granted access permissions",
      "request": {
        "name": "Retrieve accounts with granted access permissions",
        "description": {},
        "url": {
          "path": [
            "grants"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "key",
              "value": "Token"
            },
            {
              "key": "value",
              "value": "{{apiKey}}"
            },
            {
              "key": "in",
              "value": "header"
            }
          ]
        }
      },
      "response": [
        {
          "id": "e6778cee-bc66-4583-9d18-b22924b57bfb",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "grants"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"grants\": [\n    {\n      \"account\": {\n        \"email\": \"<email>\",\n        \"id\": \"cf483cb3-21d8-547e-43bb-afeec5bd8cac\",\n        \"image\": \"data:image/jpeg;base64,<clipped>\",\n        \"name\": \"}.{.}}}L..{.   }\"\n      },\n      \"createdAt\": \"1953-01-26T07:27:22.965Z\",\n      \"id\": \"4bcdd292-b20d-9b79-c50a-9656f2aeb035\",\n      \"token\": \"3559a40e-1f13-a17c-4028-45c7b5a362d7:d2210b7d-bd2d-8939-edf6-0cdbe268a441\",\n      \"updatedAt\": \"1970-12-01T08:13:18.915Z\"\n    },\n    {\n      \"account\": {\n        \"email\": \"<email>\",\n        \"id\": \"61602c79-b6a9-1c65-0286-f9d11dd59452\",\n        \"image\": \"data:image/jpeg;base64,<clipped>\",\n        \"name\": \"'}.Lp{{'-L }'.-'.}'{ .L.}{- {}-L}'p''{{'pp- L .p{}\"\n      },\n      \"createdAt\": \"2022-05-09T21:52:12.027Z\",\n      \"id\": \"3bb63193-cf36-ffc1-ec4c-49083c5dfc73\",\n      \"token\": \"1a5ab447-a713-6194-96f7-7b12db8e3f41:e8f0d460-f066-e13b-f3a3-30ea103cbcc3\",\n      \"updatedAt\": \"1984-11-23T15:06:06.618Z\"\n    }\n  ],\n  \"total\": 1\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        },
        {
          "id": "f2558d62-add6-4e62-8b5c-25352fce033e",
          "name": "Authentication Required",
          "originalRequest": {
            "url": {
              "path": [
                "grants"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /grants for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `grants` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`grants`)){\n              if(pm.expect(_.get(responseData[0], `grants`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `grants`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `grants` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`grants`)){\n              if(pm.expect(_.get(pm.response.json(), `grants`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `grants`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the grants field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`grants`);\n          let grantsArray = _.get(pm.response.json(), `grants`, \"\");\n          for (let grants_it = 0; grants_it < grantsArray.length; grants_it++) {\n            let iterator = grants_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('grants[${grants_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"grants[${grants_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'token' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].token`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].token`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].token' has 'token' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].token`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].token`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('grants[${grants_it}].token has same pattern as `^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`',function(){ \n          pm.expect(_.get(responseData, \"grants[${grants_it}].token\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('grants[${grants_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"grants[${grants_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('grants[${grants_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"grants[${grants_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'account' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].account`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].account`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].account' has 'account' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].account`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].account`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].account.id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].account.id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].account.id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].account.id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].account.id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('grants[${grants_it}].account.id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"grants[${grants_it}].account.id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'name' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].account.name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].account.name`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].account.name' has 'name' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].account.name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].account.name`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('grants[${grants_it}].account.name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"grants[${grants_it}].account.name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'image' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].account.image`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].account.image`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].account.image' has 'image' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].account.image`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].account.image`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'grantsArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `grants[${grants_it}].account.email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`grants[${grants_it}].account.email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'grants[${grants_it}].account.email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `grants[${grants_it}].account.email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`grants[${grants_it}].account.email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('grants[${grants_it}].account.email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"grants[${grants_it}].account.email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('grants[${grants_it}].account.email format to be email',function(){ \n                pm.expect(_.get(responseData, \"grants[${grants_it}].account.email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "99640a75-d31f-43c0-be9f-dc670dba850b",
      "name": "authorizations",
      "item": [
        {
          "id": "a358f923-01bd-4292-aeb1-9108954161a0",
          "name": "List accounts who have access to my account",
          "request": {
            "name": "List accounts who have access to my account",
            "description": {},
            "url": {
              "path": [
                "authorizations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "970523f9-8b6b-42fb-89e1-40e0dfeebfd8",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"authorizations\": [\n    {\n      \"createdAt\": \"2007-01-23T00:48:08.974Z\",\n      \"email\": \"<email>\",\n      \"id\": \"92bc4209-96f3-d8a2-5ffa-210c8937feda\",\n      \"name\": \". p}} 'pL'L..L.-'LpLLpL.LL{.p L' .Lp}- -..'}p.p.L{ {...LL L'.pL'{} -  {'}{-}-p}-\",\n      \"updatedAt\": \"1948-02-20T09:09:22.421Z\"\n    },\n    {\n      \"createdAt\": \"1963-07-23T19:17:41.460Z\",\n      \"email\": \"<email>\",\n      \"id\": \"urn:uuid:00c534e3-09b7-fdf1-4ebe-7fc0d5b3f537\",\n      \"name\": \"pL'} Lp-Lp{'.}LL\",\n      \"updatedAt\": \"2003-05-01T01:49:20.121Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "99a689ba-44e4-44a4-9b58-ace5bfd8e5cc",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "96fff776-7493-4f6b-af40-e9d6a25e3e27",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /authorizations for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `authorizations` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`authorizations`)){\n              if(pm.expect(_.get(responseData[0], `authorizations`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `authorizations`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `authorizations` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`authorizations`)){\n              if(pm.expect(_.get(pm.response.json(), `authorizations`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `authorizations`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the authorizations field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`authorizations`);\n          let authorizationsArray = _.get(pm.response.json(), `authorizations`, \"\");\n          for (let authorizations_it = 0; authorizations_it < authorizationsArray.length; authorizations_it++) {\n            let iterator = authorizations_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'authorizationsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `authorizations[${authorizations_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`authorizations[${authorizations_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'authorizations[${authorizations_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `authorizations[${authorizations_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`authorizations[${authorizations_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('authorizations[${authorizations_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"authorizations[${authorizations_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'authorizationsArray' has 'name' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `authorizations[${authorizations_it}].name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`authorizations[${authorizations_it}].name`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'authorizations[${authorizations_it}].name' has 'name' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `authorizations[${authorizations_it}].name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`authorizations[${authorizations_it}].name`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('authorizations[${authorizations_it}].name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"authorizations[${authorizations_it}].name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'authorizationsArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `authorizations[${authorizations_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`authorizations[${authorizations_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'authorizations[${authorizations_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `authorizations[${authorizations_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`authorizations[${authorizations_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('authorizations[${authorizations_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"authorizations[${authorizations_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('authorizations[${authorizations_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"authorizations[${authorizations_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'authorizationsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `authorizations[${authorizations_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`authorizations[${authorizations_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'authorizations[${authorizations_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `authorizations[${authorizations_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`authorizations[${authorizations_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('authorizations[${authorizations_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"authorizations[${authorizations_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'authorizationsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `authorizations[${authorizations_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`authorizations[${authorizations_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'authorizations[${authorizations_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `authorizations[${authorizations_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`authorizations[${authorizations_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('authorizations[${authorizations_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"authorizations[${authorizations_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "8770c852-319e-4a5f-b99c-64859bd49891",
          "name": "Authorize another existing Account to access my Account",
          "request": {
            "name": "Authorize another existing Account to access my Account",
            "description": {},
            "url": {
              "path": [
                "authorizations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            },
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{email}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [
            {
              "id": "4a9c01f5-f0ca-494d-a0d8-a7dd81408395",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Location of the created resource",
                  "key": "location",
                  "value": "{{location}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"2014-04-29T14:51:50.018Z\",\n  \"email\": \"<email>\",\n  \"id\": \"e933a9a4-9e44-2e32-dc6e-8919455f5d1d\",\n  \"name\": \"p--' 'L'{}{L''-'{ppp. {pp { }'Lp-p \",\n  \"updatedAt\": \"1989-07-01T14:45:58.846Z\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "b76fdb68-dc14-475a-903e-88851be2c032",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "1604c557-ebcc-41d2-b415-6fd4aed8215f",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /authorizations for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(responseData[0], `name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `name` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`name`)){\n          if(pm.expect(_.get(pm.response.json(), `name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "94db6269-a7d7-4642-90c3-d708a11df28e",
          "name": "Remove Authorized Account",
          "request": {
            "name": "Remove Authorized Account",
            "description": {},
            "url": {
              "path": [
                "authorizations",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) UUID"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "43c25511-ffa0-4f46-8f54-2203129b4eea",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "93e1fd09-95fc-46a0-b4db-1cfdf5c96266",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "cc6e109d-ea9e-4f9a-a9b5-469b861961c3",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "authorizations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /authorizations/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "557d1c13-94ce-4e4c-83fd-ea958f48bea0",
      "name": "apikeys",
      "item": [
        {
          "id": "f980d376-fd0d-4de4-a5f4-a0eef88d091d",
          "name": "List API Keys you have created (session.type = 4)",
          "request": {
            "name": "List API Keys you have created (session.type = 4)",
            "description": {
              "content": "API keys to access your account via the API. API Keys are a session record with session.type equal to 4.",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "apikeys"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "8c3afa12-5c2b-4a25-b39e-04ccb47d0c23",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"apikeys\": [\n    {\n      \"createdAt\": \"1975-12-16T16:22:04.241Z\",\n      \"id\": \"0a119257-af61-613d-4b06-8b924e2c496c\"\n    },\n    {\n      \"createdAt\": \"2017-02-15T08:19:16.365Z\",\n      \"id\": \"239d0311-1a3c-618b-e1cd-89e8f4102719\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "899c276b-9795-4c90-b8c3-2d4d28ceb11c",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "6b9f6d5b-725e-4cda-8c4e-205df064f30e",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /apikeys for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `apikeys` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`apikeys`)){\n              if(pm.expect(_.get(responseData[0], `apikeys`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `apikeys`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `apikeys` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`apikeys`)){\n              if(pm.expect(_.get(pm.response.json(), `apikeys`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `apikeys`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the apikeys field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`apikeys`);\n          let apikeysArray = _.get(pm.response.json(), `apikeys`, \"\");\n          for (let apikeys_it = 0; apikeys_it < apikeysArray.length; apikeys_it++) {\n            let iterator = apikeys_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'apikeysArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `apikeys[${apikeys_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`apikeys[${apikeys_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'apikeys[${apikeys_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `apikeys[${apikeys_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`apikeys[${apikeys_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('apikeys[${apikeys_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"apikeys[${apikeys_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'apikeysArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `apikeys[${apikeys_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`apikeys[${apikeys_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'apikeys[${apikeys_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `apikeys[${apikeys_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`apikeys[${apikeys_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('apikeys[${apikeys_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"apikeys[${apikeys_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "af3ee56e-ed48-4c27-bf04-899893c911a1",
          "name": "Create API Key (Create Session with type = 4)",
          "request": {
            "name": "Create API Key (Create Session with type = 4)",
            "description": {},
            "url": {
              "path": [
                "apikeys"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "767551d0-a8be-4d24-bf26-b5748d2142c9",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Created",
              "code": 201,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Location of the created resource",
                  "key": "location",
                  "value": "{{location}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"createdAt\": \"1982-10-12T10:46:47.483Z\",\n  \"id\": \"acdfbfe7-7a3d-c9a7-65e0-bc5612a317ec\",\n  \"token\": \"16ad3886-442e-1acc-ac97-57663d898b17:4495bcf9-acf3-191c-c1b5-9c84564cd5d5\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "f373f5f9-c073-432a-b078-2ecd665d22e5",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "95b8dba1-4175-472e-a9fc-67ed43621429",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /apikeys for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `token` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`token`)){\n          if(pm.expect(_.get(responseData[0], `token`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `token`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `token` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`token`)){\n          if(pm.expect(_.get(pm.response.json(), `token`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `token`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('token has same pattern as `^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$`',function(){ \n          pm.expect(_.get(responseData, \"token\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "f7a14fa2-c44f-45ab-9616-92d6d6f08a30",
          "name": "/apikeys/:id",
          "request": {
            "name": "/apikeys/:id",
            "description": {},
            "url": {
              "path": [
                "apikeys",
                ":id"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": [
                {
                  "disabled": false,
                  "type": "any",
                  "value": "{{id}}",
                  "key": "id",
                  "description": "(Required) UUID"
                }
              ]
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "DELETE",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "dd959646-a433-445d-9985-90f0b8b41c7f",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            },
            {
              "id": "82c1a65a-ded7-495b-b43b-15596b8c22bb",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "1e80d1bd-1d4e-4c29-a4c8-db81dd4646fd",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "apikeys",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /apikeys/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        }
      ],
      "event": []
    },
    {
      "id": "b434b338-483a-4381-afc8-fc8837163594",
      "name": "recipients",
      "item": [
        {
          "id": "bedcebe8-e5ce-477b-9819-5bccfa7d7978",
          "name": "branches",
          "item": [
            {
              "id": "dd0349dc-6319-4e9b-9f33-ccdb923803ae",
              "name": "/recipients/branches",
              "request": {
                "name": "/recipients/branches",
                "description": {},
                "url": {
                  "path": [
                    "recipients",
                    "branches"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "key": "coc-number",
                      "value": "{{coc-number}}",
                      "description": "Filter the results on the Chamber of Commerce number (Kamer van Koophandel nummer). This could return multiple results, as there could be multiple Branches."
                    },
                    {
                      "disabled": false,
                      "key": "coc-branch-number",
                      "value": "{{coc-branch-number}}",
                      "description": "Filter the results on the Chamber of Commerce Branch number (Kamer van Koophandel vestigingsnummer). This should only return a single result."
                    },
                    {
                      "disabled": false,
                      "key": "trade-name",
                      "value": "{{trade-name}}",
                      "description": "Filter the results on the Tradename of the organization."
                    },
                    {
                      "disabled": false,
                      "key": "size",
                      "value": "{{size}}",
                      "description": "Limit the number of results"
                    },
                    {
                      "disabled": false,
                      "key": "offset",
                      "value": "{{offset}}",
                      "description": "Offset results"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "8c9815ec-c47c-4df9-a6c3-98418e4e03f5",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "coc-number",
                          "value": "{{coc-number}}"
                        },
                        {
                          "key": "coc-branch-number",
                          "value": "{{coc-branch-number}}"
                        },
                        {
                          "key": "trade-name",
                          "value": "{{trade-name}}"
                        },
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record count",
                      "key": "page-size",
                      "value": "{{page-size}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record offset",
                      "key": "page-offset",
                      "value": "{{page-offset}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"branches\": [\n    {\n      \"cocBranchNumber\": \"953574563896\",\n      \"cocNumber\": \"55874746\",\n      \"createdAt\": \"2007-06-12T00:35:19.817Z\",\n      \"deregistrationDate\": \"1952-05-09\",\n      \"eoriNumber\": \"NL548277552\",\n      \"id\": \"47f905be-d3e3-580d-83c7-ff3d18528ac1\",\n      \"tradeName\": \"non sint veniam consectetur\",\n      \"tradeNames\": [\n        \"ullamc\",\n        \"anim adipisicing aliquip\"\n      ],\n      \"updatedAt\": \"1960-06-15T18:01:19.562Z\",\n      \"email\": \"\\\"Q'p?D\\\"@[17.201.354.00]\",\n      \"phone\": \"si\"\n    },\n    {\n      \"cocBranchNumber\": \"885523608787\",\n      \"cocNumber\": \"54796892\",\n      \"createdAt\": \"1956-05-23T17:57:04.522Z\",\n      \"deregistrationDate\": \"2005-05-25\",\n      \"eoriNumber\": \"NL599209735\",\n      \"id\": \"1dd846b2-715e-c55f-d77e-52c00eded37a\",\n      \"tradeName\": \"veniam adipisicing\",\n      \"tradeNames\": [\n        \"qui id esse in officia\",\n        \"adipisicing anim sit\"\n      ],\n      \"updatedAt\": \"1959-04-14T04:33:13.902Z\",\n      \"email\": \"\\\"JcZ)08\\\"@aEUDA.QUai3f44n.Rt0zwn.1R.Lju1tG0r.yWLSzwetmIH.KLXJk4.ASV1SD5.VHyIPIlm8S.QjoE\",\n      \"phone\": \"deserunt incididunt\"\n    }\n  ],\n  \"total\": 1\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "be6ed868-2af1-4966-8fdd-aa0b3b4afe58",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "coc-number",
                          "value": "{{coc-number}}"
                        },
                        {
                          "key": "coc-branch-number",
                          "value": "{{coc-branch-number}}"
                        },
                        {
                          "key": "trade-name",
                          "value": "{{trade-name}}"
                        },
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "f4c679d4-484f-4560-ac8c-e2a6f8eb554b",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "coc-number",
                          "value": "{{coc-number}}"
                        },
                        {
                          "key": "coc-branch-number",
                          "value": "{{coc-branch-number}}"
                        },
                        {
                          "key": "trade-name",
                          "value": "{{trade-name}}"
                        },
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches?coc-number=<string>&coc-branch-number=<string>&trade-name=<string>&size=<integer>&offset=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(responseData[0], `branches`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(pm.response.json(), `branches`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the branches field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`branches`);\n          let branchesArray = _.get(pm.response.json(), `branches`, \"\");\n          for (let branches_it = 0; branches_it < branchesArray.length; branches_it++) {\n            let iterator = branches_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('branches[${branches_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"branches[${branches_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('branches[${branches_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].phone`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].phone`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocNumber' has 'cocNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocBranchNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocBranchNumber' has 'cocBranchNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocBranchNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'tradeName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].tradeName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].tradeName' has 'tradeName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].tradeName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'eoriNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].eoriNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].eoriNumber' has 'eoriNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].eoriNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'deregistrationDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].deregistrationDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].deregistrationDate' has 'deregistrationDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].deregistrationDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "d53b3829-e5c6-4863-afb7-b80c2e68aaf6",
              "name": "Add new Branch. The branch details are checked with the KvK API. If details are incorrect, an error is returned.<br>Required: cocNr  (single br) || (cocNr && city) || cocBranchNr",
              "request": {
                "name": "Add new Branch. The branch details are checked with the KvK API. If details are incorrect, an error is returned.<br>Required: cocNr  (single br) || (cocNr && city) || cocBranchNr",
                "description": {
                  "content": "Add new Branch. The branch details are checked with the KvK API. If details are incorrect, an error is returned.<br>Required: cocNr  (single br) || (cocNr && city) || cocBranchNr",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "recipients",
                    "branches"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PUT",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "fc9dc0bb-29c7-4de4-b671-8cee62adbbf6",
                  "name": "successful operation, existing branch returned",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Location of the created resource",
                      "key": "location",
                      "value": "{{location}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"1949-05-19T04:41:54.082Z\",\n  \"deregistrationDate\": \"1999-01-23\",\n  \"eoriNumber\": \"NL787987146\",\n  \"id\": \"urn:uuid:0e3201ca-38c4-9706-9f9d-11574434b109\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"quis qui voluptate nostrud mollit\",\n    \"ullamco fugiat\"\n  ],\n  \"updatedAt\": \"1997-10-13T03:01:01.733Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "df0d97e1-5f81-4a9f-83d6-4d463ce359dd",
                  "name": "successful operation, branch created",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Location of the created resource",
                      "key": "location",
                      "value": "{{location}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"1949-05-19T04:41:54.082Z\",\n  \"deregistrationDate\": \"1999-01-23\",\n  \"eoriNumber\": \"NL787987146\",\n  \"id\": \"urn:uuid:0e3201ca-38c4-9706-9f9d-11574434b109\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"quis qui voluptate nostrud mollit\",\n    \"ullamco fugiat\"\n  ],\n  \"updatedAt\": \"1997-10-13T03:01:01.733Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "86cd7d26-da6e-4d6b-b856-94ec4188fdaa",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "f2a6eb99-7843-4b79-8d9b-83b49832c164",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "branches"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PUT",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"cocNumber\": \"{{cocNumber}}\",\n    \"cocBranchNumber\": \"{{cocBranchNumber}}\",\n    \"city\": \"{{city}}\",\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation, existing branch returned\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(responseData[0], `phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(pm.response.json(), `phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(responseData[0], `tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `tradeName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(pm.response.json(), `tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `tradeName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(responseData[0], `tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(pm.response.json(), `tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(responseData[0], `eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `eoriNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `eoriNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(responseData[0], `deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `deregistrationDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(pm.response.json(), `deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `deregistrationDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation, branch created\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(responseData[0], `phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(pm.response.json(), `phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(responseData[0], `tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `tradeName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(pm.response.json(), `tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `tradeName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(responseData[0], `tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(pm.response.json(), `tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(responseData[0], `eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `eoriNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `eoriNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(responseData[0], `deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `deregistrationDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(pm.response.json(), `deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `deregistrationDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "a26106d9-aad4-41ea-ad9a-a96628c252fc",
              "name": "{id}",
              "item": [
                {
                  "id": "adf625e0-2c52-48ab-91e9-ac6b96f49a18",
                  "name": "/recipients/branches/:id",
                  "request": {
                    "name": "/recipients/branches/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "branches",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "d7e09176-a671-41da-a222-94271cb30eba",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"1949-05-19T04:41:54.082Z\",\n  \"deregistrationDate\": \"1999-01-23\",\n  \"eoriNumber\": \"NL787987146\",\n  \"id\": \"urn:uuid:0e3201ca-38c4-9706-9f9d-11574434b109\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"quis qui voluptate nostrud mollit\",\n    \"ullamco fugiat\"\n  ],\n  \"updatedAt\": \"1997-10-13T03:01:01.733Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "edbc0a7c-2ddc-4d12-81a6-2cbbae13a2bc",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "4e898583-7875-48a2-8f00-ddb74db57ff2",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(responseData[0], `branches`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(pm.response.json(), `branches`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the branches field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`branches`);\n          let branchesArray = _.get(pm.response.json(), `branches`, \"\");\n          for (let branches_it = 0; branches_it < branchesArray.length; branches_it++) {\n            let iterator = branches_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('branches[${branches_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"branches[${branches_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('branches[${branches_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].phone`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].phone`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocNumber' has 'cocNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocBranchNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocBranchNumber' has 'cocBranchNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocBranchNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'tradeName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].tradeName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].tradeName' has 'tradeName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].tradeName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'eoriNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].eoriNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].eoriNumber' has 'eoriNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].eoriNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'deregistrationDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].deregistrationDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].deregistrationDate' has 'deregistrationDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].deregistrationDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "d3330037-5323-4a7b-97f8-90375b89d2fd",
                  "name": "/recipients/branches/:id",
                  "request": {
                    "name": "/recipients/branches/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "branches",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "d9cf6f27-82a2-4e5e-a586-88bea3b0b6c1",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "8d010cdd-1c81-462f-9e81-11b1864d9ebc",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "add69a3c-ab34-4663-95ba-4dc6eb9a6e2e",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "cdccd504-4e84-4d34-89a1-ed9525de60aa",
                  "name": "/recipients/branches/:id",
                  "request": {
                    "name": "/recipients/branches/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "branches",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [
                    {
                      "id": "342650fb-54aa-4f1a-99f2-57681d7d6430",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"cocBranchNumber\": \"<string>\",\n  \"cocNumber\": \"<string>\",\n  \"createdAt\": \"1949-05-19T04:41:54.082Z\",\n  \"deregistrationDate\": \"1999-01-23\",\n  \"eoriNumber\": \"NL787987146\",\n  \"id\": \"urn:uuid:0e3201ca-38c4-9706-9f9d-11574434b109\",\n  \"tradeName\": \"<string>\",\n  \"tradeNames\": [\n    \"quis qui voluptate nostrud mollit\",\n    \"ullamco fugiat\"\n  ],\n  \"updatedAt\": \"1997-10-13T03:01:01.733Z\",\n  \"email\": \"<email>\",\n  \"phone\": \"<string>\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "250afc78-d014-49dd-9a27-fff3e765de1c",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "74030954-2b2c-4535-a4e0-b67ea1d53ec9",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"tradeName\": \"{{tradeName}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches/:id for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(responseData[0], `phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(pm.response.json(), `phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(responseData[0], `cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `cocBranchNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`cocBranchNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(responseData[0], `tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `tradeName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `tradeName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`tradeName`)){\n          if(pm.expect(_.get(pm.response.json(), `tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `tradeName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(responseData[0], `tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `tradeNames` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`tradeNames`)){\n              if(pm.expect(_.get(pm.response.json(), `tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `tradeNames`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(responseData[0], `eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `eoriNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `eoriNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`eoriNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `eoriNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(responseData[0], `deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `deregistrationDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `deregistrationDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`deregistrationDate`)){\n          if(pm.expect(_.get(pm.response.json(), `deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `deregistrationDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "451549fd-52f0-46dc-a504-208e6dfcdb42",
                  "name": "registrations",
                  "item": [
                    {
                      "id": "8598f41b-3cf6-499c-bde6-727541325a03",
                      "name": "/recipients/branches/:id/registrations",
                      "request": {
                        "name": "/recipients/branches/:id/registrations",
                        "description": {},
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "disabled": false,
                              "key": "credential-url",
                              "value": "{{credential-url}}",
                              "description": "Filter results on specific Credential (URL)."
                            },
                            {
                              "disabled": false,
                              "key": "size",
                              "value": "{{size}}",
                              "description": "Limit the number of results"
                            },
                            {
                              "disabled": false,
                              "key": "offset",
                              "value": "{{offset}}",
                              "description": "Offset results"
                            }
                          ],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        }
                      },
                      "response": [
                        {
                          "id": "5476e788-ae17-496a-8da5-f312ce0e0b97",
                          "name": "successful operation",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record count",
                              "key": "page-size",
                              "value": "{{page-size}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record offset",
                              "key": "page-offset",
                              "value": "{{page-offset}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"registrations\": [\n    {\n      \"createdAt\": \"1967-09-29T13:59:21.129Z\",\n      \"credentialUrl\": \"1e4X:T_~{uP\",\n      \"endDate\": \"2017-06-03\",\n      \"id\": \"6dc707fd-da24-be59-8dff-43a00daa905f\",\n      \"issuedAt\": \"2016-09-17T03:40:20.508Z\",\n      \"reference\": \"dolor irure tempor minim aliqua\",\n      \"startDate\": \"1977-03-14\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1979-08-17\",\n      \"updatedAt\": \"2011-08-19T07:00:53.906Z\"\n    },\n    {\n      \"createdAt\": \"1963-02-07T08:56:19.025Z\",\n      \"credentialUrl\": \"stCUAS://7]6yl%`[\",\n      \"endDate\": \"1974-02-22\",\n      \"id\": \"e231d7b1-000c-4f48-64f2-1c9402559022\",\n      \"issuedAt\": \"1952-02-25T10:50:39.646Z\",\n      \"reference\": \"id adipisicing aliquip mollit in\",\n      \"startDate\": \"1973-11-08\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1944-04-25\",\n      \"updatedAt\": \"1979-11-26T08:32:36.429Z\"\n    }\n  ],\n  \"total\": 1\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "ba20ecb8-0ad4-472f-bbd9-3ef38b0471d4",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "21beaa4c-c27b-4fb5-bc08-90adabad6669",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches/:id/registrations?credential-url=<string>&size=<integer>&offset=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(responseData[0], `branches`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `branches` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`branches`)){\n              if(pm.expect(_.get(pm.response.json(), `branches`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the branches field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`branches`);\n          let branchesArray = _.get(pm.response.json(), `branches`, \"\");\n          for (let branches_it = 0; branches_it < branchesArray.length; branches_it++) {\n            let iterator = branches_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('branches[${branches_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"branches[${branches_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('branches[${branches_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"branches[${branches_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].phone`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].phone`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocNumber' has 'cocNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocNumber has same pattern as `^\\d{8}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocNumber\", \"\")).to.match(/^\\d{8}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'cocBranchNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].cocBranchNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].cocBranchNumber' has 'cocBranchNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].cocBranchNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].cocBranchNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].cocBranchNumber has same pattern as `^\\d{12}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].cocBranchNumber\", \"\")).to.match(/^\\d{12}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'tradeName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].tradeName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].tradeName' has 'tradeName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].tradeName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n        if(Array.isArray(responseData)) {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(responseData[0], `branches[${branches_it}].tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        } else {\n          pm.test(`${iterator} element of array 'branchesArray' has 'tradeNames' as an array`,function(){ \n              if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `branches[${branches_it}].tradeNames`))).to.equal(true);\n              }\n          })\n        }\n        \n\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'eoriNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].eoriNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].eoriNumber' has 'eoriNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].eoriNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].eoriNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('branches[${branches_it}].eoriNumber has same pattern as `^NL\\d{9}$`',function(){ \n          pm.expect(_.get(responseData, \"branches[${branches_it}].eoriNumber\", \"\")).to.match(/^NL\\d{9}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'deregistrationDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].deregistrationDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].deregistrationDate' has 'deregistrationDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].deregistrationDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].deregistrationDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].deregistrationDate format to be date',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].deregistrationDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'branchesArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `branches[${branches_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`branches[${branches_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'branches[${branches_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `branches[${branches_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`branches[${branches_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('branches[${branches_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"branches[${branches_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    {
                      "id": "51cb978e-349b-4099-ba2b-9d2183492dea",
                      "name": "Create new Registration for the Recipient",
                      "request": {
                        "name": "Create new Registration for the Recipient",
                        "description": {
                          "content": "Create new Registration for the Recipient",
                          "type": "text/plain"
                        },
                        "url": {
                          "path": [
                            "recipients",
                            "branches",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        },
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "response": [
                        {
                          "id": "94d1aa3d-bf6e-420a-a0fb-42ec221410e1",
                          "name": "Successful",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Created",
                          "code": 201,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Location of the created resource",
                              "key": "location",
                              "value": "{{location}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"createdAt\": \"2012-10-21T05:46:50.611Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"urn:uuid:83cd93fd-b72d-2242-84cb-fab3a3329d68\",\n  \"issuedAt\": \"1965-12-04T01:27:50.660Z\",\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"1998-04-16\",\n  \"updatedAt\": \"1952-11-15T04:58:31.686Z\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "6e5f0238-7f54-47c6-9236-b5508160a99c",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "511ca66b-6726-4ece-8794-a01cf0a05ce7",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "branches",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/branches/:id/registrations for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"Successful\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(responseData[0], `reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(pm.response.json(), `reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `startDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`startDate`)){\n          if(pm.expect(_.get(responseData[0], `startDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `startDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `startDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`startDate`)){\n          if(pm.expect(_.get(pm.response.json(), `startDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `startDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('startDate format to be date',function(){\n                pm.expect(_.get(responseData, \"startDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `endDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`endDate`)){\n          if(pm.expect(_.get(responseData[0], `endDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `endDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `endDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`endDate`)){\n          if(pm.expect(_.get(pm.response.json(), `endDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `endDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('endDate format to be date',function(){\n                pm.expect(_.get(responseData, \"endDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`status`)){\n          if(pm.expect(_.get(responseData[0], `status`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `status`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n          if(pm.expect(_.get(pm.response.json(), `status`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `credentialUrl` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`credentialUrl`)){\n          if(pm.expect(_.get(responseData[0], `credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `credentialUrl`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `credentialUrl` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`credentialUrl`)){\n          if(pm.expect(_.get(pm.response.json(), `credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `credentialUrl`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('credentialUrl has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"credentialUrl\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `suspendedUntil` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`suspendedUntil`)){\n          if(pm.expect(_.get(responseData[0], `suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `suspendedUntil`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `suspendedUntil` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`suspendedUntil`)){\n          if(pm.expect(_.get(pm.response.json(), `suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `suspendedUntil`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('suspendedUntil format to be date',function(){\n                pm.expect(_.get(responseData, \"suspendedUntil\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `issuedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`issuedAt`)){\n          if(pm.expect(_.get(responseData[0], `issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `issuedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `issuedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`issuedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `issuedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('issuedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"issuedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        },
        {
          "id": "0401eec9-7d1a-4263-b1cc-9ebdcec5541a",
          "name": "persons",
          "item": [
            {
              "id": "b27a8d35-a558-4d75-be04-3ca380e548da",
              "name": "/recipients/persons",
              "request": {
                "name": "/recipients/persons",
                "description": {},
                "url": {
                  "path": [
                    "recipients",
                    "persons"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "disabled": false,
                      "key": "size",
                      "value": "{{size}}",
                      "description": "Limit the number of results"
                    },
                    {
                      "disabled": false,
                      "key": "offset",
                      "value": "{{offset}}",
                      "description": "Offset results"
                    },
                    {
                      "disabled": false,
                      "key": "name",
                      "value": "{{name}}",
                      "description": "Filter results based on Person's name"
                    },
                    {
                      "disabled": false,
                      "key": "birth-date",
                      "value": "{{birth-date}}",
                      "description": "Filter results based on birth date"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "2a2dff5f-9651-4d57-bbca-803a73ed8e5d",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        },
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "birth-date",
                          "value": "{{birth-date}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record count",
                      "key": "page-size",
                      "value": "{{page-size}}"
                    },
                    {
                      "disabled": false,
                      "description": "Response record offset",
                      "key": "page-offset",
                      "value": "{{page-offset}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"persons\": [\n    {\n      \"birthDate\": \"1977-08-06\",\n      \"birthPlace\": \". { ,L'p{L.{}{}'-L}}.}-.L}'-',{'}}}LL,LL-,{,- {-p}p--L,--p,}'''-}',p,---'-}'L'p.{.-}  Lp.p'{ \",\n      \"countryCode\": \"CN\",\n      \"createdAt\": \"2013-08-31T18:16:08.097Z\",\n      \"email\": \"<email>\",\n      \"firstName\": \"-.{}\",\n      \"houseNumber\": \"35901\",\n      \"houseNumberPostfix\": \"nAIzgutsYwdvNZ\",\n      \"id\": \"ce200801-4dd4-0dcb-7d18-7ae2e2d7075b\",\n      \"initials\": \"ZOX\",\n      \"lastName\": \" L{-{''pL'-'} .L pp  .{--}L{-.}{L{-'p} L.L{ '-{\",\n      \"middleName\": \"'}{p'-p'.}\",\n      \"phone\": \"<string>\",\n      \"postalCode\": \"0929\",\n      \"reference\": \"ut irure dolore occaecat\",\n      \"updatedAt\": \"1970-07-13T20:45:25.524Z\"\n    },\n    {\n      \"birthDate\": \"1964-08-02\",\n      \"birthPlace\": \"}'LLL'{p', ''LL-} p' LL  }  }.',}},Lpp}-{ .{,L{L}{--',  L-,.-,{-','{}-.{'L..'''\",\n      \"countryCode\": \"IM\",\n      \"createdAt\": \"1962-06-20T14:38:18.446Z\",\n      \"email\": \"<email>\",\n      \"firstName\": \"{.{-}'\",\n      \"houseNumber\": \"7277\",\n      \"houseNumberPostfix\": \"aYfGzLwH Zc\",\n      \"id\": \"ecd35a85-fb5a-c42e-c747-93ef079f5c59\",\n      \"initials\": \"VNNCMP\",\n      \"lastName\": \".-} L--'{'.\",\n      \"middleName\": \"'.L'}-L'{ {-.p-.{p-.\",\n      \"phone\": \"<string>\",\n      \"postalCode\": \"0758\",\n      \"reference\": \"sint sed ullamco dolo\",\n      \"updatedAt\": \"2006-03-26T17:59:45.927Z\"\n    }\n  ],\n  \"total\": 1\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "97968cc8-2181-4c74-be8f-beef6676ed68",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        },
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "birth-date",
                          "value": "{{birth-date}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "7085ba32-f2c2-4ea5-9929-f40fe836eaa9",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [
                        {
                          "key": "size",
                          "value": "{{size}}"
                        },
                        {
                          "key": "offset",
                          "value": "{{offset}}"
                        },
                        {
                          "key": "name",
                          "value": "{{name}}"
                        },
                        {
                          "key": "birth-date",
                          "value": "{{birth-date}}"
                        }
                      ],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons?size=<integer>&offset=<integer>&name=<string>&birth-date=<date> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(responseData[0], `persons`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(pm.response.json(), `persons`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the persons field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`persons`);\n          let personsArray = _.get(pm.response.json(), `persons`, \"\");\n          for (let persons_it = 0; persons_it < personsArray.length; persons_it++) {\n            let iterator = persons_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('persons[${persons_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"persons[${persons_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'initials' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].initials`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].initials`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].initials' has 'initials' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].initials`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].initials`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'firstName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].firstName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].firstName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].firstName' has 'firstName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].firstName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].firstName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'middleName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].middleName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].middleName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].middleName' has 'middleName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].middleName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].middleName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'lastName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].lastName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].lastName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].lastName' has 'lastName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].lastName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].lastName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthDate' has 'birthDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthPlace' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthPlace`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthPlace' has 'birthPlace' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthPlace`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].phone`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].phone`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('persons[${persons_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'postalCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].postalCode`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].postalCode' has 'postalCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].postalCode`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumber' has 'houseNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumberPostfix' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumberPostfix' has 'houseNumberPostfix' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'countryCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].countryCode`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].countryCode' has 'countryCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].countryCode`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'reference' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].reference`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].reference' has 'reference' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].reference`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('persons[${persons_it}].reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"persons[${persons_it}].reference\", \"\").length).to.be.at.most(100);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "f157b73b-da2e-4230-bcbb-41d203e365ee",
              "name": "/recipients/persons",
              "request": {
                "name": "/recipients/persons",
                "description": {},
                "url": {
                  "path": [
                    "recipients",
                    "persons"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "ad50a6d3-9ac1-45fa-a7fe-5999aad53933",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Created",
                  "code": 201,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "disabled": false,
                      "description": "Location of the created resource",
                      "key": "location",
                      "value": "{{location}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"birthDate\": \"<date>\",\n  \"birthPlace\": \"<string>\",\n  \"countryCode\": \"<string>\",\n  \"createdAt\": \"1989-11-05T04:20:55.567Z\",\n  \"email\": \"<email>\",\n  \"firstName\": \"<string>\",\n  \"houseNumber\": \"<string>\",\n  \"houseNumberPostfix\": \"<string>\",\n  \"id\": \"urn:uuid:453077c7-08db-466f-7ee5-1b4c68beafc6\",\n  \"initials\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"middleName\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"postalCode\": \"<string>\",\n  \"reference\": \"<string>\",\n  \"updatedAt\": \"2016-05-18T13:19:25.270Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "f693b927-d45f-4ea4-814b-a159185cf355",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "f26b771c-e144-474e-91b9-8e2674a3cf4a",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "recipients",
                        "persons"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "POST",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"birthDate\": \"{{birthDate}}\",\n    \"initials\": \"{{initials}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`initials`)){\n          if(pm.expect(_.get(responseData[0], `initials`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `initials`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`initials`)){\n          if(pm.expect(_.get(pm.response.json(), `initials`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `initials`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`firstName`)){\n          if(pm.expect(_.get(responseData[0], `firstName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `firstName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`firstName`)){\n          if(pm.expect(_.get(pm.response.json(), `firstName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `firstName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`middleName`)){\n          if(pm.expect(_.get(responseData[0], `middleName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `middleName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`middleName`)){\n          if(pm.expect(_.get(pm.response.json(), `middleName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `middleName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`lastName`)){\n          if(pm.expect(_.get(responseData[0], `lastName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `lastName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`lastName`)){\n          if(pm.expect(_.get(pm.response.json(), `lastName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `lastName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`birthDate`)){\n          if(pm.expect(_.get(responseData[0], `birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `birthDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`birthDate`)){\n          if(pm.expect(_.get(pm.response.json(), `birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `birthDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`birthPlace`)){\n          if(pm.expect(_.get(responseData[0], `birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `birthPlace`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`birthPlace`)){\n          if(pm.expect(_.get(pm.response.json(), `birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `birthPlace`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(responseData[0], `phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(pm.response.json(), `phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`postalCode`)){\n          if(pm.expect(_.get(responseData[0], `postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `postalCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`postalCode`)){\n          if(pm.expect(_.get(pm.response.json(), `postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `postalCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`houseNumber`)){\n          if(pm.expect(_.get(responseData[0], `houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `houseNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `houseNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`houseNumberPostfix`)){\n          if(pm.expect(_.get(responseData[0], `houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumberPostfix`)){\n          if(pm.expect(_.get(pm.response.json(), `houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`countryCode`)){\n          if(pm.expect(_.get(responseData[0], `countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `countryCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`countryCode`)){\n          if(pm.expect(_.get(pm.response.json(), `countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `countryCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(responseData[0], `reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(pm.response.json(), `reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "a7724671-4c1d-4061-a1a1-fe6d387d7281",
              "name": "{id}",
              "item": [
                {
                  "id": "605f17c6-e6d4-4d75-9891-b562773be7a7",
                  "name": "/recipients/persons/:id",
                  "request": {
                    "name": "/recipients/persons/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "persons",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "a135f3d2-f057-4bcb-8e3a-ca6430429871",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"birthDate\": \"<date>\",\n  \"birthPlace\": \"<string>\",\n  \"countryCode\": \"<string>\",\n  \"createdAt\": \"1989-11-05T04:20:55.567Z\",\n  \"email\": \"<email>\",\n  \"firstName\": \"<string>\",\n  \"houseNumber\": \"<string>\",\n  \"houseNumberPostfix\": \"<string>\",\n  \"id\": \"urn:uuid:453077c7-08db-466f-7ee5-1b4c68beafc6\",\n  \"initials\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"middleName\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"postalCode\": \"<string>\",\n  \"reference\": \"<string>\",\n  \"updatedAt\": \"2016-05-18T13:19:25.270Z\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "6efca232-dc3e-4f19-bef2-3849cfa21643",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "95159ea2-3392-42b5-904d-8fa955a1c8e5",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(responseData[0], `persons`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(pm.response.json(), `persons`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the persons field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`persons`);\n          let personsArray = _.get(pm.response.json(), `persons`, \"\");\n          for (let persons_it = 0; persons_it < personsArray.length; persons_it++) {\n            let iterator = persons_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('persons[${persons_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"persons[${persons_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'initials' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].initials`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].initials`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].initials' has 'initials' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].initials`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].initials`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'firstName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].firstName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].firstName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].firstName' has 'firstName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].firstName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].firstName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'middleName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].middleName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].middleName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].middleName' has 'middleName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].middleName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].middleName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'lastName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].lastName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].lastName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].lastName' has 'lastName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].lastName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].lastName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthDate' has 'birthDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthPlace' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthPlace`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthPlace' has 'birthPlace' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthPlace`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].phone`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].phone`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('persons[${persons_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'postalCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].postalCode`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].postalCode' has 'postalCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].postalCode`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumber' has 'houseNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumberPostfix' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumberPostfix' has 'houseNumberPostfix' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'countryCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].countryCode`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].countryCode' has 'countryCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].countryCode`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'reference' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].reference`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].reference' has 'reference' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].reference`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('persons[${persons_it}].reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"persons[${persons_it}].reference\", \"\").length).to.be.at.most(100);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "36d6ab50-8325-4789-b555-55efed6e28f9",
                  "name": "/recipients/persons/:id",
                  "request": {
                    "name": "/recipients/persons/:id",
                    "description": {},
                    "url": {
                      "path": [
                        "recipients",
                        "persons",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "d2bbb8ef-ddc3-4296-9784-03112384ea16",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "body": "",
                      "cookie": [],
                      "_postman_previewlanguage": "text"
                    },
                    {
                      "id": "109c5dc1-1bee-4cea-9b5b-4581686ad55f",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "5a3d6f9c-f376-4fa8-948e-46ff058abe96",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "DELETE",
                        "body": {}
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "2905dfc9-f7f7-4d49-a47c-7c8a2858d8aa",
                  "name": "Update a Person. Note: when the VC is issued, these fields cannot be updated anymore:<br/>- initials<br/>- lastName<br/>- birthDate",
                  "request": {
                    "name": "Update a Person. Note: when the VC is issued, these fields cannot be updated anymore:<br/>- initials<br/>- lastName<br/>- birthDate",
                    "description": {
                      "content": "Update a Person. Note: when the VC is issued, these fields cannot be updated anymore:<br/>- initials<br/>- lastName<br/>- birthDate",
                      "type": "text/plain"
                    },
                    "url": {
                      "path": [
                        "recipients",
                        "persons",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "auth": {
                      "type": "apikey",
                      "apikey": [
                        {
                          "key": "key",
                          "value": "Token"
                        },
                        {
                          "key": "value",
                          "value": "{{apiKey}}"
                        },
                        {
                          "key": "in",
                          "value": "header"
                        }
                      ]
                    },
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "response": [
                    {
                      "id": "9c2b34a6-3c5b-4a7a-a6f7-115b0e0fd3e2",
                      "name": "successful operation",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"birthDate\": \"<date>\",\n  \"birthPlace\": \"<string>\",\n  \"countryCode\": \"<string>\",\n  \"createdAt\": \"1989-11-05T04:20:55.567Z\",\n  \"email\": \"<email>\",\n  \"firstName\": \"<string>\",\n  \"houseNumber\": \"<string>\",\n  \"houseNumberPostfix\": \"<string>\",\n  \"id\": \"urn:uuid:453077c7-08db-466f-7ee5-1b4c68beafc6\",\n  \"initials\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"middleName\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"postalCode\": \"<string>\",\n  \"reference\": \"<string>\",\n  \"updatedAt\": \"2016-05-18T13:19:25.270Z\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "79dcf080-4a7f-4cb9-acc0-7f35957ce10f",
                      "name": "Bad Request",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    },
                    {
                      "id": "f6304452-e835-48d1-931b-2b233beb99a9",
                      "name": "Authentication Required",
                      "originalRequest": {
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "description": {
                              "content": "Added as a part of security scheme: apikey",
                              "type": "text/plain"
                            },
                            "key": "Token",
                            "value": "{{Token}}"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "PATCH",
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"initials\": \"{{initials}}\",\n    \"firstName\": \"{{firstName}}\",\n    \"middleName\": \"{{middleName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"birthDate\": \"{{birthDate}}\",\n    \"birthPlace\": \"{{birthPlace}}\",\n    \"phone\": \"{{phone}}\",\n    \"email\": \"{{email}}\",\n    \"postalCode\": \"{{postalCode}}\",\n    \"houseNumber\": \"{{houseNumber}}\",\n    \"houseNumberPostfix\": \"{{houseNumberPostfix}}\",\n    \"countryCode\": \"{{countryCode}}\",\n    \"reference\": \"{{reference}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "header": [
                        {
                          "disabled": false,
                          "description": "API version",
                          "key": "api-version",
                          "value": "{{api-version}}"
                        },
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                      "cookie": [],
                      "_postman_previewlanguage": "json"
                    }
                  ],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "exec": [
                          " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons/:id for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`initials`)){\n          if(pm.expect(_.get(responseData[0], `initials`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `initials`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`initials`)){\n          if(pm.expect(_.get(pm.response.json(), `initials`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `initials`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`firstName`)){\n          if(pm.expect(_.get(responseData[0], `firstName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `firstName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`firstName`)){\n          if(pm.expect(_.get(pm.response.json(), `firstName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `firstName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`middleName`)){\n          if(pm.expect(_.get(responseData[0], `middleName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `middleName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`middleName`)){\n          if(pm.expect(_.get(pm.response.json(), `middleName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `middleName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`lastName`)){\n          if(pm.expect(_.get(responseData[0], `lastName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `lastName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`lastName`)){\n          if(pm.expect(_.get(pm.response.json(), `lastName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `lastName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`birthDate`)){\n          if(pm.expect(_.get(responseData[0], `birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `birthDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`birthDate`)){\n          if(pm.expect(_.get(pm.response.json(), `birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `birthDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`birthPlace`)){\n          if(pm.expect(_.get(responseData[0], `birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `birthPlace`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`birthPlace`)){\n          if(pm.expect(_.get(pm.response.json(), `birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `birthPlace`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(responseData[0], `phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(pm.response.json(), `phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`postalCode`)){\n          if(pm.expect(_.get(responseData[0], `postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `postalCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`postalCode`)){\n          if(pm.expect(_.get(pm.response.json(), `postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `postalCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`houseNumber`)){\n          if(pm.expect(_.get(responseData[0], `houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `houseNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `houseNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`houseNumberPostfix`)){\n          if(pm.expect(_.get(responseData[0], `houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumberPostfix`)){\n          if(pm.expect(_.get(pm.response.json(), `houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`countryCode`)){\n          if(pm.expect(_.get(responseData[0], `countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `countryCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`countryCode`)){\n          if(pm.expect(_.get(pm.response.json(), `countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `countryCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(responseData[0], `reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(pm.response.json(), `reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  }
                },
                {
                  "id": "6d4f5edd-95de-4baa-aa72-ff157c2a7ee5",
                  "name": "registrations",
                  "item": [
                    {
                      "id": "1bcc4f46-0317-4920-ae7d-c92c50924923",
                      "name": "/recipients/persons/:id/registrations",
                      "request": {
                        "name": "/recipients/persons/:id/registrations",
                        "description": {},
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [
                            {
                              "disabled": false,
                              "key": "credential-url",
                              "value": "{{credential-url}}",
                              "description": "Filter results on specific Credential (URL)."
                            },
                            {
                              "disabled": false,
                              "key": "size",
                              "value": "{{size}}",
                              "description": "Limit the number of results"
                            },
                            {
                              "disabled": false,
                              "key": "offset",
                              "value": "{{offset}}",
                              "description": "Offset results"
                            }
                          ],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "GET",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        }
                      },
                      "response": [
                        {
                          "id": "a8998e9d-7a1f-4fc0-b78f-55642843ce90",
                          "name": "successful operation",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "OK",
                          "code": 200,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record count",
                              "key": "page-size",
                              "value": "{{page-size}}"
                            },
                            {
                              "disabled": false,
                              "description": "Response record offset",
                              "key": "page-offset",
                              "value": "{{page-offset}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"registrations\": [\n    {\n      \"createdAt\": \"2011-03-06T12:15:58.505Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"15cf2b5f-a8eb-9596-1af2-eb523fed9b44\",\n      \"issuedAt\": \"1995-05-29T10:30:10.036Z\",\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1954-03-11\",\n      \"updatedAt\": \"2020-06-13T23:40:22.796Z\"\n    },\n    {\n      \"createdAt\": \"1944-04-30T20:17:30.619Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"urn:uuid:22562eb3-40f0-22ab-0112-acfaf1299b68\",\n      \"issuedAt\": \"1977-02-05T16:39:49.526Z\",\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"2002-06-23\",\n      \"updatedAt\": \"2014-10-11T23:19:16.979Z\"\n    }\n  ],\n  \"total\": 1\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "59dea2e5-902d-4bf2-b680-7dfd95975db0",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "a7e75b76-009a-4732-af1d-7e0ffe779ecf",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [
                                {
                                  "key": "credential-url",
                                  "value": "{{credential-url}}"
                                },
                                {
                                  "key": "size",
                                  "value": "{{size}}"
                                },
                                {
                                  "key": "offset",
                                  "value": "{{offset}}"
                                }
                              ],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "GET",
                            "body": {}
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons/:id/registrations?credential-url=<string>&size=<integer>&offset=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(responseData[0], `persons`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `persons` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`persons`)){\n              if(pm.expect(_.get(pm.response.json(), `persons`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `persons`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the persons field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`persons`);\n          let personsArray = _.get(pm.response.json(), `persons`, \"\");\n          for (let persons_it = 0; persons_it < personsArray.length; persons_it++) {\n            let iterator = persons_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('persons[${persons_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"persons[${persons_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'initials' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].initials`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].initials`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].initials' has 'initials' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].initials`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].initials`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'firstName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].firstName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].firstName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].firstName' has 'firstName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].firstName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].firstName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'middleName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].middleName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].middleName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].middleName' has 'middleName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].middleName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].middleName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'lastName' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].lastName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].lastName`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].lastName' has 'lastName' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].lastName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].lastName`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthDate' has 'birthDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'birthPlace' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].birthPlace`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].birthPlace' has 'birthPlace' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].birthPlace`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'phone' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].phone`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].phone' has 'phone' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].phone`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'email' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].email`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].email' has 'email' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].email`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('persons[${persons_it}].email format to be email',function(){ \n                pm.expect(_.get(responseData, \"persons[${persons_it}].email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'postalCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].postalCode`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].postalCode' has 'postalCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].postalCode`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumber' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumber`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumber' has 'houseNumber' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumber`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'houseNumberPostfix' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].houseNumberPostfix' has 'houseNumberPostfix' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'countryCode' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].countryCode`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].countryCode' has 'countryCode' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].countryCode`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('persons[${persons_it}].countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"persons[${persons_it}].countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'reference' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].reference`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].reference' has 'reference' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].reference`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('persons[${persons_it}].reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"persons[${persons_it}].reference\", \"\").length).to.be.at.most(100);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'personsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `persons[${persons_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`persons[${persons_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'persons[${persons_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `persons[${persons_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`persons[${persons_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('persons[${persons_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"persons[${persons_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    },
                    {
                      "id": "0496c8dd-c37c-4d89-84cd-d44cef60bd0e",
                      "name": "Create new Registration",
                      "request": {
                        "name": "Create new Registration",
                        "description": {
                          "content": "Create new Registration",
                          "type": "text/plain"
                        },
                        "url": {
                          "path": [
                            "recipients",
                            "persons",
                            ":id",
                            "registrations"
                          ],
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "query": [],
                          "variable": [
                            {
                              "disabled": false,
                              "type": "any",
                              "value": "{{id}}",
                              "key": "id",
                              "description": "(Required) UUID"
                            }
                          ]
                        },
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "method": "POST",
                        "auth": {
                          "type": "apikey",
                          "apikey": [
                            {
                              "key": "key",
                              "value": "Token"
                            },
                            {
                              "key": "value",
                              "value": "{{apiKey}}"
                            },
                            {
                              "key": "in",
                              "value": "header"
                            }
                          ]
                        },
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                          "options": {
                            "raw": {
                              "language": "json"
                            }
                          }
                        }
                      },
                      "response": [
                        {
                          "id": "823656d9-c5a8-4fe7-8961-e36b7cf020cb",
                          "name": "Successful",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Created",
                          "code": 201,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "disabled": false,
                              "description": "Location of the created resource",
                              "key": "location",
                              "value": "{{location}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"createdAt\": \"2012-10-21T05:46:50.611Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"urn:uuid:83cd93fd-b72d-2242-84cb-fab3a3329d68\",\n  \"issuedAt\": \"1965-12-04T01:27:50.660Z\",\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"1998-04-16\",\n  \"updatedAt\": \"1952-11-15T04:58:31.686Z\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "9341d544-da6e-471b-99e2-82bbad98f3c4",
                          "name": "Bad Request",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Bad Request",
                          "code": 400,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        },
                        {
                          "id": "52da1f5a-a57f-471b-85ed-df82c2cd6b71",
                          "name": "Authentication Required",
                          "originalRequest": {
                            "url": {
                              "path": [
                                "recipients",
                                "persons",
                                ":id",
                                "registrations"
                              ],
                              "host": [
                                "{{baseUrl}}"
                              ],
                              "query": [],
                              "variable": [
                                {
                                  "disabled": false,
                                  "type": "any",
                                  "value": "{{id}}",
                                  "key": "id",
                                  "description": "(Required) UUID"
                                }
                              ]
                            },
                            "header": [
                              {
                                "description": {
                                  "content": "Added as a part of security scheme: apikey",
                                  "type": "text/plain"
                                },
                                "key": "Token",
                                "value": "{{Token}}"
                              },
                              {
                                "key": "Accept",
                                "value": "application/json"
                              }
                            ],
                            "method": "POST",
                            "body": {
                              "mode": "raw",
                              "raw": "{\n    \"credentialUrl\": \"{{credentialUrl}}\",\n    \"startDate\": \"{{startDate}}\",\n    \"reference\": \"{{reference}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                              "options": {
                                "raw": {
                                  "language": "json"
                                }
                              }
                            }
                          },
                          "status": "Unauthorized",
                          "code": 401,
                          "header": [
                            {
                              "disabled": false,
                              "description": "API version",
                              "key": "api-version",
                              "value": "{{api-version}}"
                            },
                            {
                              "key": "Content-Type",
                              "value": "application/json"
                            }
                          ],
                          "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                          "cookie": [],
                          "_postman_previewlanguage": "json"
                        }
                      ],
                      "event": [
                        {
                          "listen": "test",
                          "script": {
                            "exec": [
                              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /recipients/persons/:id/registrations for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 201){\n    pm.test(\"Successful\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Created\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`initials`)){\n          if(pm.expect(_.get(responseData[0], `initials`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `initials`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `initials` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`initials`)){\n          if(pm.expect(_.get(pm.response.json(), `initials`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `initials`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('initials has same pattern as `^[A-Z]{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"initials\", \"\")).to.match(/^[A-Z]{1,6}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`firstName`)){\n          if(pm.expect(_.get(responseData[0], `firstName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `firstName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `firstName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`firstName`)){\n          if(pm.expect(_.get(pm.response.json(), `firstName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `firstName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('firstName has same pattern as `^[\\p{L} .'-]{1,50}$`',function(){ \n          pm.expect(_.get(responseData, \"firstName\", \"\")).to.match(/^[\\p{L} .'-]{1,50}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`middleName`)){\n          if(pm.expect(_.get(responseData[0], `middleName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `middleName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `middleName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`middleName`)){\n          if(pm.expect(_.get(pm.response.json(), `middleName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `middleName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('middleName has same pattern as `^[\\p{L} .'-]{1,20}$`',function(){ \n          pm.expect(_.get(responseData, \"middleName\", \"\")).to.match(/^[\\p{L} .'-]{1,20}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`lastName`)){\n          if(pm.expect(_.get(responseData[0], `lastName`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `lastName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `lastName` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`lastName`)){\n          if(pm.expect(_.get(pm.response.json(), `lastName`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `lastName`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('lastName has same pattern as `^[\\p{L} .'-]{2,50}$`',function(){ \n          pm.expect(_.get(responseData, \"lastName\", \"\")).to.match(/^[\\p{L} .'-]{2,50}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`birthDate`)){\n          if(pm.expect(_.get(responseData[0], `birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `birthDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `birthDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`birthDate`)){\n          if(pm.expect(_.get(pm.response.json(), `birthDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `birthDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('birthDate format to be date',function(){\n                pm.expect(_.get(responseData, \"birthDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`birthPlace`)){\n          if(pm.expect(_.get(responseData[0], `birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `birthPlace`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `birthPlace` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`birthPlace`)){\n          if(pm.expect(_.get(pm.response.json(), `birthPlace`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `birthPlace`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('birthPlace has same pattern as `^[\\p{L} .,'-]{2,100}$`',function(){ \n          pm.expect(_.get(responseData, \"birthPlace\", \"\")).to.match(/^[\\p{L} .,'-]{2,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(responseData[0], `phone`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `phone` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`phone`)){\n          if(pm.expect(_.get(pm.response.json(), `phone`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `phone`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(responseData[0], `email`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `email` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`email`)){\n          if(pm.expect(_.get(pm.response.json(), `email`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `email`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('email has same pattern as `^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$`',function(){ \n          pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n        })\n  \n            pm.test('email format to be email',function(){ \n                pm.expect(_.get(responseData, \"email\", \"\")).to.match(/^[^s@]+@[^s@]+.[^s@]+$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`postalCode`)){\n          if(pm.expect(_.get(responseData[0], `postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `postalCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `postalCode` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`postalCode`)){\n          if(pm.expect(_.get(pm.response.json(), `postalCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `postalCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('postalCode has same pattern as `^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$`',function(){ \n          pm.expect(_.get(responseData, \"postalCode\", \"\")).to.match(/^[0-9]{4}[A-Z]{2}$|^[0-9]{4,5}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`houseNumber`)){\n          if(pm.expect(_.get(responseData[0], `houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `houseNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `houseNumber` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumber`)){\n          if(pm.expect(_.get(pm.response.json(), `houseNumber`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `houseNumber`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('houseNumber has same pattern as `^\\d{1,6}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumber\", \"\")).to.match(/^\\d{1,6}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`houseNumberPostfix`)){\n          if(pm.expect(_.get(responseData[0], `houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `houseNumberPostfix` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`houseNumberPostfix`)){\n          if(pm.expect(_.get(pm.response.json(), `houseNumberPostfix`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `houseNumberPostfix`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('houseNumberPostfix has same pattern as `^[a-zA-Z .,_'-]{0,20}$`',function(){ \n          pm.expect(_.get(responseData, \"houseNumberPostfix\", \"\")).to.match(/^[a-zA-Z .,_'-]{0,20}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`countryCode`)){\n          if(pm.expect(_.get(responseData[0], `countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `countryCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `countryCode` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`countryCode`)){\n          if(pm.expect(_.get(pm.response.json(), `countryCode`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `countryCode`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('countryCode has same pattern as `^[A-Z]{2}$`',function(){ \n          pm.expect(_.get(responseData, \"countryCode\", \"\")).to.match(/^[A-Z]{2}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(responseData[0], `reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(pm.response.json(), `reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                            ],
                            "type": "text/javascript"
                          }
                        }
                      ],
                      "protocolProfileBehavior": {
                        "disableBodyPruning": true
                      }
                    }
                  ],
                  "event": []
                }
              ],
              "event": []
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "ad3955d8-a2bd-421d-ab89-074c2e378341",
      "name": "registrations",
      "item": [
        {
          "id": "922efd7b-5fa3-4421-88c8-4de87e7a11e8",
          "name": "/registrations",
          "request": {
            "name": "/registrations",
            "description": {},
            "url": {
              "path": [
                "registrations"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "size",
                  "value": "{{size}}",
                  "description": "Limit the number of results"
                },
                {
                  "disabled": false,
                  "key": "offset",
                  "value": "{{offset}}",
                  "description": "Offset results"
                },
                {
                  "disabled": false,
                  "key": "recipient-id",
                  "value": "{{recipient-id}}",
                  "description": "Filter results by Recipient ID (UUID)"
                },
                {
                  "disabled": false,
                  "key": "credential-url",
                  "value": "{{credential-url}}",
                  "description": "Filter results on specific Credential (URL)."
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "key",
                  "value": "Token"
                },
                {
                  "key": "value",
                  "value": "{{apiKey}}"
                },
                {
                  "key": "in",
                  "value": "header"
                }
              ]
            }
          },
          "response": [
            {
              "id": "3a6a6bf5-02c1-4ba1-a1cf-5f118a59633b",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "registrations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    },
                    {
                      "key": "recipient-id",
                      "value": "{{recipient-id}}"
                    },
                    {
                      "key": "credential-url",
                      "value": "{{credential-url}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "disabled": false,
                  "description": "Response record count",
                  "key": "page-size",
                  "value": "{{page-size}}"
                },
                {
                  "disabled": false,
                  "description": "Response record offset",
                  "key": "page-offset",
                  "value": "{{page-offset}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"registrations\": [\n    {\n      \"createdAt\": \"1966-08-15T16:05:36.536Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"urn:uuid:5f2b4b89-37ad-8c83-82e4-63760c3ffd31\",\n      \"issuedAt\": \"1948-11-17T11:30:44.024Z\",\n      \"recipient\": {\n        \"id\": \"1b61d804-39fb-d361-c1e3-748c67b7acd2\",\n        \"name\": \"LLLp- {.}.{.-'{{p-{}{'-}}L' .Lp{'-.-L-L-{.   '{}'L.'}p.Lp-.  L}p}- { p L}'{{---L''}{p }'. { -'\",\n        \"type\": \"branch\"\n      },\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"1978-02-12\",\n      \"updatedAt\": \"1974-04-21T21:46:47.039Z\"\n    },\n    {\n      \"createdAt\": \"1976-09-02T10:50:59.842Z\",\n      \"credentialUrl\": \"<string>\",\n      \"endDate\": \"<date>\",\n      \"id\": \"urn:uuid:8512950f-77a4-c13e-dd84-3e4158ffe5e5\",\n      \"issuedAt\": \"2011-01-17T10:34:55.207Z\",\n      \"recipient\": {\n        \"id\": \"urn:uuid:5cd66053-da29-2a1d-17ea-349936385414\",\n        \"name\": \".}p'-\",\n        \"type\": \"branch\"\n      },\n      \"reference\": \"<string>\",\n      \"startDate\": \"<date>\",\n      \"status\": \"active\",\n      \"suspendedUntil\": \"2001-07-27\",\n      \"updatedAt\": \"2012-03-01T07:28:46.781Z\"\n    }\n  ],\n  \"total\": 1\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "588e7462-c8a6-43e8-9340-98adf9516acb",
              "name": "Bad Request",
              "originalRequest": {
                "url": {
                  "path": [
                    "registrations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    },
                    {
                      "key": "recipient-id",
                      "value": "{{recipient-id}}"
                    },
                    {
                      "key": "credential-url",
                      "value": "{{credential-url}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Bad Request",
              "code": 400,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            },
            {
              "id": "120c94d4-8d35-415b-9be6-ec987617d325",
              "name": "Authentication Required",
              "originalRequest": {
                "url": {
                  "path": [
                    "registrations"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "size",
                      "value": "{{size}}"
                    },
                    {
                      "key": "offset",
                      "value": "{{offset}}"
                    },
                    {
                      "key": "recipient-id",
                      "value": "{{recipient-id}}"
                    },
                    {
                      "key": "credential-url",
                      "value": "{{credential-url}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "description": {
                      "content": "Added as a part of security scheme: apikey",
                      "type": "text/plain"
                    },
                    "key": "Token",
                    "value": "{{Token}}"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "Unauthorized",
              "code": 401,
              "header": [
                {
                  "disabled": false,
                  "description": "API version",
                  "key": "api-version",
                  "value": "{{api-version}}"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /registrations?size=<integer>&offset=<integer>&recipient-id=<uuid>&credential-url=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `registrations` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`registrations`)){\n              if(pm.expect(_.get(responseData[0], `registrations`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `registrations`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `registrations` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`registrations`)){\n              if(pm.expect(_.get(pm.response.json(), `registrations`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `registrations`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the registrations field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`registrations`);\n          let registrationsArray = _.get(pm.response.json(), `registrations`, \"\");\n          for (let registrations_it = 0; registrations_it < registrationsArray.length; registrations_it++) {\n            let iterator = registrations_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('registrations[${registrations_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'reference' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].reference`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].reference' has 'reference' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].reference`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('registrations[${registrations_it}].reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].reference\", \"\").length).to.be.at.most(100);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'startDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].startDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].startDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].startDate' has 'startDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].startDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].startDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].startDate format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].startDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'endDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].endDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].endDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].endDate' has 'endDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].endDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].endDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].endDate format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].endDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].status`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].status`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'credentialUrl' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].credentialUrl`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].credentialUrl' has 'credentialUrl' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].credentialUrl`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('registrations[${registrations_it}].credentialUrl has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].credentialUrl\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'suspendedUntil' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].suspendedUntil`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].suspendedUntil' has 'suspendedUntil' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].suspendedUntil`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].suspendedUntil format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].suspendedUntil\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'issuedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].issuedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].issuedAt' has 'issuedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].issuedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].issuedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].issuedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'recipient' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient' has 'recipient' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient.id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient.id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient.id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient.id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient.id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('registrations[${registrations_it}].recipient.id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].recipient.id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'name' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient.name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient.name`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient.name' has 'name' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient.name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient.name`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('registrations[${registrations_it}].recipient.name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].recipient.name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'type' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient.type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient.type`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient.type' has 'type' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient.type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient.type`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('registrations[${registrations_it}].recipient.type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].recipient.type\", \"\")).to.include.oneOf([\"branch\",\"person\",\"employee\"]);\n        })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "0c3598d8-1aaa-4094-ac79-1cfa860b5924",
          "name": "{id}",
          "item": [
            {
              "id": "50c0c17b-e4e0-4be6-9407-e447437ea567",
              "name": "/registrations/:id",
              "request": {
                "name": "/registrations/:id",
                "description": {},
                "url": {
                  "path": [
                    "registrations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "a09ea112-ef30-447e-8ef7-7108418f3472",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"createdAt\": \"1991-10-04T04:30:46.132Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"d8d8c9aa-c256-daf2-bc5b-083e71494a16\",\n  \"issuedAt\": \"1956-03-26T07:20:13.598Z\",\n  \"recipient\": {\n    \"id\": \"1edc57ce-c6da-84ff-7ae6-b78017797f1c\",\n    \"name\": \" ppp{-pp{L LL.-.-'L ''}-LLLL.p. '{p-'}-L{pL} -'p}ppLp 'p-{'{pp{p{}-{{'ppLp'}{L-L}.Lp-}}\",\n    \"type\": \"branch\"\n  },\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"1968-04-07\",\n  \"updatedAt\": \"1973-05-24T12:03:53.772Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "13be7bdc-ca9c-4dc1-836c-e9f27dd66756",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "ac3fb01b-e26a-452f-b9bc-60e58346866b",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /registrations/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n          if(Array.isArray(responseData)) {\n            pm.test('Response has the `total` field',function(){ \n                if(pm.expect(responseData[0]).to.have.nested.property(`total`)){\n                  if(pm.expect(_.get(responseData[0], `total`, 200)).to.exist){\n                    pm.expect(typeof _.get(responseData[0], `total`, 200)).to.equal(\"number\");\n                  }\n                }\n\n            })\n          } else {\n            pm.test('Response has the `total` field',function(){\n              if(pm.expect(responseData).to.have.nested.property(`total`)){\n                if(pm.expect(_.get(responseData, `total`, 200)).to.exist){\n                  pm.expect(typeof _.get(responseData, `total`, 200)).to.equal(\"number\");\n                }\n              }\n\n            })\n          }\n\n        if(Array.isArray(responseData)){\n          pm.test('Response has the `registrations` field',function(){\n            if(pm.expect(responseData[0]).to.have.nested.property(`registrations`)){\n              if(pm.expect(_.get(responseData[0], `registrations`)).to.exist){\n                pm.expect(Array.isArray(_.get(responseData[0], `registrations`))).to.equal(true);\n              }\n            }\n\n          })\n        } else {\n          pm.test('Response has the `registrations` field',function(){\n            if(pm.expect(pm.response.json()).to.have.nested.property(`registrations`)){\n              if(pm.expect(_.get(pm.response.json(), `registrations`)).to.exist){\n                pm.expect(Array.isArray(_.get(pm.response.json(), `registrations`))).to.equal(true);\n              }\n            }\n\n          })\n        }      \n          \n\n      pm.test(`Each object in the registrations field has all the required fields`,function(){\n          pm.expect(pm.response.json()).to.have.nested.property(`registrations`);\n          let registrationsArray = _.get(pm.response.json(), `registrations`, \"\");\n          for (let registrations_it = 0; registrations_it < registrationsArray.length; registrations_it++) {\n            let iterator = registrations_it;\n            \t\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('registrations[${registrations_it}].id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'reference' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].reference`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].reference' has 'reference' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].reference`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n        pm.test('registrations[${registrations_it}].reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].reference\", \"\").length).to.be.at.most(100);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'startDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].startDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].startDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].startDate' has 'startDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].startDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].startDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].startDate format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].startDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'endDate' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].endDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].endDate`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].endDate' has 'endDate' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].endDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].endDate`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].endDate format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].endDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'status' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].status`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].status' has 'status' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].status`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].status`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'credentialUrl' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].credentialUrl`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].credentialUrl' has 'credentialUrl' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].credentialUrl`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('registrations[${registrations_it}].credentialUrl has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].credentialUrl\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'suspendedUntil' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].suspendedUntil`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].suspendedUntil' has 'suspendedUntil' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].suspendedUntil`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].suspendedUntil format to be date',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].suspendedUntil\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'issuedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].issuedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].issuedAt' has 'issuedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].issuedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].issuedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].issuedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'createdAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].createdAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].createdAt' has 'createdAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].createdAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'updatedAt' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].updatedAt' has 'updatedAt' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].updatedAt`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n  \n            pm.test('registrations[${registrations_it}].updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'recipient' as 'object'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient`, null)).to.equal(\"object\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient' has 'recipient' as 'object'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient`, null)).to.equal(\"object\");\n          }\n      })\n\n    }\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'id' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient.id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient.id`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient.id' has 'id' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient.id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient.id`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n\n            pm.test('registrations[${registrations_it}].recipient.id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"registrations[${registrations_it}].recipient.id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'name' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient.name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient.name`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient.name' has 'name' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient.name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient.name`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('registrations[${registrations_it}].recipient.name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].recipient.name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n      if(Array.isArray(responseData)) {\n        pm.test(`${iterator} element of array 'registrationsArray' has 'type' as 'string'`,function(){  \n          if(pm.expect(_.get(responseData[0], `registrations[${registrations_it}].recipient.type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0],`registrations[${registrations_it}].recipient.type`, null)).to.equal(\"string\");\n          }\n        })\n\n      } else {      \n        pm.test(`${iterator} element of array 'registrations[${registrations_it}].recipient.type' has 'type' as 'string'`,function(){ \n          if(pm.expect(_.get(pm.response.json(), `registrations[${registrations_it}].recipient.type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(),`registrations[${registrations_it}].recipient.type`, null)).to.equal(\"string\");\n          }\n      })\n\n    }\n \n        pm.test('registrations[${registrations_it}].recipient.type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"registrations[${registrations_it}].recipient.type\", \"\")).to.include.oneOf([\"branch\",\"person\",\"employee\"]);\n        })\n\n          }\n\n      })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "adf1f31d-e263-4a27-aabc-0a90227043ef",
              "name": "/registrations/:id",
              "request": {
                "name": "/registrations/:id",
                "description": {},
                "url": {
                  "path": [
                    "registrations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "DELETE",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                }
              },
              "response": [
                {
                  "id": "e7e8e429-10f4-41e1-aaa1-0fc7bbbb9023",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                },
                {
                  "id": "4adbe993-2fab-4586-9c3d-0195a0fe4738",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "e0a1875c-1ee8-4d94-ab54-3e457e7be631",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /registrations/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "4ff908dd-4952-42c6-a259-f92bae73fa8d",
              "name": "/registrations/:id",
              "request": {
                "name": "/registrations/:id",
                "description": {},
                "url": {
                  "path": [
                    "registrations",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) UUID"
                    }
                  ]
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "PATCH",
                "auth": {
                  "type": "apikey",
                  "apikey": [
                    {
                      "key": "key",
                      "value": "Token"
                    },
                    {
                      "key": "value",
                      "value": "{{apiKey}}"
                    },
                    {
                      "key": "in",
                      "value": "header"
                    }
                  ]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": \"{{revoked}}\",\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [
                {
                  "id": "fc01b2c1-b79e-4f29-ae45-788ea823671a",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": false,\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"createdAt\": \"2004-08-17T16:57:18.666Z\",\n  \"credentialUrl\": \"<string>\",\n  \"endDate\": \"<date>\",\n  \"id\": \"9e589bb1-7d22-b12d-38a2-ded132f58bd1\",\n  \"issuedAt\": \"1971-06-01T16:24:26.776Z\",\n  \"recipient\": {\n    \"id\": \"bd6ff5f2-a827-5834-eb78-dcfe91061719\",\n    \"name\": \"}.'pp- Lp{{'-'p-   {-{{ 'p{'pp' {}} {' -- --}L}. p }{ ..-''{p'} '{. -L}..L p}-p{ {L .-LL'LL'{L \",\n    \"type\": \"employee\"\n  },\n  \"reference\": \"<string>\",\n  \"startDate\": \"<date>\",\n  \"status\": \"active\",\n  \"suspendedUntil\": \"<date>\",\n  \"updatedAt\": \"2001-06-05T22:14:07.224Z\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "510657ba-aba5-4739-8269-b1d232cde411",
                  "name": "Bad Request",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": false,\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                },
                {
                  "id": "8ac811f3-6617-495a-a656-24020ce51ae7",
                  "name": "Authentication Required",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "registrations",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) UUID"
                        }
                      ]
                    },
                    "header": [
                      {
                        "description": {
                          "content": "Added as a part of security scheme: apikey",
                          "type": "text/plain"
                        },
                        "key": "Token",
                        "value": "{{Token}}"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "PATCH",
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"reference\": \"{{reference}}\",\n    \"revoked\": false,\n    \"suspendedUntil\": \"{{suspendedUntil}}\",\n    \"endDate\": \"{{endDate}}\"\n}",
                      "options": {
                        "raw": {
                          "language": "json"
                        }
                      }
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "header": [
                    {
                      "disabled": false,
                      "description": "API version",
                      "key": "api-version",
                      "value": "{{api-version}}"
                    },
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "{\n  \"description\": \"Descriptive Error Message\",\n  \"error\": \"error/code\"\n}",
                  "cookie": [],
                  "_postman_previewlanguage": "json"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /registrations/:id for http method type patch in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(responseData[0], `id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`id`)){\n          if(pm.expect(_.get(pm.response.json(), `id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(responseData[0], `reference`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `reference` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`reference`)){\n          if(pm.expect(_.get(pm.response.json(), `reference`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `reference`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n        pm.test('reference length to be atmost `100`',function(){\n          pm.expect(_.get(responseData, \"reference\", \"\").length).to.be.at.most(100);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `startDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`startDate`)){\n          if(pm.expect(_.get(responseData[0], `startDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `startDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `startDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`startDate`)){\n          if(pm.expect(_.get(pm.response.json(), `startDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `startDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('startDate format to be date',function(){\n                pm.expect(_.get(responseData, \"startDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `endDate` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`endDate`)){\n          if(pm.expect(_.get(responseData[0], `endDate`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `endDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `endDate` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`endDate`)){\n          if(pm.expect(_.get(pm.response.json(), `endDate`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `endDate`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('endDate format to be date',function(){\n                pm.expect(_.get(responseData, \"endDate\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`status`)){\n          if(pm.expect(_.get(responseData[0], `status`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `status`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `status` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`status`)){\n          if(pm.expect(_.get(pm.response.json(), `status`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `status`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `credentialUrl` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`credentialUrl`)){\n          if(pm.expect(_.get(responseData[0], `credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `credentialUrl`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `credentialUrl` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`credentialUrl`)){\n          if(pm.expect(_.get(pm.response.json(), `credentialUrl`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `credentialUrl`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('credentialUrl has same pattern as `^\\w+:(\\/?\\/?)[^\\s]+$`',function(){ \n          pm.expect(_.get(responseData, \"credentialUrl\", \"\")).to.match(/^\\w+:(\\/?\\/?)[^\\s]+$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `suspendedUntil` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`suspendedUntil`)){\n          if(pm.expect(_.get(responseData[0], `suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `suspendedUntil`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `suspendedUntil` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`suspendedUntil`)){\n          if(pm.expect(_.get(pm.response.json(), `suspendedUntil`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `suspendedUntil`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('suspendedUntil format to be date',function(){\n                pm.expect(_.get(responseData, \"suspendedUntil\", \"\")).to.match(/^d{4}-d{2}-d{2}$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `issuedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`issuedAt`)){\n          if(pm.expect(_.get(responseData[0], `issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `issuedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `issuedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`issuedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `issuedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `issuedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('issuedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"issuedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(responseData[0], `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `createdAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`createdAt`)){\n          if(pm.expect(_.get(pm.response.json(), `createdAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `createdAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('createdAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"createdAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(responseData[0], `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `updatedAt` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`updatedAt`)){\n          if(pm.expect(_.get(pm.response.json(), `updatedAt`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `updatedAt`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n  \n            pm.test('updatedAt format to be date-time',function(){\n                pm.expect(_.get(responseData, \"updatedAt\", \"\")).to.match(/^d{4}-d{2}-d{2}T([01]d|2[0-3]):([0-5]d):([0-5]d)$/);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `recipient` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`recipient`)){\n          if(pm.expect(_.get(responseData[0], `recipient`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `recipient`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `recipient` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`recipient`)){\n          if(pm.expect(_.get(pm.response.json(), `recipient`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `recipient`, null)).to.equal(\"object\");\n          }\n        }\n\n      })\n    }\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `recipient.id` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`recipient.id`)){\n          if(pm.expect(_.get(responseData[0], `recipient.id`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `recipient.id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `recipient.id` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`recipient.id`)){\n          if(pm.expect(_.get(pm.response.json(), `recipient.id`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `recipient.id`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n\n            pm.test('recipient.id format to be uuid',function(){  \n                pm.expect(_.get(responseData, \"recipient.id\", \"\")).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);\n            })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `recipient.name` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`recipient.name`)){\n          if(pm.expect(_.get(responseData[0], `recipient.name`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `recipient.name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `recipient.name` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`recipient.name`)){\n          if(pm.expect(_.get(pm.response.json(), `recipient.name`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `recipient.name`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('recipient.name has same pattern as `^[\\p{L} .'-]{1,100}$`',function(){ \n          pm.expect(_.get(responseData, \"recipient.name\", \"\")).to.match(/^[\\p{L} .'-]{1,100}$/);\n        })\n\n    if(Array.isArray(responseData)) {\n      pm.test('Response has the `recipient.type` field',function(){\n        if(pm.expect(responseData[0]).to.have.nested.property(`recipient.type`)){\n          if(pm.expect(_.get(responseData[0], `recipient.type`, null)).to.exist){\n            pm.expect(typeof _.get(responseData[0], `recipient.type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    } else {\n      pm.test('Response has the `recipient.type` field',function(){\n        if(pm.expect(pm.response.json()).to.have.nested.property(`recipient.type`)){\n          if(pm.expect(_.get(pm.response.json(), `recipient.type`, null)).to.exist){\n            pm.expect(typeof _.get(pm.response.json(), `recipient.type`, null)).to.equal(\"string\");\n          }\n        }\n\n      })\n    }\n \n        pm.test('recipient.type to be one of enum', function(){ \n          pm.expect(_.get(responseData, \"recipient.type\", \"\")).to.include.oneOf([\"branch\",\"person\",\"employee\"]);\n        })\n});\n}\n\nif (pm.response.code == 400){\n    pm.test(\"Bad Request\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Bad Request\");});\n}\n\nif (pm.response.code == 401){\n    pm.test(\"Authentication Required\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Unauthorized\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "39f30573-5ffc-4db3-b69b-b50afba240e2",
      "name": "/errors",
      "request": {
        "name": "/errors",
        "description": {},
        "url": {
          "path": [
            "errors"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "id": "fa4e29ce-1c40-451b-ba2b-9eb539f81ea5",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "errors"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "disabled": false,
              "description": "API version",
              "key": "api-version",
              "value": "{{api-version}}"
            },
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"description\": \"Descriptive Error Message\",\n    \"error\": \"error/code\"\n  },\n  {\n    \"description\": \"Descriptive Error Message\",\n    \"error\": \"error/code\"\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /errors for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    },
    {
      "id": "623a213c-094e-4561-9f8f-a4b47786efdc",
      "name": "/kvk/zoeken",
      "request": {
        "name": "/kvk/zoeken",
        "description": {},
        "url": {
          "path": [
            "kvk",
            "zoeken"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [
            {
              "disabled": false,
              "key": "kvkNummer",
              "value": "{{kvkNummer}}"
            },
            {
              "disabled": false,
              "key": "vestigingsnummer",
              "value": "{{vestigingsnummer}}",
              "description": "Filter results based on reference"
            },
            {
              "disabled": false,
              "key": "handelsnaam",
              "value": "{{handelsnaam}}",
              "description": "Filter results based on reference"
            }
          ],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": {
          "type": "apikey",
          "apikey": [
            {
              "key": "key",
              "value": "Token"
            },
            {
              "key": "value",
              "value": "{{apiKey}}"
            },
            {
              "key": "in",
              "value": "header"
            }
          ]
        }
      },
      "response": [
        {
          "id": "ed80c292-b937-48bb-990c-28092c51e9ab",
          "name": "successful operation",
          "originalRequest": {
            "url": {
              "path": [
                "kvk",
                "zoeken"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "kvkNummer",
                  "value": "{{kvkNummer}}"
                },
                {
                  "key": "vestigingsnummer",
                  "value": "{{vestigingsnummer}}"
                },
                {
                  "key": "handelsnaam",
                  "value": "{{handelsnaam}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "description": {
                  "content": "Added as a part of security scheme: apikey",
                  "type": "text/plain"
                },
                "key": "Token",
                "value": "{{Token}}"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "\"See kvk OAS specs\"",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test api-postman using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /kvk/zoeken?kvkNummer=<string>&vestigingsnummer=<string>&handelsnaam=<string> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "https://virtserver.swaggerhub.com/credentialregister/wallet/1.0.0",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "f602dd5f-3983-4f68-88ae-4ae3c8d4c841",
    "name": "Wallet API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "The Wallet API of the Credential Register.",
      "type": "text/plain"
    }
  }
}